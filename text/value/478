"function processActionProposal(uint256 proposalIndex) external nonReentrant returns (bool, bytes memory) {        _validateProposalForProcessing(proposalIndex);        uint256 proposalId = proposalQueue[proposalIndex];        bytes storage action = actions[proposalId];        Proposal storage proposal = proposals[proposalId];        require(proposal.flags[6] == 1, \"!action\");        proposal.flags[1] = 1;         bool didPass = _didPass(proposalIndex);        if (proposal.paymentToken == stakeToken && proposal.paymentRequested > IERC20(stakeToken).balanceOf(address(this))) {            didPass = false;        }        if (tokenWhitelist[proposal.paymentToken] && proposal.paymentRequested > userTokenBalances[GUILD][proposal.paymentToken]) {            didPass = false;        }        if (proposal.tributeOffered > address(this).balance) {            didPass = false;        }        if (didPass) {            proposal.flags[2] = 1;             (bool success, bytes memory returnData) = proposal.applicant.call.<mask0>;            if (tokenWhitelist[proposal.paymentToken]) {                unsafeSubtractFromBalance(GUILD, proposal.paymentToken, proposal.paymentRequested);                if (userTokenBalances[GUILD][proposal.paymentToken] == 0 && proposal.paymentRequested > 0) {totalGuildBankTokens -= 1;}            }            return (success, returnData);        }        emit ProcessActionProposal(proposalIndex, proposalId, didPass);    }"