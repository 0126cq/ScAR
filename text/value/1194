"function requestRelayEntry(        address callbackContract,        uint256 callbackGas    ) public nonReentrant payable returns (uint256) {        require(            callbackGas <= 2000000,            \"Callback gas exceeds 2000000 gas limit\"        );        require(            msg.value >= entryFeeEstimate(callbackGas),            \"Payment is less than required minimum.\"        );        (            uint256 entryVerificationFee,            uint256 dkgContributionFee,            uint256 groupProfitFee,            uint256 gasPriceCeiling        ) = entryFeeBreakdown();        uint256 callbackFee = msg.value.sub(entryVerificationFee)            .sub(dkgContributionFee).sub(groupProfitFee);        _dkgFeePool += dkgContributionFee;        OperatorContract operatorContract = OperatorContract(            selectOperatorContract(uint256(keccak256(_previousEntry)))        );        uint256 selectedOperatorContractFee = operatorContract.groupProfitFee().add(            operatorContract.entryVerificationFee()        );        _requestCounter++;        uint256 requestId = _requestCounter;        operatorContract.sign.<mask0>(requestId, _previousEntry);        uint256 surplus = entryVerificationFee.add(groupProfitFee).sub(selectedOperatorContractFee);        _requestSubsidyFeePool = _requestSubsidyFeePool.add(surplus);        if (callbackContract != address(0)) {            _callbacks[requestId] = Callback(callbackContract, callbackFee, callbackGas, msg.sender);        }        if (_requestSubsidyFeePool >= 100) {            uint256 amount = _requestSubsidyFeePool.percent(1);            _requestSubsidyFeePool -= amount;            (bool success, ) = msg.sender.call.value(amount)(\"\");            require(success, \"Failed send subsidy fee\");        }        emit RelayEntryRequested(requestId);        return requestId;    }"