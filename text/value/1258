"function deposit(bytes32 _commitment) external payable nonReentrant {    require(!commitments[_commitment], \"The commitment has been submitted\");    require(msg.value >= coinDenomination, \"insufficient coin amount\");    uint256 refund = msg.value - coinDenomination;    uint32 insertedIndex = _insert(_commitment);    commitments[_commitment] = true;    updateBlockReward();    uint256 cycDeno = cycDenomination();    uint256 fee = anonymityFee;    if (cycDeno.add(fee) > 0) {      require(cycToken.transferFrom(msg.sender, address(this), cycDeno.add(fee)), \"insufficient CYC allowance\");    }    if (fee > 0) {      address t = treasury;      if (t == address(0)) {        require(cycToken.burn(fee), \"failed to burn anonymity fee\");      } else {        safeTransfer(cycToken, t, fee);      }    }    uint256 td = tokenDenomination;    if (td > 0) {      token.safeTransferFrom(msg.sender, address(this), td);    }    accumulateCYC += cycDeno;    numOfShares += 1;    if (refund > 0) {      (bool success, ) = msg.sender.call.<mask0>(\"\");      require(success, \"failed to refund\");    }    emit Deposit(_commitment, insertedIndex, block.timestamp, cycDeno, fee);  }"