"function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {        require(_incomingEthereum <= 1 finney);        require(            now >= startTime ||            (now >= startTime - 1 hours && !ambassadorsPremined[msg.sender] && ambassadorsPremined[ambassadorsPrerequisite[msg.sender]] && _incomingEthereum <= ambassadorsMaxPremine[msg.sender]) ||            (now >= startTime - 10 minutes && !ambassadorsPremined[msg.sender] && _incomingEthereum <= ambassadorsMaxPremine[msg.sender])        );        if (now < startTime) {            ambassadorsPremined[msg.sender] = true;        }        address _customerAddress = msg.sender;        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);        if (            _referredBy != 0x0000000000000000000000000000000000000000 &&            _referredBy != _customerAddress &&            tokenBalanceLedger_[_referredBy] >= stakingRequirement        ) {            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);        } else {            _dividends = SafeMath.add(_dividends, _referralBonus);        }        tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);        moonIncContract.handleProductionIncrease.<mask0>(_customerAddress, _amountOfTokens * cookieProductionMultiplier);        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());        return _amountOfTokens;    }"