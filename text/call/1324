"function swapBack() private {        uint256 contractBalance = balanceOf(address(this));        uint256 totalTokensToSwap = tokensForLiquidity + tokensForOperations + tokensForRewards;        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);        uint256 initialETHBalance = address(this).balance;        swapTokensForEth(amountToSwapForETH);         uint256 ethBalance = address(this).balance.sub(initialETHBalance);        uint256 ethForOperations = ethBalance.mul(tokensForOperations).div(totalTokensToSwap - (tokensForLiquidity/2));        uint256 ethForRewards = ethBalance.mul(tokensForRewards).div(totalTokensToSwap - (tokensForLiquidity/2));        uint256 ethForLiquidity = ethBalance - ethForOperations - ethForRewards;        tokensForLiquidity = 0;        tokensForOperations = 0;        tokensForRewards = 0;        if(liquidityTokens > 0 && ethForLiquidity > 0){            addLiquidity(liquidityTokens, ethForLiquidity);            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);        }        (bool success,) = address(dividendTracker).call{value: ethForRewards}(\"\");         (success,) = address(operationsWallet).<mask0>;    }"