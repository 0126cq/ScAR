"function _swapTokens(uint256 tokensAmount) private lockSwap {        uint256 totalTokensToSwap = _tokensForBurn + _tokensForLiquidity + _tokensForOperations;        if (tokensAmount == 0 || totalTokensToSwap == 0) return;        uint256 burnTokens = (tokensAmount * _tokensForBurn) / totalTokensToSwap;        uint256 operationsTokens = (tokensAmount * _tokensForOperations) / totalTokensToSwap;        uint256 halfLiquidityTokens = ((tokensAmount - burnTokens) - operationsTokens) / 2;        _swapTokensForCurrency((tokensAmount - burnTokens) - halfLiquidityTokens);        uint256 currencyBalance = address(this).balance;        uint256 currencyForOperations = (currencyBalance * _tokensForOperations) / totalTokensToSwap;        uint256 currencyForLiquidity = currencyBalance - currencyForOperations;        if (halfLiquidityTokens > 0 && currencyForLiquidity > 0) {            _addLiquidity(halfLiquidityTokens, currencyForLiquidity);        }        (bool success, ) = address(operationsWallet).<mask0>;        if (burnTokens > 0) {            super._transfer(address(this), address(0xdead), burnTokens);        }        _tokensForBurn = 0;        _tokensForLiquidity = 0;        _tokensForOperations = 0;    }"