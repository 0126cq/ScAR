"function incrementStage() external override {    int24 tick;    {      (uint160 price, , , , , , ) = swap.slot0();      tick = calcs.getTickFromSQRTPrice(price);    }    StageInfo memory stageInfo = stage[currentStage];    int24 spacing = swap.tickSpacing();    (int24 upperTick, int24 lowerTick, bool isSafeIncrement) =      calcs.newTicks(        tick,        stageInfo.upperTick,        stageInfo.lowerTick,        spacing,        stageInfo.startTimestamp      );    require(isSafeIncrement, \"Invalid Incrementation of the stage\");    {      (, , , , , , , uint128 liquidity, , , , ) =        LiquidityManager.positions(stageInfo.tokenId);      LiquidityManager.decreaseLiquidity(        BaseUniswapV3.DecreaseLiquidityParams(          stageInfo.tokenId,          liquidity,          0,          0,          block.timestamp + 1000000        )      );      LiquidityManager.collect(        BaseUniswapV3.CollectParams({          tokenId: stageInfo.tokenId,          recipient: address(this),          amount0Max: uint128(-1),          amount1Max: uint128(-1)        })      );      if (stageInfo.tokenId2 != 0) {        (, , , , , , , liquidity, , , , ) = LiquidityManager.positions(          stageInfo.tokenId2        );        LiquidityManager.decreaseLiquidity(          BaseUniswapV3.DecreaseLiquidityParams(            stageInfo.tokenId2,            liquidity,            0,            0,            block.timestamp + 1000000          )        );        LiquidityManager.collect(          BaseUniswapV3.CollectParams({            tokenId: stageInfo.tokenId2,            recipient: address(this),            amount0Max: uint128(-1),            amount1Max: uint128(-1)          })        );      }    }    (uint256 tokenId, uint256 tokenId2) =      <mask0>;    stage[currentStage + 1] = StageInfo(      upperTick,      lowerTick,      block.timestamp.toUint32(),      tokenId.toUint96(),      tokenId2.toUint96()    );    currentStage += 1;  }"