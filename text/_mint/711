"function buyShares(address to)        external        preventReentrant        returns (            uint256 shares,            uint256 baseInput,            uint256 quoteInput        )    {        uint256 baseBalance = _BASE_TOKEN_.balanceOf(address(this));        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));        uint256 baseReserve = _BASE_RESERVE_;        uint256 quoteReserve = _QUOTE_RESERVE_;        baseInput = baseBalance.sub(baseReserve);        quoteInput = quoteBalance.sub(quoteReserve);        require(baseInput > 0, \"NO_BASE_INPUT\");        if (totalSupply == 0) {            require(baseBalance >= 10**3, \"INSUFFICIENT_LIQUIDITY_MINED\");            shares = baseBalance;         } else if (baseReserve > 0 && quoteReserve == 0) {            shares = baseInput.mul(totalSupply).div(baseReserve);        } else if (baseReserve > 0 && quoteReserve > 0) {            uint256 baseInputRatio = DecimalMath.divFloor(baseInput, baseReserve);            uint256 quoteInputRatio = DecimalMath.divFloor(quoteInput, quoteReserve);            uint256 mintRatio = quoteInputRatio < baseInputRatio ? quoteInputRatio : baseInputRatio;            shares = DecimalMath.mulFloor(totalSupply, mintRatio);        }        <mask0>;        _setReserve(baseBalance, quoteBalance);        emit BuyShares(to, shares, _SHARES_[to]);    }"