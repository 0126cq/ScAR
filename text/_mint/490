"function _purchase(        PoolStorage.Layout storage l,        address account,        uint64 maturity,        int128 strike64x64,        bool isCall,        uint256 contractSize,        int128 newPrice64x64    ) internal returns (uint256 baseCost, uint256 feeCost) {        require(maturity > block.timestamp, \"expired\");        require(contractSize >= l.underlyingMinimum, \"too small\");        {            uint256 tokenAmount = l.contractSizeToBaseTokenAmount(                contractSize,                strike64x64,                isCall            );            uint256 freeLiquidityTokenId = _getFreeLiquidityTokenId(isCall);            require(                tokenAmount <=                    _totalSupply(freeLiquidityTokenId) -                        l.totalPendingDeposits(isCall) -                        (_balanceOf(account, freeLiquidityTokenId) -                            l.pendingDepositsOf(account, isCall)),                \"insuf liq\"            );        }        PoolStorage.QuoteResultInternal memory quote = _quotePurchasePrice(            PoolStorage.QuoteArgsInternal(                account,                maturity,                strike64x64,                newPrice64x64,                contractSize,                isCall            )        );        baseCost = ABDKMath64x64Token.toDecimals(            quote.baseCost64x64,            l.getTokenDecimals(isCall)        );        feeCost = ABDKMath64x64Token.toDecimals(            quote.feeCost64x64,            l.getTokenDecimals(isCall)        );        uint256 longTokenId = PoolStorage.formatTokenId(            PoolStorage.getTokenType(isCall, true),            maturity,            strike64x64        );        _updateCLevelAverage(l, longTokenId, contractSize, quote.cLevel64x64);        <mask0>;        int128 oldLiquidity64x64 = l.totalFreeLiquiditySupply64x64(isCall);        _mintShortTokenLoop(            l,            account,            maturity,            strike64x64,            contractSize,            baseCost,            isCall        );        int128 newLiquidity64x64 = l.totalFreeLiquiditySupply64x64(isCall);        _setCLevel(l, oldLiquidity64x64, newLiquidity64x64, isCall);        _processAvailableFunds(            FEE_RECEIVER_ADDRESS,            feeCost,            isCall,            true,            false        );        emit Purchase(            account,            longTokenId,            contractSize,            baseCost,            feeCost,            newPrice64x64        );    }"