"function openSwap(uint256 _notional) external override returns (bool) {        require(_notional > 0, '9');        uint256 adjustedNotional = _convertToStandardDecimal(_notional);        (uint256 swapCollateral, uint256 activeLiquidity) = _calculateSwapCollateralAndActiveLiquidity(adjustedNotional);        require(activeLiquidity <= totalAvailableLiquidity, '10');        uint256 supplementaryCollateral = activeLiquidity;        uint256 swapFee = swapCollateral.mul(fee).div(TEN_EXP_18);        uint256 underlierProtocol0BorrowIndex = IAdapter(adapter0).getBorrowIndex(underlier);        uint256 underlierProtocol1BorrowIndex = IAdapter(adapter1).getBorrowIndex(underlier);        Swap memory swap = Swap(            msg.sender,            false,            adjustedNotional,            swapCollateral,            activeLiquidity,            block.number,            underlierProtocol0BorrowIndex,            underlierProtocol1BorrowIndex        );        bytes32 swapKey = keccak256(abi.<mask0>);        swaps[swapKey] = swap;        swapNumbers[msg.sender] = swapNumbers[msg.sender].add(1);        totalActiveLiquidity = totalActiveLiquidity.add(activeLiquidity);        totalSwapCollateral = totalSwapCollateral.add(swapCollateral);        totalSupplementaryCollateral = totalSupplementaryCollateral.add(supplementaryCollateral);        totalAvailableLiquidity = totalAvailableLiquidity.sub(activeLiquidity);        totalFees = totalFees.add(swapFee);        uint256 amountToDebit = swapCollateral.add(fee).add(supplementaryCollateral);        utilization = _calculateUtilization();        fee = _calculateFee();        IERC20(underlier).safeTransferFrom(            msg.sender,            address(this),            _convertToUnderlierDecimal(amountToDebit)        );        emit OpenSwap(msg.sender, adjustedNotional, activeLiquidity, swapFee);        return true;    }"