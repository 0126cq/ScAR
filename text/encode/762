"function unlockDisputeFee(uint256 _disputeId) public {        uint256 origID = disputeIdByDisputeHash[disputesById[_disputeId].hash];        uint256 lastID =            disputesById[origID].disputeUintVars[                keccak256(                    abi.encode(                        disputesById[origID].disputeUintVars[_DISPUTE_ROUNDS]                    )                )            ];        if (lastID == 0) {            lastID = origID;        }        Dispute storage disp = disputesById[origID];        Dispute storage last = disputesById[lastID];        uint256 dispRounds = disp.disputeUintVars[_DISPUTE_ROUNDS];        if (dispRounds == 0) {            dispRounds = 1;        }        uint256 _id;        require(disp.disputeUintVars[_PAID] == 0, \"already paid out\");        require(            block.timestamp - last.disputeUintVars[_TALLY_DATE] > 1 days,            \"Time for voting haven't elapsed\"        );        StakeInfo storage stakes = stakerDetails[disp.reportedMiner];        disp.disputeUintVars[_PAID] = 1;        if (last.disputeVotePassed == true) {            stakes.startDate = block.timestamp - (block.timestamp % 86400);            uints[_STAKE_COUNT] -= 1;            updateMinDisputeFee();            if (stakes.currentStatus == 4) {                stakes.currentStatus = 5;                _doTransfer(                    disp.reportedMiner,                    disp.reportingParty,                    uints[_STAKE_AMOUNT]                );                stakes.currentStatus = 0;            }            for (uint256 i = 0; i < dispRounds; i++) {                _id = disp.disputeUintVars[                    keccak256(abi.encode(dispRounds - i))                ];                if (_id == 0) {                    _id = origID;                }                Dispute storage disp2 = disputesById[_id];                _doTransfer(                    address(this),                    disp2.reportingParty,                    disp2.disputeUintVars[_FEE]                );            }        } else {            stakes.currentStatus = 1;            TellorStorage.Request storage _request =                requestDetails[disp.disputeUintVars[_REQUEST_ID]];            if (disp.disputeUintVars[_MINER_SLOT] == 2) {                _request.finalValues[disp.disputeUintVars[_TIMESTAMP]] = disp                    .disputeUintVars[_VALUE];            }            if (_request.inDispute[disp.disputeUintVars[_TIMESTAMP]] == true) {                _request.inDispute[disp.disputeUintVars[_TIMESTAMP]] = false;            }            for (uint256 i = 0; i < dispRounds; i++) {                _id = disp.disputeUintVars[                    keccak256(abi.<mask0>)                ];                if (_id != 0) {                    last = disputesById[_id];                 }                _doTransfer(                    address(this),                    last.reportedMiner,                    disputesById[_id].disputeUintVars[_FEE]                );            }        }        if (disp.disputeUintVars[_MINER_SLOT] == 2) {            requestDetails[disp.disputeUintVars[_REQUEST_ID]].apiUintVars[                _DISPUTE_COUNT            ]--;        }    }"