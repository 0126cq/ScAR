"function _swap() internal {        (, , uint256 lastChangeBlock) = vault.getPoolTokens(pid);        require(lastChangeBlock < block.number, \"BalancerLBPSwapper: pool changed this block\");        uint256 bptTotal = pool.totalSupply();        if (bptTotal == 0) {            _initializePool();            return;        }        require(swapEndTime() < block.timestamp, \"BalancerLBPSwapper: weight update in progress\");        _exitPool();        _updateWeightsGradually(pool, block.timestamp, block.timestamp, initialWeights);        uint256 spentTokenBalance = IERC20(tokenSpent).balanceOf(address(this));        require(spentTokenBalance > minTokenSpentBalance, \"BalancerLBPSwapper: not enough for new swap\");        uint256[] memory amountsIn = _getTokensIn(spentTokenBalance);        bytes memory userData = abi.<mask0>;        IVault.JoinPoolRequest memory joinRequest;        joinRequest.assets = assets;        joinRequest.maxAmountsIn = amountsIn;        joinRequest.userData = userData;        joinRequest.fromInternalBalance = false;         vault.joinPool(pid, address(this), payable(address(this)), joinRequest);        _updateWeightsGradually(pool, block.timestamp, block.timestamp + duration, endWeights);        _initTimed();         _transferAll(tokenReceived, tokenReceivingAddress);    }"