"function _submitMiningSolution(        string memory _nonce,        uint256[5] memory _requestIds,        uint256[5] memory _values    ) internal {        bytes32 _hashMsgSender = keccak256(abi.<mask0>);        require(            stakerDetails[msg.sender].currentStatus == 1,            \"Miner status is not staker\"        );        require(            _requestIds[0] == currentMiners[0].value,            \"Request ID is wrong\"        );        require(            _requestIds[1] == currentMiners[1].value,            \"Request ID is wrong\"        );        require(            _requestIds[2] == currentMiners[2].value,            \"Request ID is wrong\"        );        require(            _requestIds[3] == currentMiners[3].value,            \"Request ID is wrong\"        );        require(            _requestIds[4] == currentMiners[4].value,            \"Request ID is wrong\"        );        uints[_hashMsgSender] = block.timestamp;        bytes32 _currChallenge = bytesVars[_CURRENT_CHALLENGE];        uint256 _slotP = uints[_SLOT_PROGRESS];        require(            minersByChallenge[_currChallenge][msg.sender] == false,            \"Miner already submitted the value\"        );        minersByChallenge[_currChallenge][msg.sender] = true;        Request storage _tblock = requestDetails[uints[_T_BLOCK]];        _tblock.valuesByTimestamp[0][_slotP] = _values[0];        _tblock.valuesByTimestamp[1][_slotP] = _values[1];        _tblock.valuesByTimestamp[2][_slotP] = _values[2];        _tblock.valuesByTimestamp[3][_slotP] = _values[3];        _tblock.valuesByTimestamp[4][_slotP] = _values[4];        _tblock.minersByValue[0][_slotP] = msg.sender;        _tblock.minersByValue[1][_slotP] = msg.sender;        _tblock.minersByValue[2][_slotP] = msg.sender;        _tblock.minersByValue[3][_slotP] = msg.sender;        _tblock.minersByValue[4][_slotP] = msg.sender;        if (_slotP + 1 == 4) {            _adjustDifficulty();        }        if (_slotP + 1 == 5) {            _newBlock(_nonce, _requestIds);            uints[_SLOT_PROGRESS] = 0;        } else {            uints[_SLOT_PROGRESS]++;        }        emit NonceSubmitted(            msg.sender,            _nonce,            _requestIds,            _values,            _currChallenge,            _slotP        );    }"