"function _processVirtualFunds(    address user,    address token,    uint256 tokenAmountRequired  ) private {    IIntegrationMap integrationMap = IIntegrationMap(      moduleMap.getModuleAddress(Modules.IntegrationMap)    );    uint256 integrationCount = integrationMap.getIntegrationAddressesLength();    IUserPositions userPositions = IUserPositions(      moduleMap.getModuleAddress(Modules.UserPositions)    );    uint256 virtualBalance = userPositions.getUserVirtualBalance(user, token);    if (virtualBalance > 0) {      uint256 currentAmount = tokenAmountRequired;      for (uint256 i = 0; i < integrationCount; i++) {        uint32[] memory tokenPools = pools[          integrationMap.getIntegrationAddress(i)        ][token];        if (tokenPools.length > 0) {          for (uint256 j = 0; j < tokenPools.length; j++) {            bytes memory key = abi.<mask0>;            uint256 withdrawalBalance = withdrawalVectors[user][key];            if (withdrawalBalance > 0 && currentAmount > 0) {              if (withdrawalBalance >= currentAmount) {                withdrawalVectors[user][key] -= currentAmount;                currentAmount = 0;                deployAmount[integrationMap.getIntegrationAddress(i)][                  tokenPools[j]                ][token] -= int256(currentAmount);              } else {                withdrawalVectors[user][key] = 0;                currentAmount -= withdrawalBalance;                deployAmount[integrationMap.getIntegrationAddress(i)][                  tokenPools[j]                ][token] -= int256(withdrawalBalance);              }            }            if (currentAmount == 0) {              break;            }          }        }        if (currentAmount == 0) {          break;        }      }    }  }"