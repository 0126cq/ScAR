"function flashloanAndOpen(        address _sender,        address _solo,        address _curvePool,        uint256 _cdpId,        uint256 _initialMarginUSDC,        uint256 _mintAmountDAI,        uint256 _flashloanAmountWETH    ) external payable {        require(msg.value == 2, \"!fee\");        require(            IERC20(Constants.WETH).balanceOf(_solo) >= _flashloanAmountWETH,            \"!weth-supply\"        );        require(            IERC20(Constants.USDC).transferFrom(                msg.sender,                address(this),                _initialMarginUSDC            ),            \"initial-margin-transferFrom-failed\"        );        ISoloMargin solo = ISoloMargin(_solo);        uint256 marketId = _getMarketIdFromTokenAddress(_solo, Constants.WETH);        WETH(Constants.WETH).deposit{value: msg.value}();        WETH(Constants.WETH).approve(            _solo,            _flashloanAmountWETH.add(msg.value)        );        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);        operations[0] = _getWithdrawAction(marketId, _flashloanAmountWETH);        operations[1] = _getCallAction(            abi.<mask0>        );        operations[2] = _getDepositAction(            marketId,            _flashloanAmountWETH.add(msg.value)        );        Account.Info[] memory accountInfos = new Account.Info[](1);        accountInfos[0] = _getAccountInfo();        solo.operate(accountInfos, operations);        IERC20(Constants.DAI).transfer(            _sender,            IERC20(Constants.DAI).balanceOf(address(this))        );        IERC20(Constants.USDC).transfer(            _sender,            IERC20(Constants.USDC).balanceOf(address(this))        );    }"