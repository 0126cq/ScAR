"function _feesHash(Fee[] memory fees)        private        pure        returns (bytes32 feesHash)    {        uint256 numFees = fees.length;        if (numFees == 0) {            feesHash = _EMPTY_ARRAY_KECCAK256;        } else if (numFees == 1) {            Fee memory fee = fees[0];            bytes32 dataHash = keccak256(fee.feeData);            assembly {                let mem := mload(64)                mstore(mem, _FEE_TYPEHASH)                mstore(add(mem, 32), and(ADDRESS_MASK, mload(fee)))                mstore(add(mem, 64), mload(add(fee, 32)))                mstore(add(mem, 96), dataHash)                mstore(mem, keccak256(mem, 128))                feesHash := keccak256(mem, 32)            }        } else {            bytes32[] memory feeStructHashArray = new bytes32[](numFees);            for (uint256 i = 0; i < numFees; i++) {                feeStructHashArray[i] = keccak256(abi.<mask0>);            }            assembly {                feesHash := keccak256(add(feeStructHashArray, 32), mul(numFees, 32))            }        }    }"