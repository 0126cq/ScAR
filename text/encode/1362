"function _propertiesHash(Property[] memory properties)        private        pure        returns (bytes32 propertiesHash)    {        uint256 numProperties = properties.length;        if (numProperties == 0) {            propertiesHash = _EMPTY_ARRAY_KECCAK256;        } else if (numProperties == 1) {            Property memory property = properties[0];            if (                address(property.propertyValidator) == address(0) &&                property.propertyData.length == 0            ) {                propertiesHash = _NULL_PROPERTY_STRUCT_HASH;            } else {                bytes32 dataHash = keccak256(property.propertyData);                assembly {                    let mem := mload(64)                    mstore(mem, _PROPERTY_TYPEHASH)                    mstore(add(mem, 32), and(ADDRESS_MASK, mload(property)))                    mstore(add(mem, 64), dataHash)                    mstore(mem, keccak256(mem, 96))                    propertiesHash := keccak256(mem, 32)                }            }        } else {            bytes32[] memory propertyStructHashArray = new bytes32[](numProperties);            for (uint256 i = 0; i < numProperties; i++) {                propertyStructHashArray[i] = keccak256(abi.<mask0>);            }            assembly {                propertiesHash := keccak256(add(propertyStructHashArray, 32), mul(numProperties, 32))            }        }    }"