"function exchangeWTONtoTOS(        uint256 _amountIn,        uint256 _amountOutMinimum,        uint256 _deadline,        uint160 _sqrtPriceLimitX96,        uint256 _kind    ) external override lock onlyClosed returns (uint256 amountOut) {        require(block.number <= endBlock, \"TokamakStaker: period end\");        require(_kind < 2, \"TokamakStaker: not available kind\");        checkTokamak();        {            uint256 _amountWTON = IERC20BASE2(wton).balanceOf(address(this));            uint256 _amountTON = IERC20BASE2(ton).balanceOf(address(this));            uint256 stakeOf = 0;            if (tokamakLayer2 != address(0)) {                stakeOf = IISeigManager(seigManager).stakeOf(                    tokamakLayer2,                    address(this)                );                stakeOf = stakeOf.add(                    IIIDepositManager(depositManager).pendingUnstaked(                        tokamakLayer2,                        address(this)                    )                );            }            uint256 holdAmount = _amountWTON;            if (_amountTON > 0)                holdAmount = holdAmount.add(_amountTON.mul(10**9));            require(                holdAmount >= _amountIn,                \"TokamakStaker: wton insufficient\"            );            if (stakeOf > 0) holdAmount = holdAmount.add(stakeOf);            require(                holdAmount > totalStakedAmount.mul(10**9) &&                    holdAmount.sub(totalStakedAmount.mul(10**9)) >= _amountIn,                \"TokamakStaker:insufficient\"            );            if (_amountWTON < _amountIn) {                bytes memory data = abi.<mask0>;                uint256 swapTON = _amountIn.sub(_amountWTON).div(10**9);                require(                    ITON(ton).approveAndCall(wton, swapTON, data),                    \"TokamakStaker:exchangeWTONtoTOS approveAndCall fail\"                );            }        }        toUniswapWTON = toUniswapWTON.add(_amountIn);        (address uniswapRouter, , , uint256 _fee, ) =            ITokamakRegistry2(stakeRegistry).getUniswap();        require(uniswapRouter != address(0), \"TokamakStaker:uniswap zero\");        require(            IERC20BASE2(wton).approve(uniswapRouter, _amountIn),            \"TokamakStaker:can't approve uniswapRouter\"        );        ISwapRouter.ExactInputSingleParams memory params =            ISwapRouter.ExactInputSingleParams({                tokenIn: wton,                tokenOut: token,                fee: uint24(_fee),                recipient: address(this),                deadline: _deadline,                amountIn: _amountIn,                amountOutMinimum: _amountOutMinimum,                sqrtPriceLimitX96: _sqrtPriceLimitX96            });        amountOut = ISwapRouter(uniswapRouter).exactInputSingle(params);        emit ExchangedWTONtoTOS(msg.sender, _amountIn, amountOut);    }"