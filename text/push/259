"function matchOrder(address payable userAddress, string memory _tokenSymbol ,uint _amount,uint _duration,uint _yield, uint64 _orderId) internal    {        matchOrderMap[_orderId] = matchedOrder({                                                   supplier : (orderStatus[_orderId] == Status.OPENBORROW) ? userAddress : openOrderMap[_orderId].creator,                                            borrower : (orderStatus[_orderId] == Status.OPENCREATOR) ? userAddress : openOrderMap[_orderId].creator,                                            time    : now,                                            expiryDate : now + _duration*(30 days),                                            duration : _duration,                                            amount : _amount,                                            usdvalue : USDValue(_amount,_tokenSymbol),                                            yield : _yield,                                            wtoken : _tokenSymbol,                                            duesPaid : 0                                            });        for((uint i,uint j)=(0,0); i<users[matchOrderMap[_orderId].supplier].createdOrders.length; (i++,j++)) {            if(users[matchOrderMap[_orderId].supplier].createdOrders[i] == _orderId) { --j; continue; }            users[matchOrderMap[_orderId].supplier].createdOrders[j] = users[matchOrderMap[_orderId].supplier].createdOrders[i];        }        for((uint i,uint j)=(0,0); i<users[matchOrderMap[_orderId].borrower].borrowedOrders.length; (i++,j++)) {            if(users[matchOrderMap[_orderId].borrower].borrowedOrders[i] == _orderId) { continue; }            users[matchOrderMap[_orderId].borrower].borrowedOrders[j] = users[matchOrderMap[_orderId].borrower].borrowedOrders[i];        }        delete openOrderMap[_orderId];        poolSorter(_orderId, _tokenSymbol, false);        orderStatus[_orderId]=Status.MATCHED;        orderUSDValue[_orderId]=USDValue(_amount,_tokenSymbol);        users[matchOrderMap[_orderId].supplier].myOrders.<mask0>;        users[matchOrderMap[_orderId].borrower].myOrders.push(_orderId);        scheduleExpiry(_orderId);        scheduleCheck(_orderId,matchOrderMap[_orderId].borrower,1);        EMM.WithdrawManager(EMM.wtormap(_tokenSymbol), _amount, matchOrderMap[_orderId].borrower);        Init.emitOrderCreated(userAddress,_duration,_yield,_amount,_tokenSymbol);     }"