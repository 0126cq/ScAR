"function _addValidator(address validatorAddress, address validatorOwner, ValidatorStatus status, uint16 commissionRate, uint256 initialStake, uint64 sinceEpoch) internal {        require(commissionRate >= COMMISSION_RATE_MIN_VALUE && commissionRate <= COMMISSION_RATE_MAX_VALUE, \"bad commission\");        Validator memory validator = _validatorsMap[validatorAddress];        require(_validatorsMap[validatorAddress].status == ValidatorStatus.NotFound, \"already exist\");        validator.validatorAddress = validatorAddress;        validator.ownerAddress = validatorOwner;        validator.status = status;        validator.changedAt = sinceEpoch;        _validatorsMap[validatorAddress] = validator;        require(_validatorOwners[validatorOwner] == address(0x00), \"owner in use\");        _validatorOwners[validatorOwner] = validatorAddress;        if (status == ValidatorStatus.Active) {            _activeValidatorsList.<mask0>;        }        _validatorSnapshots[validatorAddress][sinceEpoch] = ValidatorSnapshot(0, uint112(initialStake / BALANCE_COMPACT_PRECISION), 0, commissionRate);        ValidatorDelegation storage delegation = _validatorDelegations[validatorAddress][validatorOwner];        require(delegation.delegateQueue.length == 0);        delegation.delegateQueue.push(DelegationOpDelegate(uint112(initialStake / BALANCE_COMPACT_PRECISION), sinceEpoch));        emit Delegated(validatorAddress, validatorOwner, initialStake, sinceEpoch);        emit ValidatorAdded(validatorAddress, validatorOwner, uint8(status), commissionRate);    }"