"function createProposal(        uint256 _shardPoolId,        uint256 shardBalance,        uint256 wantTokenAmount,        uint256 currentPrice,        uint256 totalShardSupply,        address submitter    ) external override returns (uint256, uint256) {        require(msg.sender == market, \"UNAUTHORIZED\");        require(            shardBalance >= totalShardSupply.mul(buyoutProportion).div(max),            \"INSUFFIENT BALANCE\"        );        uint256 otherShards = totalShardSupply.sub(shardBalance);        uint256 needAmount =            otherShards.mul(currentPrice).mul(buyoutTimes).div(max).div(1e18);        require(wantTokenAmount >= needAmount, \"INSUFFICIENT WANTTOKENAMOUNT\");        require(            !IMarketRegulator(regulator).IsInBlackList(_shardPoolId),            \"ON THE BLACKLIST\"        );        uint256 proposalId = proposolIdCount.add(1);        proposalIds[_shardPoolId] = proposalId;        uint256 timestamp = block.timestamp.add(voteLenth);        proposals[proposalId] = Proposal({            votesReceived: 0,            voteTotal: 0,            passed: false,            submitter: submitter,            voteDeadline: timestamp,            shardAmount: shardBalance,            wantTokenAmount: wantTokenAmount,            buyoutTimes: buyoutTimes,            price: currentPrice,            isSubmitterWithDraw: false,            shardPoolId: _shardPoolId,            isFailedConfirmed: false,            blockHeight: block.number,            createTime: block.timestamp        });        allVotes[proposalId] = otherShards;        proposalsHistory[_shardPoolId].<mask0>;        voted[proposalId][submitter] = true;        proposolIdCount = proposalId;        return (proposalId, buyoutTimes);    }"