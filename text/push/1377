"function addConvexPool(uint256 _originConvexPid)        public        override        onlyGovernance    {        (            address lpToken,            ,            ,            address originCrvRewards,            address originStash,            bool shutdown        ) = IOriginConvexBooster(originConvexBooster).poolInfo(                _originConvexPid            );        require(!shutdown, \"!shutdown\");        require(lpToken != address(0), \"!lpToken\");        ICurveRegistry registry = ICurveRegistry(            ICurveAddressProvider(curveAddressProvider).get_registry()        );        address curveSwapAddress = registry.get_pool_from_lp_token(lpToken);        address virtualBalance = IVirtualBalanceWrapperFactory(            virtualBalanceWrapperFactory        ).createWrapper(address(this));        address rewardCrvPool = IConvexRewardFactory(convexRewardFactory)            .createReward(rewardCrvToken, virtualBalance, address(this));        address rewardCvxPool = IConvexRewardFactory(convexRewardFactory)            .createReward(rewardCvxToken, virtualBalance, address(this));        uint256 extraRewardsLength = IOriginConvexRewardPool(originCrvRewards)            .extraRewardsLength();        if (extraRewardsLength > 0) {            for (uint256 i = 0; i < extraRewardsLength; i++) {                address extraRewardToken = IOriginConvexRewardPool(                    originCrvRewards                ).extraRewards(i);                address extraRewardPool = IConvexRewardFactory(                    convexRewardFactory                ).createReward(                        IOriginConvexRewardPool(extraRewardToken).rewardToken(),                        virtualBalance,                        address(this)                    );                IConvexRewardPool(rewardCrvPool).addExtraReward(                    extraRewardPool                );            }        }        poolInfo.<mask0>;    }"