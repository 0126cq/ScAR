"function init(        address _trancheFactory,        address _collateralToken,        address _admin,        uint256[] memory trancheRatios,        uint256 _maturityDate,        uint256 _depositLimit    ) external initializer {        require(_trancheFactory != address(0), \"BondController: invalid trancheFactory address\");        require(_collateralToken != address(0), \"BondController: invalid collateralToken address\");        require(_admin != address(0), \"BondController: invalid admin address\");        __Ownable_init();        transferOwnership(_admin);        trancheCount = trancheRatios.length;        collateralToken = _collateralToken;        string memory collateralSymbol = IERC20Metadata(collateralToken).symbol();        uint256 totalRatio;        for (uint256 i = 0; i < trancheRatios.length; i++) {            uint256 ratio = trancheRatios[i];            require(ratio <= TRANCHE_RATIO_GRANULARITY, \"BondController: Invalid tranche ratio\");            totalRatio += ratio;            address trancheTokenAddress = ITrancheFactory(_trancheFactory).createTranche(                getTrancheName(collateralSymbol, i, trancheRatios.length),                getTrancheSymbol(collateralSymbol, i, trancheRatios.length),                _collateralToken            );            tranches.<mask0>;            trancheTokenAddresses[trancheTokenAddress] = true;        }        require(totalRatio == TRANCHE_RATIO_GRANULARITY, \"BondController: Invalid tranche ratios\");        require(_maturityDate > block.timestamp, \"BondController: Invalid maturity date\");        maturityDate = _maturityDate;        depositLimit = _depositLimit;    }"