"function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) internal {        SortitionSumTree storage tree = self.sortitionSumTrees[_key];        uint treeIndex = tree.IDsToNodeIndexes[_ID];        if (treeIndex == 0) {             if (_value != 0) {                 if (tree.stack.length == 0) {                     treeIndex = tree.nodes.length;                    tree.nodes.push(_value);                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) {                         uint parentIndex = treeIndex / tree.K;                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];                        uint newIndex = treeIndex + 1;                        tree.nodes.push(tree.nodes[parentIndex]);                        delete tree.nodeIndexesToIDs[parentIndex];                        tree.IDsToNodeIndexes[parentID] = newIndex;                        tree.nodeIndexesToIDs[newIndex] = parentID;                    }                } else {                     treeIndex = tree.stack[tree.stack.length - 1];                    tree.stack.pop();                    tree.nodes[treeIndex] = _value;                }                tree.IDsToNodeIndexes[_ID] = treeIndex;                tree.nodeIndexesToIDs[treeIndex] = _ID;                updateParents(self, _key, treeIndex, true, _value);            }        } else {             if (_value == 0) {                 uint value = tree.nodes[treeIndex];                tree.nodes[treeIndex] = 0;                tree.stack.<mask0>;                delete tree.IDsToNodeIndexes[_ID];                delete tree.nodeIndexesToIDs[treeIndex];                updateParents(self, _key, treeIndex, false, value);            } else if (_value != tree.nodes[treeIndex]) {                 bool plusOrMinus = tree.nodes[treeIndex] <= _value;                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;                tree.nodes[treeIndex] = _value;                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);            }        }    }"