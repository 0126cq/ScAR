"function _createNewVaultsAndStrategies(        address _gauge,        bool _allowDuplicate    ) internal returns (address vault, address auraStrategy) {        if (!_allowDuplicate) {            require(                alreadyExistsFromGauge(_gauge) == address(0),                \"Vault already exists\"            );        }        address lptoken = ICurveGauge(_gauge).lp_token();        uint256 pid = getPid(_gauge);        if (pid == type(uint256).max) {            pid = booster.poolLength();            require(                IPoolManager(auraPoolManager).addPool(_gauge),                \"Unable to add pool to Aura\"            );        }        vault = registry.newVault(            lptoken,            address(this),            guardian,            treasury,            string(                abi.encodePacked(                    \"Balancer \",                    IDetails(address(lptoken)).symbol(),                    \" Auto-Compounding yVault\"                )            ),            string(                abi.encodePacked(\"yvBlp\", IDetails(address(lptoken)).symbol())            ),            0,            VaultType.AUTOMATED        );        deployedVaults.<mask0>;        numVaults = deployedVaults.length;        Vault v = Vault(vault);        v.setManagement(management);        v.setGovernance(governance);        v.setDepositLimit(depositLimit);        if (v.managementFee() != managementFee) {            v.setManagementFee(managementFee);        }        if (v.performanceFee() != performanceFee) {            v.setPerformanceFee(performanceFee);        }        Vault(vault).setDepositLimit(depositLimit);        auraStrategy = IStrategy(auraStratImplementation)            .cloneStrategyConvex(            vault,            management,            rewardsStrat,            keeper,            pid,            tradeFactory,            harvestProfitMaxInUsdt,            address(booster),            aura        );        IStrategy(auraStrategy).setHealthCheck(healthCheck);        Vault(vault).addStrategy(            auraStrategy,            10_000,            0,            type(uint256).max,            0        );        emit NewAutomatedVault(category, lptoken, _gauge, vault, auraStrategy);    }"