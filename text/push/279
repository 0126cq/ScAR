"function stake721(address contractAddress, uint256[] memory tokenIds) public nonReentrant {      require(!depositPaused, \"Deposit paused\");      require(stakingLaunched, \"Staking is not launched yet\");      require(contractAddress != address(0) && contractAddress == address(ApeNft) || contractAddress == address(TreasuryNft) || contractAddress == address(BreedingNft), \"Unknown contract or staking is not yet enabled for this NFT\");      ContractTypes contractType = _contractTypes[contractAddress];      Staker storage user = _stakers[_msgSender()];      uint256 newYield = user.currentYield;      for (uint256 i; i < tokenIds.length; i++) {        require(IERC721(contractAddress).ownerOf(tokenIds[i]) == _msgSender(), \"Not the owner of staking NFT\");        IERC721(contractAddress).safeTransferFrom(_msgSender(), address(this), tokenIds[i]);        _ownerOfToken[contractAddress][tokenIds[i]] = _msgSender();        newYield += getTokenYield(contractAddress, tokenIds[i]);        if (contractType == ContractTypes.APE) { user.stakedAPE.push(tokenIds[i]); }        if (contractType == ContractTypes.BREEDING) { user.stakedBREEDING.push(tokenIds[i]); }        if (contractType == ContractTypes.TREASURY) { user.stakedTREASURY.<mask0>; }      }      accumulate(_msgSender());      user.currentYield = newYield;      emit Stake721(_msgSender(), contractAddress, tokenIds.length);    }"