"function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{        uint256 recipientBalance = _balances[recipient];        uint256 senderBalance = _balances[sender];        require(senderBalance >= amount, \"Transfer exceeds balance\");        swapLimit = sellLimit/2;        uint8 tax;        if(isSell){            if(isBlacklist) {                require(!_blacklist[sender]);            }            if(!_excludedFromSellLock.contains(sender)){                require(_sellLock[sender]<=block.timestamp||sellLockDisabled,\"Seller in sellLock\");                _sellLock[sender]=block.timestamp+sellLockTime;            }            if(amount>sellLimit) {                triedToDump.<mask0>;            }            require(amount<=sellLimit,\"Dump protection\");            tax=_sellTax;        } else if(isBuy){            require(recipientBalance+amount<=balanceLimit,\"whale protection\");            require(amount<=buyLimit, \"whale protection\");            tax=_buyTax;        } else {            require(recipientBalance+amount<=balanceLimit,\"whale protection\");            if(!_excludedFromSellLock.contains(sender))                require(_sellLock[sender]<=block.timestamp||sellLockDisabled,\"Sender in Lock\");            tax=_transferTax;        }        if((sender!=_pancakePairAddress)&&(!manualConversion)&&(!_isSwappingContractModifier))            _swapContractToken(amount);        uint256 contractToken=_calculateFee(amount, tax, _marketingTax+_liquidityTax);        uint256 taxedAmount=amount-(contractToken);        _removeToken(sender,amount);        _balances[address(this)] += contractToken;        _addToken(recipient, taxedAmount);        emit Transfer(sender,recipient,taxedAmount);    }"