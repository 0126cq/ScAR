"function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");        DiamondStorage storage ds = diamondStorage();        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");        uint16 selectorPosition = uint16(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);        if (selectorPosition == 0) {            enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");            ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = uint16(ds.facetAddresses.length);            ds.facetAddresses.<mask0>;        }        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {            bytes4 selector = _functionSelectors[selectorIndex];            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");            removeFunction(ds, oldFacetAddress, selector);            addFunction(ds, selector, selectorPosition, _facetAddress);            selectorPosition++;        }    }"