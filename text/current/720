"function permit(        address _owner,        address _spender,        uint256 _amount,        uint256 _deadline,        uint8 _v,        bytes32 _r,        bytes32 _s    ) public virtual override {        require(block.timestamp <= _deadline, \"ERC20Permit: expired _deadline\");        bytes32 hashStruct;        Counters.Counter storage nonceCounter = _nonces[_owner];        uint256 nonce = nonceCounter.<mask0>;        assembly {            let memPtr := mload(64)            mstore(memPtr, 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9)            mstore(add(memPtr, 32), _owner)            mstore(add(memPtr, 64), _spender)            mstore(add(memPtr, 96), _amount)            mstore(add(memPtr, 128), nonce)            mstore(add(memPtr, 160), _deadline)            hashStruct := keccak256(memPtr, 192)        }        bytes32 eip712DomainHash = _domainSeparator();        bytes32 hash;        assembly {            let memPtr := mload(64)            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)              mstore(add(memPtr, 2), eip712DomainHash)                                                        mstore(add(memPtr, 34), hashStruct)                                                             hash := keccak256(memPtr, 66)        }        address signer = _recover(hash, _v, _r, _s);        require(signer == _owner, \"ERC20Permit: invalid signature\");        nonceCounter.increment();        _approve(_owner, _spender, _amount);    }"