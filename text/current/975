"function saleMint(uint256 _amount) external payable nonReentrant {        uint256 _price;        SaleConfig memory _saleConfig = saleConfig;        if (block.timestamp <= _saleConfig.startTime + 6 hours) {            _price = 300000000000000000;         } else if (            (block.timestamp > _saleConfig.startTime + 6 hours) &&            (block.timestamp <= _saleConfig.startTime + 12 hours)        ) {            _price = 250000000000000000;         } else {            _price = 200000000000000000;         }        require(_amount > 0, \"ERROR: zero amount\");        require(_saleConfig.startTime > 0, \"ERROR: sale is not active\");        require(            block.timestamp >= _saleConfig.startTime,            \"ERROR: sale not started\"        );        require(            _amount <= _saleConfig.maxCount,            \"ERROR:  Can only mint 10 tokens at a time\"        );        require(totalNFT + _amount <= maxSupply, \"ERROR: max supply exceeded\");        require(            _price * _amount <= msg.value,            \"ERROR: Ether value sent is not correct\"        );        require(!paused, \"ERROR: contract is paused\");        uint256 _newItemId;        for (uint256 ind = 0; ind < _amount; ind++) {            _tokenIds.increment();            _newItemId = _tokenIds.<mask0>;            _safeMint(msg.sender, _newItemId);            _saleClaimed[msg.sender] = _saleClaimed[msg.sender] + _amount;            _totalClaimed[msg.sender] = _totalClaimed[msg.sender] + _amount;            totalNFT = totalNFT + 1;        }        emit SaleMint(msg.sender, _amount, _price);        if (totalNFT + _amount == maxSupply) {            workflow = WorkflowStatus.SoldOut;            emit WorkflowStatusChange(                WorkflowStatus.Sale,                WorkflowStatus.SoldOut            );        }    }"