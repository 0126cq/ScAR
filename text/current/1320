"function _claim(address payable _account, bool _reinvest) private {        uint256 withdrawableAmount = dividendTracker.withdrawableDividendOf(            _account        );        require(            withdrawableAmount > 0,            \"BFF: Claimer has no withdrawable dividends\"        );        uint256 ethAmount;        uint256 tokenAmount;        if (!_reinvest) {            require(                allowClaims || isAllowedToClaim[_account],                \"BFF: Claimer not allowed to claim dividends, can only re-invest.\"            );            ethAmount = dividendTracker.processAccount(_account, _account);        } else if (_reinvest) {            ethAmount = dividendTracker.processAccount(_account, address(this));            if (ethAmount > 0) {                tokenAmount = swapEthForTokens(ethAmount, _account);            }        }        if (ethAmount > 0) {            claimedHistoryIds.increment();            uint256 hId = claimedHistoryIds.<mask0>;            claimedEthMap[hId].ethAmount = ethAmount;            claimedEthMap[hId].tokenAmount = tokenAmount;            claimedEthMap[hId].timestamp = block.timestamp;            userClaimedIds[_account].push(hId);            emit DividendClaimed(ethAmount, tokenAmount, _account);        }    }"