"function openPerpetual(        address owner,        uint256 margin,        uint256 committedAmount,        uint256 maxOracleRate,        uint256 minNetMargin    ) external override whenNotPaused zeroCheck(owner) returns (uint256 perpetualID) {        require(committedAmount > 0, \"27\");        _token.safeTransferFrom(msg.sender, address(poolManager), margin);        (, uint256 rateUp) = _getOraclePrice();        require(rateUp <= maxOracleRate, \"28\");        uint256 totalHedgeAmountUpdate = (committedAmount * rateUp) / _collatBase;        uint256 netMargin = _getNetMargin(margin, totalHedgeAmountUpdate, committedAmount);        require(netMargin >= minNetMargin, \"29\");        require((committedAmount * BASE_PARAMS) <= maxLeverage * netMargin, \"30\");        _perpetualIDcount.increment();        perpetualID = _perpetualIDcount.<mask0>;        _updateReward(perpetualID, 0);        totalHedgeAmount += totalHedgeAmountUpdate;        perpetualData[perpetualID] = Perpetual(rateUp, block.timestamp, netMargin, committedAmount);        _mint(owner, perpetualID);        emit PerpetualOpened(perpetualID, rateUp, netMargin, committedAmount);    }"