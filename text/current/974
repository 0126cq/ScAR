"function presaleMint(        uint256 _amount,        bytes32 messageHash,        bytes calldata signature        ) external payable nonReentrant {        PresaleConfig memory _presaleConfig = presaleConfig;        require(hashMessage(msg.sender) == messageHash, \"BAD_HASH\");        require(verifyAddressSigner(messageHash, signature), \"BAD_SIGNATURE\");        require(_amount == 1, \"ERROR: amount is not 1\");        require(            _presaleConfig.startTime > 0,            \"ERROR: Presale must be active to mint Crazy Camels\"        );        require(            block.timestamp >= _presaleConfig.startTime,            \"ERROR: Presale not started\"        );        require(            block.timestamp <=                _presaleConfig.startTime + _presaleConfig.duration,            \"ERROR: Presale is ended\"        );        require(            _presaleClaimed[msg.sender] + _amount <= _presaleConfig.maxCount,            \"ERROR: Can only mint 1 tokens\"        );        require(totalNFT + _amount <= maxSupply, \"ERROR: max supply exceeded\");        uint256 _price = 100000000000000000;        require(_price <= msg.value, \"ERROR: Ether value sent is not correct\");        require(!paused, \"ERROR: contract is paused\");        uint256 _newItemId;        for (uint256 ind = 0; ind < _amount; ind++) {            _tokenIds.increment();            _newItemId = _tokenIds.<mask0>;            _safeMint(msg.sender, _newItemId);            _presaleClaimed[msg.sender] = _presaleClaimed[msg.sender] + 1;            _totalClaimed[msg.sender] = _totalClaimed[msg.sender] + 1;            totalNFT = totalNFT + 1;            presaleCount = presaleCount + 1;        }        emit PresaleMint(msg.sender, _amount, _price);        if (totalNFT + _amount == maxSupply) {            workflow = WorkflowStatus.SoldOut;            emit WorkflowStatusChange(                WorkflowStatus.Sale,                WorkflowStatus.SoldOut            );        }    }"