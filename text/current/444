"function mintPresale(uint256[] calldata bagIds, uint16[] calldata bagType, uint8[] calldata traits, bytes32[] calldata merkleProof) external payable\t\tnonReentrant\t\tpresaleActive\t\tisPaymentValid(bagIds.length) {\t\t\t_checkTraitsCount(bagIds.length, bagType.length, traits.length);\t\t\tfor (uint8 index = 0; index < bagIds.length; index++) {\t\t\t\tuint8 face = traits[index * 4];\t\t\t\tuint8 eyes = traits[index * 4 + 1];\t\t\t\tuint8 bg = traits[index * 4 + 2];\t\t\t\tuint8 left = traits[index * 4 + 3];\t\t\t\t_checkTraitsValid(face, eyes, bg, left);\t\t\t\tuint bagId = bagIds[index];\t\t\t\tif (bagType[index] == _lootType) {\t\t\t\t\t_checkLootOwner(bagId);\t\t\t\t\t_mintHyperLootEvent(msg.sender, bagId, _lootType, bagId, face, eyes, bg, left);\t\t\t\t\t_countTokenLoot.increment();\t\t\t\t} else if (bagType[index] == _mlootType) {\t\t\t\t\t_checkMerkleProof(merkleProof, hyperlistMerkleRoot, msg.sender);\t\t\t\t\t_checkHyperlistClaimed(msg.sender);\t\t\t\t\t_checkMLootOwner(bagId);\t\t\t\t\t_mintHyperLootEvent(msg.sender, _tokenIdStartMLoot + _countTokenMLoot.<mask0>, _mlootType, bagId, face, eyes, bg, left);\t\t\t\t\t_claimMLoot(bagId);\t\t\t\t\t_claimedHyperlist[msg.sender] = true;\t\t\t\t} else if (bagType[index] == _gaType) {\t\t\t\t\t_checkGASupply();\t\t\t\t\t_checkGAOwner(bagId);\t\t\t\t\t_mintHyperLootEvent(msg.sender, _tokenIdStartGA + _countTokenGA.current(), _gaType, bagId, face, eyes, bg, left);\t\t\t\t\t_claimGA(bagId);\t\t\t\t}\t\t\t}\t}"