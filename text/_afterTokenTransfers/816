"function _transfer(        address from,        address to,        uint256 tokenId    ) private {        TokenOwnership memory prevOwnership = ownershipOf(tokenId);        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||            isApprovedForAll(prevOwnership.addr, _msgSender()) ||            getApproved(tokenId) == _msgSender());        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();        if (to == address(0)) revert TransferToZeroAddress();        _beforeTokenTransfers(from, to, tokenId, 1);        _approve(address(0), tokenId, prevOwnership.addr);        unchecked {            _addressData[from].balance -= 1;            _addressData[to].balance += 1;            _ownerships[tokenId].addr = to;            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);            uint256 nextTokenId = tokenId + 1;            if (_ownerships[nextTokenId].addr == address(0)) {                if (_exists(nextTokenId)) {                    _ownerships[nextTokenId].addr = prevOwnership.addr;                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;                }            }        }        emit Transfer(from, to, tokenId);        <mask0>;    }"