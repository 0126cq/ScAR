"function migrateByAdmin_DQV(uint256[] inputs) external onlyAdmin {        uint256 data = inputs[2];        address token = tokenId2Address[(data & WITHDRAW_TOKEN_MASK) >> 32];        address newContract = address(inputs[0]);        for (uint256 i = 1; i < inputs.length; i += 4) {            uint256 gasFee = inputs[i];            data = inputs[i + 1];            address user = userId2Address[data & USER_MASK];            bytes32 hash = keccak256(                this,                gasFee,                data & SIGN_MASK | uint256(token),                newContract            );            require(                verify(                    hash,                    user,                    uint8(data & V_MASK == 0 ? 27 : 28),                    bytes32(inputs[i + 2]),                    bytes32(inputs[i + 3])                )            );            if (gasFee > 0) {                uint256 paymentMethod = data & PAYMENT_METHOD_MASK;                if (paymentMethod == PAY_BY_JOY) {                    balances[joyToken][user] = balances[joyToken][user].sub(gasFee);                    balances[joyToken][joysoWallet] = balances[joyToken][joysoWallet].add(gasFee);                } else if (paymentMethod == PAY_BY_TOKEN) {                    balances[token][user] = balances[token][user].sub(gasFee);                    balances[token][joysoWallet] = balances[token][joysoWallet].add(gasFee);                } else {                    balances[0][user] = balances[0][user].sub(gasFee);                    balances[0][joysoWallet] = balances[0][joysoWallet].add(gasFee);                }            }            uint256 amount = balances[token][user];            balances[token][user] = 0;            if (token == 0) {                Migratable(newContract).migrate.value(amount)(user, amount, token);            } else {                <mask0>.approve(newContract, amount);                Migratable(newContract).migrate(user, amount, token);            }        }    }"