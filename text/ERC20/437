"function burnToToken(        address receiver,        address burnTokenAddress,        uint256 burnAmount,        uint256 minPriceAllowed)        external        nonReentrant        returns (uint256)    {        uint256 loanAmountOwed = _burnToken(burnAmount, minPriceAllowed);        if (loanAmountOwed > 0) {            if (burnTokenAddress != loanTokenAddress) {                address oracle = IBZx(bZxContract).oracleAddresses(bZxOracle);                uint256 tempAllowance = <mask0>.allowance(address(this), oracle);                if (tempAllowance < loanAmountOwed) {                    if (tempAllowance > 0) {                        require(ERC20(loanTokenAddress).approve(oracle, 0), \"token approval reset failed\");                    }                    require(ERC20(loanTokenAddress).approve(oracle, MAX_UINT), \"token approval failed\");                }                (uint256 destTokenAmountReceived,) = IBZxOracle(oracle).tradeUserAsset(                    loanTokenAddress,                    burnTokenAddress,                    receiver,                     receiver,                     loanAmountOwed,                    MAX_UINT,                    0                 );                loanAmountOwed = destTokenAmountReceived;            } else {                require(ERC20(loanTokenAddress).transfer(                    receiver,                    loanAmountOwed                ), \"transfer of loanToken failed\");            }        }        return loanAmountOwed;    }"