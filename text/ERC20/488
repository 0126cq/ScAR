"function withdraw(bool asETH) external {        require(            saleSchedule.endTimestamp > 0 &&                block.timestamp >= saleSchedule.endTimestamp,            \"SALE_ONGOING\"        );        require(saleToken.amount > 0, \"WITHDRAWALS_NOT_ENABLED\");        AccountData memory account = accountData[msg.sender];        require(account.currentBalance > 0, \"NOT_DEPOSITED\");        TokenData[] memory withdrawData;        uint256 cap = raiseCapUSD;        uint256 totalRaise = totalRaisedUSD;        if (cap > 0) {            withdrawData = new TokenData[](2);            uint256 validAmount = account.currentBalance.mul(cap).div(                totalRaise            );            uint256 toRefund = account.currentBalance.sub(validAmount);            uint256 balance = IERC20(account.token).balanceOf(address(this));            if (toRefund > balance) toRefund = balance;            if (asETH && account.token == address(WETH)) {                IWETH(WETH).withdraw(toRefund);                payable(msg.sender).transfer(toRefund);            } else IERC20(account.token).safeTransfer(msg.sender, toRefund);            withdrawData[0] = TokenData(account.token, toRefund);        } else withdrawData = new TokenData[](1);        uint256 depositedValue = rates[account.token]            .mul(account.currentBalance)            .div(10**<mask0>.decimals());        uint256 toSend = depositedValue.mul(saleToken.amount).div(totalRaise);        IERC20(saleToken.token).safeTransfer(msg.sender, toSend);        delete accountData[msg.sender];        withdrawData[withdrawData.length - 1] = TokenData(            saleToken.token,            toSend        );        emit Withdrawn(msg.sender, withdrawData);    }"