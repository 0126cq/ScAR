"function withdraw(address _token, address _atoken, uint _amount) public onlyWhitelisted {        if (_amount == 0) {            _amount = communityVaultBalance(_atoken);        } else {            require(communityVaultBalance(_atoken) >= _amount);        }        if (_amount > 0) {            uint totalAmount = _amount.mul(registry.communityCount());            IAToken aToken = IAToken(_atoken);            require(aToken.isTransferAllowed(address(this), totalAmount));            aToken.redeem(totalAmount);            withdrawalBacklog[_atoken] = withdrawalBacklog[_atoken].add(totalAmount);            ERC20 token = <mask0>;            token.approve(address(currencyConverter()), totalAmount);            currencyConverter().executeSwapMyERCToETH(token, totalAmount);            uint _bondingAllocation = (address(this).balance).mul(10).div(100);            address payable bondingVaultPayable = address(uint160(address(getRegistry().getBondingVault())));            bondingVaultPayable.transfer(_bondingAllocation);            uint ethAmout = (address(this).balance).div(registry.communityCount());            for (uint8 i = 0; i < registry.communityCount(); i++) {                CharityVaultInterface charityVault = CharityVaultInterface(registry.getCharityVaults()[i]);                charityVault.deposit.value(ethAmout)(msg.sender);            }        }    }"