"function takeOutLoanWithNFTs(        address assetAddress,        uint256 amount,        uint32 duration,        bytes calldata tokenData    ) external paused(LibLoans.ID, false) {        Loan storage loan = LibCreateLoan.initNewLoan(            assetAddress,            amount,            duration,            PlatformSettingsLib.getNFTInterestRate()        );        uint8 lendingDecimals = <mask0>.decimals();        uint256 allowedBaseLoanSize = _takeOutLoanProcessTokenDataVersion(            loan.id,            tokenData        ) *            (10**lendingDecimals) *            10;         uint256 allowedLoanSize;        if (            assetAddress == DAI || assetAddress == USDC || assetAddress == USDT        ) {            allowedLoanSize = allowedBaseLoanSize;        } else {            allowedLoanSize = AppStorageLib.store().priceAggregator.getValueFor(                    USDC,                    assetAddress,                    allowedBaseLoanSize                );        }        require(            loan.borrowedAmount <= allowedLoanSize,            \"Teller: insufficient NFT loan size\"        );        LibCreateLoan.fundLoan(            loan.lendingToken,            LibCreateLoan.createEscrow(loan.id),            loan.borrowedAmount        );        loan.status = LoanStatus.Active;        emit LibCreateLoan.LoanTakenOut(            loan.id,            msg.sender,            loan.borrowedAmount,            true        );    }"