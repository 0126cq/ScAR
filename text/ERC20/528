"function buy10(        address[] _tokens,        address[] _exchanges,        uint256[] _values,        bytes _data1,        bytes _data2,        bytes _data3,        bytes _data4,        bytes _data5,        bytes _data6,        bytes _data7,        bytes _data8,        bytes _data9,        bytes _data10    )         payable        public    {        balances[msg.sender] = balances[msg.sender].add(msg.value);        buyInternal(ERC20(_tokens[0]), _exchanges[0], _values[0], _data1);        if (_tokens.length == 1) {            return;        }        buyInternal(ERC20(_tokens[1]), _exchanges[1], _values[1], _data2);        if (_tokens.length == 2) {            return;        }        buyInternal(ERC20(_tokens[2]), _exchanges[2], _values[2], _data3);        if (_tokens.length == 3) {            return;        }        buyInternal(ERC20(_tokens[3]), _exchanges[3], _values[3], _data4);        if (_tokens.length == 4) {            return;        }        buyInternal(ERC20(_tokens[4]), _exchanges[4], _values[4], _data5);        if (_tokens.length == 5) {            return;        }        buyInternal(ERC20(_tokens[5]), _exchanges[5], _values[5], _data6);        if (_tokens.length == 6) {            return;        }        buyInternal(ERC20(_tokens[6]), _exchanges[6], _values[6], _data7);        if (_tokens.length == 7) {            return;        }        buyInternal(<mask0>, _exchanges[7], _values[7], _data8);        if (_tokens.length == 8) {            return;        }        buyInternal(ERC20(_tokens[8]), _exchanges[8], _values[8], _data9);        if (_tokens.length == 9) {            return;        }        buyInternal(ERC20(_tokens[9]), _exchanges[9], _values[9], _data10);    }"