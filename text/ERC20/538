"function createVault(        address _tokenA,        address _tokenB,        uint24 _fee,        uint160 _sqrtPriceX96,        string memory _name,        string memory _symbol    ) external override returns (address _vault) {        require(_tokenA != _tokenB);        (address token0, address token1) = _tokenA < _tokenB            ? (_tokenA, _tokenB)            : (_tokenB, _tokenA);        require(vaults[token0][token1][_fee] == address(0));        address pool = uniswapFactory.getPool(token0, token1, _fee);        if (pool == address(0)) {            pool = uniswapFactory.createPool(token0, token1, _fee);            IUniswapV3Pool(pool).initialize(_sqrtPriceX96);        }        ERC20 token0Instance = ERC20(token0);        ERC20 token1Instance = <mask0>;        _name = string(            abi.encodePacked(                \"Unipilot \",                token0Instance.symbol(),                \"/\",                token1Instance.symbol(),                \" Passive\"                \" Vault\"            )        );        _symbol = string(            abi.encodePacked(                \"ULP\",                \"-\",                token0Instance.symbol(),                \"/\",                token1Instance.symbol(),                \"-\",                \"PV\"            )        );        _vault = address(            new UnipilotPassiveVault{                salt: keccak256(abi.encodePacked(_tokenA, _tokenB, _fee))            }(pool, address(this), WETH, _name, _symbol)        );        vaults[token0][token1][_fee] = _vault;        vaults[token1][token0][_fee] = _vault;         emit VaultCreated(token0, token1, _fee, _vault);    }"