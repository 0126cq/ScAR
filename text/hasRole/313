"function _transfer(        address from,        address to,        uint256 amount    )    private    preventBlacklisted(_msgSender(), \"Diamond: Address is blacklisted\")    preventBlacklisted(from, \"Diamond: From address is blacklisted\")    preventBlacklisted(to, \"Diamond: To address is blacklisted\")    preventLocked(from, to)    {        require(from != address(0), \"BEP20: transfer from the zero address\");        require(to != address(0), \"BEP20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        if(!<mask0> && !hasRole(DEFAULT_ADMIN_ROLE , to))            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");        uint256 contractTokenBalance = balanceOf(address(this));        if(contractTokenBalance >= _maxTxAmount)        {            contractTokenBalance = _maxTxAmount;        }        bool takeFee = true;        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){            takeFee = false;        }        uint256 tierIndex = 0;        if(takeFee) {            tierIndex = _accountsTier[from];            if(_msgSender() != from) {                tierIndex = _accountsTier[_msgSender()];            }        }        _tokenTransfer(from, to, amount, tierIndex, takeFee);    }"