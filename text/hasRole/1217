"function _upgrade(address payable proxy) internal {        _checkSafeRegistrations();        _checkEnabledModule();        _checkOwnerships();        address mApt = addressRegistry.mAptAddress();        PoolToken poolV1 = PoolToken(payable(proxy));        IERC20 underlyer = poolV1.underlyer();        uint256 underlyerBalance = underlyer.balanceOf(address(this));        require(underlyerBalance > 0, \"FUND_UPGRADER_WITH_STABLE\");        underlyer.safeApprove(address(poolV1), 0);        underlyer.safeApprove(address(poolV1), underlyerBalance);        poolV1.addLiquidity(underlyerBalance);        uint256 aptBalance = poolV1.balanceOf(address(this));        require(aptBalance > 0, \"USE_LARGER_DEPOSIT\");        uint256 allowance = aptBalance.div(2);        require(allowance > 0, \"USE_LARGER_DEPOSIT\");        poolV1.approve(msg.sender, allowance);        address logicV2 = deployV2Logic();        _executeUpgradeAsModule(proxy, logicV2, POOL_PROXY_ADMIN);        PoolTokenV2 poolV2 = PoolTokenV2(proxy);        require(            poolV2.balanceOf(address(this)) == aptBalance,            \"BALANCEOF_TEST_FAILED\"        );        require(            poolV2.allowance(address(this), msg.sender) == allowance,            \"ALLOWANCES_TEST_FAILED\"        );        poolV2.redeem(aptBalance);        underlyerBalance = underlyer.balanceOf(address(this));        underlyer.safeTransfer(msg.sender, underlyerBalance);        require(            poolV2.addressRegistry() == addressRegistry,            \"INCORRECT_ADDRESS_REGISTRY\"        );        bytes32 DEFAULT_ADMIN_ROLE = poolV2.DEFAULT_ADMIN_ROLE();        bytes32 EMERGENCY_ROLE = poolV2.EMERGENCY_ROLE();        bytes32 ADMIN_ROLE = poolV2.ADMIN_ROLE();        bytes32 CONTRACT_ROLE = poolV2.CONTRACT_ROLE();        require(            poolV2.hasRole(DEFAULT_ADMIN_ROLE, emergencySafe),            \"ROLE_TEST_FAILED\"        );        require(            poolV2.hasRole(EMERGENCY_ROLE, emergencySafe),            \"ROLE_TEST_FAILED\"        );        require(poolV2.<mask0>, \"ROLE_TEST_FAILED\");        require(poolV2.hasRole(CONTRACT_ROLE, mApt), \"ROLE_TEST_FAILED\");        _lockPool(proxy);    }"