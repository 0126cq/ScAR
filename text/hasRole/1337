"function buy(        Purchase calldata data,        uint8 v,        bytes32 r,        bytes32 s    ) external payable {        bytes32 payloadHash = keccak256(            abi.encode(                keccak256(                    \"mint(address receiver, uint256 price, uint256 quantity, uint8 dropId, uint chainId)\"                ),                msg.sender,                data.price,                data.quantity,                data.dropId,                block.chainid            )        );        bytes32 digest = keccak256(            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", payloadHash)        );        address addr = ecrecover(digest, v, r, s);        require(<mask0>, \"POPEYE: Invalid signer\");        Drop storage drop = _drop[data.dropId];        require(drop.status > 0, \"POPEYE: Drop not exist or not open\");        require(data.quantity > 0, \"POPEYE: Quantity must be greater than 0\");        require(            (drop.mintCount[msg.sender] + data.quantity) <= drop.maxPreWallet,            \"POPEYE: Reach Max Pre Wallet\"        );        if (drop.status == 1) {            require(                (drop.mintCount[msg.sender] + data.quantity) <=                    drop.maxPreWhiteList,                \"POPEYE: Reach Max Pre White List\"            );            bytes32 leaf = keccak256(abi.encode(msg.sender));            require(                MerkleProof.verify(data.proof, drop.whiteListProofRoot, leaf),                \"POPEYE: Not in White List\"            );        }        require(msg.value >= data.price, \"POPEYE: Invalid msg.value \");        payable(PAYMENT_ADDRESS).transfer(msg.value);        mintNew(data.dropId, msg.sender, data.quantity);    }"