"function swap(uint[] calldata _inTokenIds, uint[] calldata _outTokenIds, address integrator) public payable reentrancyGuard {        if (_outTokenIds.length > _inTokenIds.length) {            uint tokensToBurn = (_outTokenIds.length - _inTokenIds.length) * 10 ** DECIMALS;            if (tokensToBurn > this.balanceOf(msg.sender)) {                revert InsufficientTokensToBurn();            }            _burn(msg.sender, tokensToBurn);        }        for (uint i = 0; i < _inTokenIds.length; i = onePlus(i)) {            if (!isValidTokenId(_inTokenIds[i])) {                revert InvalidTokenId(_inTokenIds[i]);            }            collection.transferFrom(msg.sender, address(this), _inTokenIds[i]);        }        for (uint i = 0; i < _outTokenIds.length; i = onePlus(i)) {            if (!isValidTokenId(_outTokenIds[i])) {                revert InvalidTokenId(_outTokenIds[i]);            }            collection.<mask0>;        }        if (_outTokenIds.length < _inTokenIds.length) {            _mint(msg.sender, (_inTokenIds.length - _outTokenIds.length) * 10 ** DECIMALS);        }        stats[uint(Stats.SwappedIn)] += uint64(_inTokenIds.length);        stats[uint(Stats.SwappedOut)] += uint64(_outTokenIds.length);        emit Swapped(msg.sender, block.timestamp, _inTokenIds, _outTokenIds, stats);        handleTips(integrator, owner);    }"