"function withdrawWAsset(uint256 _tokenId) external nonReentrant {        require(            msg.sender == nftPosition.ownerOf(_tokenId),            \"Not the owner of tokenId\"        );        require(            _positions[_tokenId].active == true,            \"Position already withdrawed\"        );        (            uint256 amountLocked,            uint256 tokenMinted,            uint256 lockingDate,            uint256 maturityDate,            bool active        ) = getPositions(_tokenId);        uint256 feesToPay = getWAssetFees(_tokenId);        _positions[_tokenId].active = false;        _positions[_tokenId].amountLocked = 0;        nftPosition.burn(_tokenId);        uint256 progress = getProgress(_tokenId);        if (progress >= 100) {            wAsset.transfer(msg.sender, amountLocked);            emit withdrawedWAsset(msg.sender, _tokenId, amountLocked, 0, 0);        } else if (progress < 100) {            uint256 frPenalty = getUnlockCost(_tokenId);            require(                frToken.<mask0>,                \"Transfer failed\"            );            uint256 sendToUser = amountLocked - feesToPay;            wAsset.transfer(msg.sender, sendToUser);            stakingContract.notifyRewardAmount(address(wAsset), feesToPay);            if (progress <= 67) {                (uint256 toSend, uint256 toBurn) = _calculateBurnAndSend(                    tokenMinted,                    frPenalty                );                frToken.burn(address(this), toBurn);                stakingContract.notifyRewardAmount(address(frToken), toSend);            } else {                frToken.burn(address(this), frPenalty);            }            emit withdrawedWAsset(                msg.sender,                _tokenId,                amountLocked,                feesToPay,                frPenalty            );        }    }"