"function convertAddAndDepositLP(        uint256 lp,        LibMarket.AddLiquidity calldata al,        uint32[] memory crates,        uint256[] memory amounts    )        public        payable    {        updateSilo(msg.sender);        WithdrawState memory w;        if (totalDepositedBeans() < al.beanAmount) {            w.beansTransferred = al.beanAmount.sub(totalDepositedBeans());            bean().transferFrom(msg.sender, address(this), w.beansTransferred);        }        (w.beansAdded, w.newLP) = LibMarket.addLiquidity(al);        require(w.newLP > 0, \"Silo: No LP added.\");        (w.beansRemoved, w.stalkRemoved) = _withdrawBeansForConvert(crates, amounts, w.beansAdded);        uint256 amountFromWallet = w.beansAdded.sub(w.beansRemoved, \"Silo: Removed too many Beans.\");        if (amountFromWallet < w.beansTransferred)            bean().transfer(msg.sender, w.beansTransferred.sub(amountFromWallet));        else if (w.beansTransferred < amountFromWallet) {            uint256 transferAmount = amountFromWallet.sub(w.beansTransferred);            bean().transferFrom(msg.sender, address(this), transferAmount);        }        w.i = w.stalkRemoved.sub(w.beansRemoved.mul(C.getStalkPerBean()));        w.i = w.i.div(lpToLPBeans(lp.add(w.newLP)), \"Silo: No LP Beans.\");        uint32 depositSeason = uint32(season().sub(w.i.div(C.getSeedsPerLPBean())));        if (lp > 0) pair().<mask0>;        _depositLP(lp.add(w.newLP), depositSeason);        LibCheck.beanBalanceCheck();        updateBalanceOfRainStalk(msg.sender);    }"