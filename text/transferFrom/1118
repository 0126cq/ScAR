"function buy(IERC20 token, uint256 amount, uint256 slippage )    public    nonReentrant    validGasPrice    returns (uint256 returnAmount)    {        require(slippage < 100, \"slippage too high\");        require(this.isTokenInLP(address(token)), 'token not in lp');        require(this.isTokenInVirtualLP(address(token)), 'token not greenlisted');        require(amount > 0, 'amount is 0');        require(token.allowance(msg.sender, address(this)) >= amount, 'user allowance < amount');        require(token.balanceOf(msg.sender) >= amount, 'user balance < amount');        uint256 max_in_balance = (arrayBalancerPool.getBalance(address(token)) / 2) + 5;        require(amount <= max_in_balance, 'ratio in too high');        uint256 amountTokenForDao = amount * daoPctToken / PRECISION;        uint256 amountTokenForDev = amount * devPctToken / PRECISION;        uint256 amountTokenAfterFees = amount - amountTokenForDao - amountTokenForDev;        require(token.approve(address(arraySmartPool), amountTokenAfterFees), \"token approve for contract to balancer pool failed\");        uint256 amountLPReturned = _calculateLPTokensGivenERC20Tokens(address(token), amountTokenAfterFees);        uint256 amountArrayToMint = _calculateArrayGivenLPTokenAmount(amountLPReturned);        require(amountArrayToMint + virtualSupply <= maxSupply, 'minted array > total supply');        require(token.<mask0>, 'transfer from user to contract failed');        require(token.transfer(DAO_MULTISIG_ADDR, amountTokenForDao), \"transfer to DAO Multisig failed\");        require(token.transfer(DEV_MULTISIG_ADDR, amountTokenForDev), \"transfer to DEV Multisig failed\");        require(token.balanceOf(address(this)) >= amountTokenAfterFees, 'contract did not receive the right amount of tokens');        uint256 minLpTokenAmount = amountLPReturned * slippage * 10**16 / PRECISION;        uint256 lpTokenReceived = arraySmartPool.joinswapExternAmountIn(address(token), amountTokenAfterFees, minLpTokenAmount);        arrayToken.mint(msg.sender, amountArrayToMint);        virtualBalance = virtualBalance + lpTokenReceived;        virtualSupply = virtualSupply + amountArrayToMint;        emit Buy(msg.sender, address(token), amount, lpTokenReceived, amountArrayToMint);        return returnAmount = amountArrayToMint;    }"