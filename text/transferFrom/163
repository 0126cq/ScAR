"function makePayment(        bytes32 _h,        uint8   _v,        bytes32 _r,        bytes32 _s,        uint256 _paymentNumber,        uint8   _paymentMethod,        uint256 _chargeAmountInWei,        bool   _prefixed)         public        payable        validPayment(_paymentNumber)        returns (bool)    {        require(_paymentMethod == 0 || _paymentMethod == 1, \"invalid payment method\");        bytes32 image;        if (_prefixed) {            bytes32 preimage = generatePreimage(_paymentNumber, _chargeAmountInWei, _paymentMethod);            image = generatePrefixedPreimage(preimage);        } else {            image = generatePreimage(_paymentNumber, _chargeAmountInWei, _paymentMethod);        }        require(image == _h, \"reconstructed preimage does not match\");        address signer = ecrecover(_h, _v, _r, _s);        require(signer == SIGNER, \"recovered signer does not match\");        PaymentStruct memory ps = PaymentStruct({            paymentNumber: _paymentNumber,            chargeAmountInWei: _chargeAmountInWei,            method: PaymentMethod(_paymentMethod),            state: PaymentState.paid        });        payments[msg.sender][_paymentNumber] = ps;        numPayments[msg.sender] = numPayments[msg.sender].add(1);        if (PaymentMethod(_paymentMethod) == PaymentMethod.ETH) {            require(msg.value == _chargeAmountInWei, \"msg.value does not equal charge amount\");            emit PaymentMade(msg.sender, _paymentNumber, _paymentMethod, _chargeAmountInWei);            HOTWALLET.transfer(msg.value);            return true;        }        emit PaymentMade(msg.sender, _paymentNumber, _paymentMethod, _chargeAmountInWei);        require(RTI.<mask0>, \"trasferFrom failed, most likely needs approval\");        return true;    }"