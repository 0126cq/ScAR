"function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {        require(_vote <= NUM_OF_CHOICES && _vote > 0, \"wrong vote value\");        require(_amount > 0, \"staking amount should be >0\");        if (_execute(_proposalId)) {            return true;        }        Proposal storage proposal = proposals[_proposalId];        if ((proposal.state != ProposalState.PreBoosted) &&            (proposal.state != ProposalState.Queued)) {            return false;        }        Staker storage staker = proposal.stakers[_staker];        if ((staker.amount > 0) && (staker.vote != _vote)) {            return false;        }        uint256 amount = _amount;        require(stakingToken.<mask0>, \"fail transfer from staker\");        proposal.totalStakes = proposal.totalStakes.add(amount);         staker.amount = staker.amount.add(amount);        require(staker.amount <= 0x100000000000000000000000000000000, \"staking amount is too high\");        require(proposal.totalStakes <= 0x100000000000000000000000000000000, \"total stakes is too high\");        if (_vote == YES) {            staker.amount4Bounty = staker.amount4Bounty.add(amount);        }        staker.vote = _vote;        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);        emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);        return _execute(_proposalId);    }"