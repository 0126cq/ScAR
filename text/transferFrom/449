"function _memberJoin(address _nodeAddress) private {        address rocketVaultAddress = getContractAddress(\"rocketVault\");        address rocketTokenRPLAddress = getContractAddress(\"rocketTokenRPL\");        IERC20 rplInflationContract = IERC20(rocketTokenRPLAddress);        RocketVaultInterface rocketVault = RocketVaultInterface(rocketVaultAddress);        RocketDAONodeTrustedInterface rocketDAONode = RocketDAONodeTrustedInterface(getContractAddress(\"rocketDAONodeTrusted\"));        RocketDAONodeTrustedSettingsMembersInterface rocketDAONodeTrustedSettingsMembers = RocketDAONodeTrustedSettingsMembersInterface(getContractAddress(\"rocketDAONodeTrustedSettingsMembers\"));        RocketDAONodeTrustedSettingsProposalsInterface rocketDAONodeTrustedSettingsProposals = RocketDAONodeTrustedSettingsProposalsInterface(getContractAddress(\"rocketDAONodeTrustedSettingsProposals\"));        uint256 memberInvitedTime = rocketDAONode.getMemberProposalExecutedTime(\"invited\", _nodeAddress);        require(memberInvitedTime > 0, \"This node has not been invited to join\");        uint256 rplBondAmount = rocketDAONodeTrustedSettingsMembers.getRPLBond();        require(memberInvitedTime.add(rocketDAONodeTrustedSettingsProposals.getActionTime()) > block.timestamp, \"This node's invitation to join has expired, please apply again\");        require(rplInflationContract.allowance(_nodeAddress, address(this)) >= rplBondAmount, \"Not enough allowance given to RocketDAONodeTrusted contract for transfer of RPL bond tokens\");        require(rplInflationContract.<mask0>, \"Token transfer to RocketDAONodeTrusted contract was not successful\");        require(rplInflationContract.approve(rocketVaultAddress, rplBondAmount), \"Approval for RocketVault to spend RocketDAONodeTrusted RPL bond tokens was not successful\");        rocketVault.depositToken(getContractName(address(this)), IERC20(rocketTokenRPLAddress), rplBondAmount);        _memberAdd(_nodeAddress, rplBondAmount);        emit ActionJoined(_nodeAddress, rplBondAmount, block.timestamp);    }"