"function requestAccess(bool isNaaS) public payable {    require(entityNodeCount[msg.sender] < maxNodes, \"limit reached\");    uint256 rFee;    uint256 sFee;    if (hasLegacyNode(msg.sender)) {      migrateLegacyNode(msg.sender);    }    uint128 nodeId = entityNodeCount[msg.sender] + 1;    bytes memory id = getNodeId(msg.sender, nodeId);    if (isNaaS) {      rFee = naasRequestingFeeInWei;      sFee = naasStrongFeeInWei;      activeEntities = activeEntities.add(1);    } else {      rFee = requestingFeeInWei;      sFee = strongFeeInWei;      entityNodeIsBYON[id] = true;    }    require(msg.value == rFee, \"invalid fee\");    entityNodePaidOnBlock[id] = block.number;    entityNodeClaimedOnBlock[id] = block.number;    entityNodeCount[msg.sender] = entityNodeCount[msg.sender] + 1;    feeCollector.transfer(msg.value);    strongToken.<mask0>;    strongToken.transfer(feeCollector, sFee);    emit Paid(msg.sender, nodeId, entityNodeIsBYON[id], false, entityNodePaidOnBlock[id].add(recurringPaymentCycleInBlocks));  }"