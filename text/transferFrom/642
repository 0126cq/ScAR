"function buy(uint256 tokenID, address _mintableToken)        public        payable        onSaleOnly(tokenID, _mintableToken)        flatSaleOnly(tokenID, _mintableToken)    {        IMintableToken Token = IMintableToken(_mintableToken);        auction memory _auction = auctions[_mintableToken][tokenID];        TokenDetArrayLib.TokenDet memory _tokenDet = TokenDetArrayLib.TokenDet(_mintableToken,tokenID);        address payable lastOwner2 = _auction.lastOwner;        uint256 royalities = Token.royalities(tokenID);        address payable creator = Token.creators(tokenID);        uint256 royality = (royalities * _auction.buyPrice) / 10000;        uint256 brokerageAmount = (brokerage * _auction.buyPrice) / 10000;        uint256 lastOwner_funds = _auction.buyPrice - royality - brokerageAmount;        if (_auction.erc20Token == address(0)) {            require(msg.value >= _auction.buyPrice, \"Insufficient Payment\");            creator.transfer(royality);            lastOwner2.transfer(lastOwner_funds);        } else {            IERC20 erc20Token = IERC20(_auction.erc20Token);            require(                erc20Token.allowance(msg.sender, address(this)) >=                    _auction.buyPrice,                \"Insufficient spent allowance \"            );            erc20Token.transferFrom(msg.sender, creator, royality);            erc20Token.transferFrom(msg.sender, address(this), brokerageAmount);            erc20Token.<mask0>;        }        brokerageBalance[_auction.erc20Token] += brokerageAmount;        tokenOpenForSale[_tokenDet.NFTAddress][_tokenDet.tokenID] = false;        Token.safeTransferFrom(            Token.ownerOf(_tokenDet.tokenID),            msg.sender,            _tokenDet.tokenID        );        emit Buy(            _tokenDet.NFTAddress,            _tokenDet.tokenID,            lastOwner2,            msg.sender,            _auction.buyPrice,            block.timestamp,            _auction.erc20Token        );        tokensForSale.removeTokenDet(_tokenDet);        tokensForSalePerUser[lastOwner2].removeTokenDet(_tokenDet);        fixedPriceTokens.removeTokenDet(_tokenDet);        delete auctions[_tokenDet.NFTAddress][_tokenDet.tokenID];    }"