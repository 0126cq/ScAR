"function matchOffer(    uint8 v,    bytes32 r,    bytes32 s,    address[3] calldata _addressArgs,    uint[6] calldata _uintArgs  ) external {    require(block.timestamp < _uintArgs[2], \"Signed transaction expired\");    bytes32 hashStruct = keccak256(      abi.encode(          keccak256(\"matchoffer(address contractaddress,uint tokenid,uint ethamt,uint deadline,uint feeamt,address signer,uint salt,address royaltyaddress,uint royaltyamt)\"),          _addressArgs[0],          _uintArgs[0],          _uintArgs[1],          _uintArgs[2],          _uintArgs[3],          _addressArgs[1],          _uintArgs[4],          _addressArgs[2],          _uintArgs[5]        )    );    bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", _eip712DomainHash(), hashStruct));    address signaturesigner = ecrecover(hash, v, r, s);    require(signaturesigner == _addressArgs[1], \"invalid signature\");    require(offerhashes[hashStruct]==false,\"order filled or cancelled\");    offerhashes[hashStruct]=true;    if (_uintArgs[3]>0){      require(wethcontract.<mask0>,\"error in weth transfer\");    }    if (_uintArgs[5]>0){      require(wethcontract.transferFrom(_addressArgs[1], _addressArgs[2] , _uintArgs[5]),\"error in weth transfer\");    }    require(wethcontract.transferFrom(_addressArgs[1], msg.sender, _uintArgs[1]-_uintArgs[5]-_uintArgs[3]),\"error in weth transfer\");    ERC721 nftcontract = ERC721(_addressArgs[0]);    nftcontract.safeTransferFrom(msg.sender,_addressArgs[1] ,_uintArgs[0]);    emit Offerfilled(_addressArgs[1], msg.sender, hashStruct , _uintArgs[1] ,_uintArgs[3],_uintArgs[5],_addressArgs[2],0);  }"