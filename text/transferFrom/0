"function metapool_swap(        address from_vault,        address to_vault,        uint256 amount,        uint256 min_amount_out,        uint256 donation,        uint256 origin    ) public {        address underlying = Vault(from_vault).token();        address target = Vault(to_vault).token();        address underlying_pool = _get_pool_from_lp_token(underlying);        address target_pool = _get_pool_from_lp_token(target);        Vault(from_vault).<mask0>;        uint256 underlying_amount = Vault(from_vault).withdraw(            amount,            address(this)        );        StableSwap(underlying_pool).remove_liquidity_one_coin(            underlying_amount,            1,            1        );        IERC20 underlying_coin = IERC20(_get_coin(underlying_pool, 1));        uint256 liquidity_amount = underlying_coin.balanceOf(address(this));        underlying_coin.approve(target_pool, liquidity_amount);        StableSwap(target_pool).add_liquidity(            [0, liquidity_amount],            MIN_AMOUNT_OUT        );        uint256 target_amount = IERC20(target).balanceOf(address(this));        if (donation != 0) {            uint256 donating = (target_amount * donation) / MAX_DONATION;            SafeERC20.safeTransfer(IERC20(target), owner, donating);            target_amount -= donating;        }        approve(target, to_vault, target_amount);        uint256 out = Vault(to_vault).deposit(target_amount, msg.sender);        require(out >= min_amount_out, \"out too low\");        if (origin != UNKNOWN_ORIGIN) {            emit Orgin(origin);        }    }"