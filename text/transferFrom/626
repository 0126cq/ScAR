"function submitProposal(        address applicant,        uint256 tributeOffered,        uint256 sharesRequested,        uint256 lootRequested,        uint256 paymentRequested,        uint256 flagNumber,        address tributeToken,        address paymentToken,        bytes32 details    ) public nonReentrant returns (uint256 proposalId) {        require(sharesRequested.add(lootRequested) <= MAX_INPUT, \"shares maxed\");        if(flagNumber != 7){            require(tokenWhitelist[tributeToken] && tokenWhitelist[paymentToken], \"tokens not whitelisted\");            require(IERC20(tributeToken).transferFrom(msg.sender, address(this), tributeOffered), \"tribute token transfer failed\");            unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);        }        require(applicant != address(0), \"applicant cannot be 0\");        require(members[applicant].jailed == false, \"applicant jailed\");        require(flagNumber != 0 || flagNumber != 1 || flagNumber != 2 || flagNumber != 3, \"flag must be 4 - guildkick, 5 - spending, 6 - membership, 7 - governance\");        require(IERC20(depositToken).<mask0>, \"proposal deposit failed\");        unsafeAddToBalance(ESCROW, paymentToken, proposalDepositReward);        if(flagNumber == 5) {            require(goalHit == 1, \"goal not met yet\");        }         if(flagNumber == 6) {            require(paymentRequested == 0 || goalHit == 1, \"goal not met yet\");        }        bool[8] memory flags;         flags[flagNumber] = true;        if(flagNumber == 4) {            _submitProposal(applicant, 0, 0, 0, address(0), 0, address(0), details, flags);        }         else if (flagNumber == 7) {             _submitProposal(applicant, 0, 0, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags);        }         else {        _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags);        }        return proposalCount - 1;     }"