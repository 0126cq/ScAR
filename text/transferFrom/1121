"function addManyToCoral(address account, uint16[] calldata tokenIds) external override nonReentrant {    require(tx.origin == _msgSender() || _msgSender() == address(sharkGame), \"Only EOA\");    require(account == tx.origin, \"account to sender mismatch\");    for (uint i = 0; i < tokenIds.length; i++) {      uint16 tokenId = tokenIds[i];      if (_msgSender() != address(sharkGame)) {         require(sharksNft.ownerOf(tokenIds[i]) == _msgSender(), \"You don't own this token\");        sharksNft.<mask0>;      } else if (tokenId == 0) {        continue;       }      ISharks.SGTokenType tokenType = sharksNft.getTokenType(tokenId);      coral[tokenId] = Stake({        owner: account,        tokenId: uint16(tokenId),        value: uint80(chumStolen[uint8(tokenType)]),        timestamp: block.timestamp      });      coralByTypeIndex[tokenId] = coralByType[tokenType].length;      coralByType[tokenType].push(tokenId);      numStaked[tokenType] += 1;      if (tokenType == ISharks.SGTokenType.ORCA) {        orcasEnabled = true;      }      emit TokenStaked(account, tokenId, tokenType);    }  }"