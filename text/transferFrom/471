"function redeemERC721(address[] calldata contracts, uint256[] calldata tokenIds) external virtual override nonReentrant {        require(contracts.length == tokenIds.length, \"BurnRedeem: Invalid parameters\");        require(contracts.length == _redemptionRate, \"BurnRedeem: Incorrect number of NFTs being redeemed\");        for (uint i = 0; i < contracts.length; i++) {            require(redeemable(contracts[i], tokenIds[i]), \"BurnRedeem: Invalid NFT\");            try IERC721(contracts[i]).ownerOf(tokenIds[i]) returns (address ownerOfAddress) {                require(ownerOfAddress == msg.sender, \"BurnRedeem: Caller must own NFTs\");            } catch (bytes memory) {                revert(\"BurnRedeem: Bad token contract\");            }            if (!IERC721(contracts[i]).isApprovedForAll(msg.sender, address(this))) {                try IERC721(contracts[i]).getApproved(tokenIds[i]) returns (address approvedAddress) {                    require(approvedAddress == address(this), \"BurnRedeem: Contract must be given approval to burn NFT\");                } catch (bytes memory) {                    revert(\"BurnRedeem: Bad token contract\");                }            }            try IERC721(contracts[i]).<mask0> {            } catch (bytes memory) {                revert(\"BurnRedeem: Burn failure\");            }        }        _mintRedemption(msg.sender);    }"