"function bid(uint _auctionId, uint _price) external validId(_auctionId) whenNotPaused {    AuctionInfo storage auction = auctions[_auctionId];    require(_msgSender() != auction.seller, \"Auction: Invalid Bidder\");    require(_msgSender() != auction.bidder, \"Auction: Invalid Bidder\");    require(block.timestamp >= auction.start, \"Auction: Auction is not started\");    require(block.timestamp <= auction.end, \"Auction: Auction is Over\");    require(_price > auction.price.mul(bidPricePercent).div(100), \"Auction: Price is low\");    require(auction.status == AuctionStatus.Normal, \"Auction: Bid is not allowed\");    if (auction.bidder != address(0)) {      bidCount[auction.bidder] = bidCount[auction.bidder].sub(1);      require(IERC20(_bwp).transfer(auction.bidder, auction.price), \"Auction: BWP transfer failed\");    }    bidCount[_msgSender()] = bidCount[_msgSender()].add(1);    auction.bidder = _msgSender();    auction.price = _price;    auction.updatedAt = block.timestamp;    BidInfo memory newBid = BidInfo(_auctionId, auction.itemId, _price, _msgSender(), block.timestamp);    bids.push(newBid);    bidsOfAuction[_auctionId].push(bids.length - 1);    bidsOfUser[_msgSender()].push(bids.length - 1);    require(IERC20(_bwp).<mask0>, \"Auction: BWP transfer failed\");    emit Bid(_msgSender(), _auctionId, _price, block.timestamp);  }"