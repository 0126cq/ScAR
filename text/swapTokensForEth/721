"function _transfer(address sender, address recipient, uint amount) private {\t\trequire(sender != address(0), \"[sminem]: transfer from the zero address\");        require(recipient != address(0), \"[sminem]: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");\t\tif(sender != owner() && recipient != owner()) {            if(!_isExcludedFromFee[recipient] && !_isExcludedFromFee[sender] ) {                require(amount <= _maxAmountInTx, \"Transfer amount exceeds the maxTxAmount.\");            }\t\t\trequire(!_botList[sender] && !_botList[recipient], \"Bot detected\");\t\t\tif(sender == uniswapV2Pair && recipient != address(uniswapV2Router) && !_isExcludedFromFee[recipient]) {\t\t\t\trequire(isOpen, \"[sminem]: Trading not started yet.\");\t\t\t\tuint walletBalance = balanceOf(address(recipient));\t\t\t\trequire(amount.add(walletBalance) <= _totalSupply.mul(_maxOwnedTokensPercent).div(100));\t\t\t}\t\t\tuint256 contractTokenBalance = balanceOf(address(this));\t\t\tif(!inSwap && sender != uniswapV2Pair && isOpen) {\t\t\t\tif(contractTokenBalance > 0) {\t\t\t\t\tif(contractTokenBalance > balanceOf(uniswapV2Pair).mul(_maxTokensInWalletPercent).div(100)) {\t\t\t\t\t\tcontractTokenBalance = balanceOf(uniswapV2Pair).mul(_maxTokensInWalletPercent).div(100);\t\t\t\t\t}\t\t\t\t\t<mask0>;\t\t\t\t}\t\t\t\tuint256 contractETHBalance = address(this).balance;\t\t\t\tif(contractETHBalance > _floor) {\t\t\t\t\tsendETHToFee(address(this).balance.sub(_floor));\t\t\t\t}\t\t\t}\t\t}\t\tbool takeFee = true;\t\tif(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) takeFee = false;\t\tif(!takeFee)            removeAllFee();        _transferRegular(sender, recipient, amount);        if(!takeFee)            restoreAllFee();\t}"