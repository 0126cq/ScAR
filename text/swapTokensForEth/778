"function _transfer(address sender, address recipient, uint256 amount) private {        require(sender != address(0), \"ERC20: transfer from the zero address\");        require(recipient != address(0), \"ERC20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        if (snipeProtectionOn) {            require(!_isSniper[recipient], \"You have no power here!\");            require(!_isSniper[msg.sender], \"You have no power here!\");            require(!_isSniper[sender], \"You have no power here!\");        }        if(sender != owner() && recipient != owner()) {            if (!tradingOpen) {                if (!(sender == address(this) || recipient == address(this)                || sender == address(owner()) || recipient == address(owner()))) {                    require(tradingOpen, \"Trading is not enabled\");                }            }            if (cooldownEnabled) {                if (_lastTx[sender] + 30 > block.timestamp                && sender != address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)                    && sender != address(uniswapV2Pair)                ) {                    _lastTx[sender] = block.timestamp;                } else {                    require(!cooldownEnabled, \"You're on cooldown! 30s between trades!\");                }            }            if (uniswapOnly) {                if (                    sender != address(this) &&                    recipient != address(this) &&                    sender != address(uniswapV2Router) &&                    recipient != address(uniswapV2Router)                ) {                    require(                        _msgSender() == address(uniswapV2Router) ||                        _msgSender() == uniswapV2Pair,                        \"ERR: Uniswap only\"                    );                }            }            if (block.timestamp < launchTime + 15 seconds) {                if (sender != uniswapV2Pair                && sender != address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)                    && sender != address(uniswapV2Router)) {                    _isSniper[sender] = true;                    _confirmedSnipers.push(sender);                }            }        }        uint256 contractTokenBalance = balanceOf(address(this));        if (!inSwap && swapEnabled && sender != uniswapV2Pair) {            <mask0>;            uint256 contractETHBalance = address(this).balance;            if(contractETHBalance > 0) {                sendETHToTeamDev(address(this).balance);            }        }        bool takeFee = true;        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){            takeFee = false;        }        _tokenTransfer(sender,recipient,amount,takeFee);    }"