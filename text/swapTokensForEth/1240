"function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {       uint256 splitPromo;       uint256 tokensToPromo;       uint256 splitM;       uint256 totalBNB;        if (_promoFee != 0 && _FeeLiquidity != 0){            splitPromo = precDiv(_promoFee,(_FeeLiquidity+_promoFee),2);            tokensToPromo = contractTokenBalance*splitPromo/100;        uint256 firstHalf = (contractTokenBalance-tokensToPromo)/2;        uint256 secondHalf = contractTokenBalance-(tokensToPromo+firstHalf);        uint256 balanceBeforeSwap = address(this).balance;        swapTokensForEth(firstHalf+tokensToPromo);        totalBNB = address(this).balance - balanceBeforeSwap;        uint256 promoBNB = totalBNB*splitPromo/100;        addLiquidity(secondHalf, (totalBNB-promoBNB));        emit SwapAndLiquify(firstHalf, (totalBNB-promoBNB), secondHalf);        totalBNB = address(this).balance;        splitM = precDiv(_FeeMarketing,_promoFee,2);        uint256 marketingBNB = totalBNB*splitM/100;        sendToWallet(Wallet_Marketing, marketingBNB);        sendToWallet(Wallet_Dev, (totalBNB-marketingBNB));    } else if (_promoFee == 0 && _FeeLiquidity != 0){        uint256 firstHalf = contractTokenBalance.div(2);        uint256 secondHalf = contractTokenBalance.sub(firstHalf);        uint256 balanceBeforeSwap = address(this).balance;        <mask0>;        uint256 lpBNB = address(this).balance - balanceBeforeSwap;        addLiquidity(secondHalf, lpBNB);        emit SwapAndLiquify(firstHalf, lpBNB, secondHalf);    } else if (_promoFee != 0 && _FeeLiquidity == 0){        swapTokensForEth(contractTokenBalance);        totalBNB = address(this).balance;        splitM = precDiv(_FeeMarketing,_promoFee,2);        uint256 marketingBNB = totalBNB*splitM/100;        sendToWallet(Wallet_Marketing, marketingBNB);        sendToWallet(Wallet_Dev, (totalBNB-marketingBNB));    }    }"