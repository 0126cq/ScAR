"function _transfer(address from, address to, uint amount) private {        require(from != address(0), \"ERC20: transfer from the zero address\");        require(to != address(0), \"ERC20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        bool isBuy = false;        if(from != owner() && to != owner()) {            require(!_isBot[to]);            if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {                require(_tradingOpen, \"Trading not yet enabled.\");                    require((amount + balanceOf(address(to))) <= _maxWalletAmt, \"You can't own that many tokens at once.\");                 if(!cooldown[to].exists) {                    cooldown[to] = User(0,true);                }                    require(amount <= _maxTxnAmount, \"Exceeds maximum buy amount.\");                    require(cooldown[to].buy < block.timestamp + (15 seconds), \"Your buy cooldown has not expired.\");                cooldown[to].buy = block.timestamp;                isBuy = true;            }            if(!_inSwap && _tradingOpen && from != uniswapV2Pair) {                require(cooldown[from].buy < block.timestamp + (15 seconds), \"Your sell cooldown has not expired.\");                uint contractTokenBalance = balanceOf(address(this));                if(contractTokenBalance > 0) {                    if(_useImpactFeeSetter) {                        if(contractTokenBalance > (balanceOf(uniswapV2Pair) * _feeRate) / 100) {                            contractTokenBalance = (balanceOf(uniswapV2Pair) * _feeRate) / 100;                        }                    }                    <mask0>;                }                uint contractETHBalance = address(this).balance;                if(contractETHBalance > 0) {                    sendETHToFee(address(this).balance);                }                isBuy = false;            }        }        bool takeFee = true;        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){            takeFee = false;        }        _tokenTransfer(from,to,amount,takeFee,isBuy);    }"