"function _transfer(address sender, address recipient, uint256 amount) private {            require(sender != address(0), \"ERC20: transfer from the zero address\");            require(recipient != address(0), \"ERC20: transfer to the zero address\");            require(amount > 0, \"Transfer amount must be greater than zero\");            require(!_isBlackListedBot[sender], \"You are blacklisted\");            require(!_isBlackListedBot[msg.sender], \"You are blacklisted\");            require(!_isBlackListedBot[tx.origin], \"You are blacklisted\");            if(sender != owner() && recipient != owner()) {                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");            }            if(sender != owner() && recipient != owner() && recipient != uniswapV2Pair && recipient != address(0xdead)) {                uint256 tokenBalanceRecipient = balanceOf(recipient);                require(tokenBalanceRecipient + amount <= _maxWalletSize, \"Recipient exceeds max wallet size.\");            }            uint256 contractTokenBalance = balanceOf(address(this));            if(contractTokenBalance >= _maxTxAmount)            {                contractTokenBalance = _maxTxAmount;            }            bool overMinTokenBalance = contractTokenBalance >= _numOfTokensToExchangeForTeam;            if (!inSwap && swapEnabled && overMinTokenBalance && sender != uniswapV2Pair) {                <mask0>;                uint256 contractETHBalance = address(this).balance;                if(contractETHBalance > 0) {                    sendETHToTeam(address(this).balance);                }            }            bool takeFee = true;            if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){                takeFee = false;            }            _tokenTransfer(sender,recipient,amount,takeFee);        }"