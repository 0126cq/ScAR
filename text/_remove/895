"function take(        uint256 id,                   uint256 amt,                  uint256 max,                  address who,                  bytes calldata data       ) external lock isStopped(3) {        address usr = sales[id].usr;        uint96  tic = sales[id].tic;        require(usr != address(0), \"Clipper/not-running-auction\");        uint256 price;        {            bool done;            (done, price) = status(tic, sales[id].top);            require(!done, \"Clipper/needs-reset\");        }        require(max >= price, \"Clipper/too-expensive\");        uint256 lot = sales[id].lot;        uint256 tab = sales[id].tab;        uint256 owe;        {            uint256 slice = min(lot, amt);              owe = mul(slice, price);            if (owe > tab) {                owe = tab;                                  slice = owe / price;                    } else if (owe < tab && slice < lot) {                uint256 _chost = chost;                if (tab - owe < _chost) {                        require(tab > _chost, \"Clipper/no-partial-purchase\");                    owe = tab - _chost;                          slice = owe / price;                     }            }            tab = tab - owe;              lot = lot - slice;            vat.flux(ilk, address(this), who, slice);            DogLike dog_ = dog;            if (data.length > 0 && who != address(vat) && who != address(dog_)) {                ClipperCallee(who).clipperCall(msg.sender, owe, slice, data);            }            vat.move(msg.sender, vow, owe);            dog_.digs(ilk, lot == 0 ? tab + owe : owe);        }        if (lot == 0) {            _remove(id);        } else if (tab == 0) {            vat.flux(ilk, address(this), usr, lot);            <mask0>;        } else {            sales[id].tab = tab;            sales[id].lot = lot;        }        emit Take(id, max, price, owe, tab, lot, usr);    }"