"function takeCollateral(        uint256 auctionId,         uint256 collateralAmount,         uint256 maxPrice,         address recipient,         bytes calldata data     ) external override checkReentrancy isStopped(3) {        Auction memory auction = auctions[auctionId];        if (auction.user == address(0)) revert NoLossCollateralAuction__takeCollateral_notRunningAuction();        uint256 price;        {            bool done;            (done, price) = status(auction);            if (done) revert NoLossCollateralAuction__takeCollateral_needsReset();            if (maxPrice < price) revert NoLossCollateralAuction__takeCollateral_tooExpensive();        }        uint256 collateralToSell = auction.collateralToSell;        uint256 debt = auction.debt;        uint256 owe;        unchecked {            {                uint256 collateralSlice = min(collateralToSell, collateralAmount);                owe = wmul(collateralSlice, price);                if (owe < debt && collateralSlice < collateralToSell) {                    uint256 _auctionDebtFloor = vaults[auction.vault].auctionDebtFloor;                    if (debt - owe < _auctionDebtFloor) {                        if (debt <= _auctionDebtFloor)                            revert NoLossCollateralAuction__takeCollateral_noPartialPurchase();                        owe = debt - _auctionDebtFloor;                         collateralSlice = wdiv(owe, price);                    }                }                collateralToSell = collateralToSell - collateralSlice;                codex.transferBalance(auction.vault, auction.tokenId, address(this), recipient, collateralSlice);                ILimes limes_ = limes;                if (data.length > 0 && recipient != address(codex) && recipient != address(limes_)) {                    CollateralAuctionCallee(recipient).collateralAuctionCall(msg.sender, owe, collateralSlice, data);                }                codex.transferCredit(msg.sender, address(aer), owe);                limes_.liquidated(auction.vault, auction.tokenId, (collateralToSell == 0 || debt < owe) ? debt : owe);                debt = (owe < debt) ? debt - owe : 0;             }        }        if (collateralToSell == 0) {            _remove(auctionId);        } else if (debt == 0) {            codex.transferBalance(auction.vault, auction.tokenId, address(this), auction.user, collateralToSell);            <mask0>;        } else {            auctions[auctionId].debt = debt;            auctions[auctionId].collateralToSell = collateralToSell;        }        emit TakeCollateral(            auctionId,            maxPrice,            price,            owe,            debt,            collateralToSell,            auction.vault,            auction.tokenId,            auction.user        );    }"