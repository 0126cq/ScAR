"function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\t\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\t\taddress from = prevOwnership.addr;\t\tif (approvalCheck) {\t\t\tbool isApprovedOrOwner = (_msgSender() == from ||\t\t\tisApprovedForAll(from, _msgSender()) ||\t\t\t<mask0> == _msgSender());\t\t\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\t\t}\t\t_beforeTokenTransfers(from, address(0), tokenId, 1);\t\t_approve(address(0), tokenId, from);\tunchecked {\t\tAddressData storage addressData = _addressData[from];\t\taddressData.balance -= 1;\t\taddressData.numberBurned += 1;\t\tTokenOwnership storage currSlot = _ownerships[tokenId];\t\tcurrSlot.addr = from;\t\tcurrSlot.startTimestamp = uint64(block.timestamp);\t\tcurrSlot.burned = true;\t\tuint256 nextTokenId = tokenId + 1;\t\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\t\tif (nextSlot.addr == address(0)) {\t\t\tif (nextTokenId != _currentIndex) {\t\t\t\tnextSlot.addr = from;\t\t\t\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\t\t\t}\t\t}\t}\t\temit Transfer(from, address(0), tokenId);\t\t_afterTokenTransfers(from, address(0), tokenId, 1);\tunchecked {\t\t_burnCounter++;\t}\t}"