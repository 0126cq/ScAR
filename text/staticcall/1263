"function _valueConv(        bytes calldata expression,        uint8 way,        uint256 start    ) private returns (bytes32 ret, uint256 index) {        if (way == uint8(CallWay.Const)) {            ret = bytes32(expression[start:start + 32]);            index = start + 32;        } else {            address dst = address(bytes20(expression[start:start + 20]));            index = start + 20;            uint16 len = uint16(bytes2(expression[index:index + 2]));            index += 2;            bytes memory data = expression[index:index + len];            index += len;            bool success;            bytes memory returndata;            if (way == uint8(CallWay.Call)) {                (success, returndata) = dst.call{value: 0}(data);            } else if (way == uint8(CallWay.StaticCall)) {                if (dst == address(0)) {                    address user = address(bytes20(data));                    ret = bytes32(address(user).balance);                    return (ret, index);                }                (success, returndata) = dst.<mask0>;            } else {                revert(\"invalid way\");            }            if (success) {                if (returndata.length > 32) revert(\"invalid ret\");                ret = abi.decode(returndata, (bytes32));            } else {                if (returndata.length < 68) revert();                assembly {                    returndata := add(returndata, 0x04)                }                revert(abi.decode(returndata, (string)));            }        }    }"