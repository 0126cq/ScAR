"function _transfer(        address from,        address to,        uint256 amount    ) private {        if (to != owner() &&            to != Wallet_Dev &&            to != address(this) &&            to != uniswapV2Pair &&            to != Wallet_Burn &&            from != owner()){            uint256 heldTokens = balanceOf(to);            require((heldTokens + amount) <= _maxWalletToken,\"You are trying to buy too many tokens. You have reached the limit for one wallet.\");}        if (from != owner() && to != <mask0>)            require(amount <= _maxTxAmount, \"You are trying to buy more than the max transaction limit.\");        if (noBlackList){        require(!_isBlacklisted[from] && !_isBlacklisted[to], \"This address is blacklisted. Transaction reverted.\");}        require(from != address(0) && to != address(0), \"ERR: Using 0 address!\");        require(amount > 0, \"Token value must be higher than zero.\");        if(            txCount >= swapTrigger &&             !inSwapAndLiquify &&            from != uniswapV2Pair &&            swapAndLiquifyEnabled             )        {              txCount = 0;            uint256 contractTokenBalance = balanceOf(address(this));            if(contractTokenBalance > _maxTxAmount) {contractTokenBalance = _maxTxAmount;}            if(contractTokenBalance > 0){            swapAndLiquify(contractTokenBalance);        }        }        bool takeFee = true;        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (noFeeToTransfer && from != uniswapV2Pair && to != uniswapV2Pair)){            takeFee = false;        } else if (from == uniswapV2Pair){_TotalFee = _buyFee;} else if (to == uniswapV2Pair){_TotalFee = _sellFee;}        _tokenTransfer(from,to,amount,takeFee);    }"