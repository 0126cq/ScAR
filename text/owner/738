"function _sellShards(address seller, uint256 amount, uint256 minPayout) internal returns (uint256) {        IGovernance governance = ShardedWallet(payable(wallet)).governance();        address     owner      = ShardedWallet(payable(wallet)).<mask0>;        address     artist     = ShardedWallet(payable(wallet)).artistWallet();        require(owner == address(0) || governance.isModule(wallet, owner));        uint256[3] memory fees;        fees[0] =                            governance.getConfig(wallet, PCT_FEE_SUPPLIERS);        fees[1] =                            governance.getConfig(wallet, PCT_FEE_NIFTEX);        fees[2] = artist == address(0) ? 0 : governance.getConfig(wallet, PCT_FEE_ARTIST);        uint256 newX = curve.x + amount;        uint256 newY = curve.k / newX;        require(newX > 0 && newY > 0);        uint256 payout = curve.k / curve.x - newY;        require(payout <= address(this).balance - _etherLPExtra.feeToNiftex - _etherLPExtra.feeToArtist);        uint256 value = payout * (10**18 - fees[0] - fees[1] - fees[2]) / 10**18;        require(value >= minPayout);        curve.x = newX;        _etherLPExtra.underlyingSupply += payout * fees[0] / 10**18;        _etherLPExtra.feeToNiftex      += payout * fees[1] / 10**18;        _etherLPExtra.feeToArtist      += payout * fees[2] / 10**18;        Address.sendValue(payable(seller), value);        emit ShardsSold(seller, amount, value);        return value;    }"