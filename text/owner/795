"function createMarket(        IUniversalMarket _template,        string calldata _metaData,        uint256[] memory _conditions,        address[] calldata _references    ) external override returns (address) {        require(            templates[address(_template)].approval,            \"ERROR: UNAUTHORIZED_TEMPLATE\"        );        if (!templates[address(_template)].isOpen) {            require(                ownership.<mask0> == msg.sender,                \"ERROR: UNAUTHORIZED_SENDER\"            );        }        uint256 refLength = _references.length;        for (uint256 i; i < refLength;) {            require(                reflist[address(_template)][i][_references[i]] || reflist[address(_template)][i][address(0)],                \"ERROR: UNAUTHORIZED_REFERENCE\"            );            unchecked {                ++i;            }        }        uint256 conLength = _conditions.length;        for (uint256 i; i < conLength;) {            if (conditionlist[address(_template)][i] != 0) {                _conditions[i] = conditionlist[address(_template)][i];            }            unchecked {                ++i;            }        }        address _registry = registry;        if (            !IRegistry(_registry).confirmExistence(                address(_template),                _references[0]            )        ) {            IRegistry(_registry).setExistence(                address(_template),                _references[0]            );        } else if (!templates[address(_template)].allowDuplicate) {            revert(\"ERROR: DUPLICATE_MARKET\");        }        IUniversalMarket market = IUniversalMarket(            _createClone(address(_template))        );        IRegistry(_registry).supportMarket(address(market));        market.initialize(msg.sender, _metaData, _conditions, _references);        emit MarketCreated(            address(market),            address(_template),            _metaData,            _conditions,            _references        );        return address(market);    }"