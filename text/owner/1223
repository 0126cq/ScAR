"function selfBreedCollectiable(        SelfBreed calldata breed,        bytes calldata signature    ) external payable virtual onlyAllowed returns (uint256) {        bool status = SignatureCheckerUpgradeable.isValidSignatureNow(            <mask0>,            breed.signKey,            signature        );        require(status == true, \"$PackwoodERC721: cannot breed[ERROR]\");        require(            breedValue == msg.value,            \"$PackwoodERC721: Amount is incorrect\"        );        address owner_req = (ownerOf(breed.req_token_id));        address owner_accept = (ownerOf(breed.accept_token_id));        require(selfBreedStatus == true, \"$PackwoodERC721: Breeding is closed\");        require(            owner_req == owner_accept &&                owner_req == msg.sender &&                breed.req_token_id != breed.accept_token_id,            \"$PackwoodERC721: Cannot Self Breed\"        );        require(            breedInfo[breed.req_token_id].breedCount < 2 &&                breedInfo[breed.accept_token_id].breedCount < 2,            \"$PackwoodERC721: Exceeds max breed count\"        );        require(            block.timestamp >= breedInfo[breed.req_token_id].timstamp &&                block.timestamp >= breedInfo[breed.accept_token_id].timstamp,            \"$PackwoodERC721: cannot breed now\"        );        newItemId = tokenCounter;        string memory seed_token_uri = uriConcate(_before, newItemId, _after);        _safeMint(msg.sender, newItemId);         _setTokenURI(newItemId, seed_token_uri);         uint256 countOfReq = breedInfo[breed.req_token_id].breedCount;        uint256 countOfAccept = breedInfo[breed.accept_token_id].breedCount;        breedInfomation storage new_data = breedInfo[newItemId];        new_data.tokenId = newItemId;        new_data.breedCount = 0;        new_data.timstamp = block.timestamp + 4 days;        tokenCounter = tokenCounter + 1;        breedInfomation storage req_data = breedInfo[breed.req_token_id];        req_data.tokenId = breed.req_token_id;        req_data.breedCount = countOfReq + 1;        req_data.timstamp = block.timestamp + 1512000;        breedInfomation storage accept_data = breedInfo[breed.accept_token_id];        accept_data.tokenId = breed.accept_token_id;        accept_data.breedCount = countOfAccept + 1;        accept_data.timstamp = block.timestamp + 1512000;        payable(feeSKTWallet).transfer(msg.value);         emit breedSelf(            msg.sender,            breed.req_token_id,            breed.accept_token_id,            seed_token_uri,            newItemId,            msg.value        );        return newItemId;    }"