"function _unstake(uint256 amount) private returns (uint256) {        updateAccounting();        require(amount > 0, \"TokenGeyser: unstake amount is zero\");        require(            totalStakedFor(msg.sender) >= amount,            \"TokenGeyser: unstake amount is greater than total user stakes\"        );        uint256 stakingSharesToBurn =            totalStakingShares.mul(amount).div(totalStaked());        require(            stakingSharesToBurn > 0,            \"TokenGeyser: Unable to unstake amount this small\"        );        UserTotals storage totals = _userTotals[msg.sender];        Stake[] storage accountStakes = _userStakes[msg.sender];        uint256 stakingShareSecondsToBurn = 0;        uint256 sharesLeftToBurn = stakingSharesToBurn;        uint256 rewardAmount = 0;        while (sharesLeftToBurn > 0) {            Stake storage lastStake = accountStakes[accountStakes.length - 1];            uint256 stakeTimeSec = block.timestamp.sub(lastStake.timestampSec);            uint256 newStakingShareSecondsToBurn = 0;            if (lastStake.stakingShares <= sharesLeftToBurn) {                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(                    stakeTimeSec                );                rewardAmount = computeNewReward(                    rewardAmount,                    newStakingShareSecondsToBurn,                    stakeTimeSec                );                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(                    newStakingShareSecondsToBurn                );                sharesLeftToBurn = sharesLeftToBurn.sub(                    lastStake.stakingShares                );                accountStakes.pop();            } else {                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(                    stakeTimeSec                );                rewardAmount = computeNewReward(                    rewardAmount,                    newStakingShareSecondsToBurn,                    stakeTimeSec                );                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(                    newStakingShareSecondsToBurn                );                lastStake.stakingShares = lastStake.stakingShares.sub(                    sharesLeftToBurn                );                sharesLeftToBurn = 0;            }        }        totals.stakingShareSeconds = totals.stakingShareSeconds.<mask0>;        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(            stakingShareSecondsToBurn        );        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);        require(            _stakingPool.transfer(msg.sender, amount),            \"TokenGeyser: transfer out of staking pool failed\"        );        require(            _unlockedPool.transfer(msg.sender, rewardAmount),            \"TokenGeyser: transfer out of unlocked pool failed\"        );        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), \"\");        emit TokensClaimed(msg.sender, rewardAmount);        require(            totalStakingShares == 0 || totalStaked() > 0,            \"TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do\"        );        return rewardAmount;    }"