"function swapSimpleMode(        IAggregationExecutor caller,        SwapDescription calldata desc,        bytes calldata executorData,        bytes calldata clientData    ) public returns (uint256 returnAmount) {        IERC20 srcToken = desc.srcToken;        IERC20 dstToken = desc.dstToken;        require(!_isETH(srcToken), \"src is eth, should use normal swap\");        _permit(srcToken, desc.amount, desc.permit);        uint256 totalSwapAmount = desc.amount;        if (desc.srcReceivers.length > 0) {            require(                desc.srcReceivers.length == 1 &&                desc.srcReceivers.length == desc.srcAmounts.length,                \"Wrong number of src receivers\"            );            TransferHelper.safeTransferFrom(                address(srcToken),                msg.sender,                desc.srcReceivers[0],                desc.srcAmounts[0]            );            require(desc.srcAmounts[0] <= totalSwapAmount, \"invalid fee amount in src token\");            totalSwapAmount -= desc.srcAmounts[0];        }        address dstReceiver =            (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;        uint256 initialDstBalance = _getBalance(dstToken, dstReceiver);        _swapMultiSequencesWithSimpleMode(            caller,            address(srcToken),            totalSwapAmount,            address(dstToken),            dstReceiver,            executorData        );        returnAmount = _getBalance(dstToken, dstReceiver).<mask0>;        require(            returnAmount >= desc.minReturnAmount,            \"Return amount is not enough\"        );        emit Swapped(            msg.sender,            srcToken,            dstToken,            dstReceiver,            desc.amount,            returnAmount        );        emit Exchange(            address(caller),            returnAmount,            _isETH(dstToken) ? WETH : address(dstToken)        );        emit ClientData(            clientData        );    }"