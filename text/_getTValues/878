"function _tokenTransfer(    address sender,    address recipient,    uint256 tAmount,    bool takeFee  ) private {    if (!takeFee) {      removeAllFee();    }    uint256[4] memory tValues = <mask0>;    uint256 currentRate = _getRate();    if (takeFee) {      _rBuyBackTokenCount += (tValues[3] * currentRate);      if (!_isUniswapV2Pair[sender] && _rBuyBackTokenCount > 0) {        uint256 _tBuyBackTokenCount = _rBuyBackTokenCount / currentRate;        address contractAddress = address(this);        _rOwned[contractAddress] += _rBuyBackTokenCount;        emit Transfer(sender, contractAddress, _tBuyBackTokenCount);        uint256 _balBefore = contractAddress.balance;        swapTokensForEth(_tBuyBackTokenCount);        _buyBackEthBalance += contractAddress.balance - _balBefore;        _rBuyBackTokenCount = 0;      }      _takeLiquidity(tValues[2], tValues[2] * currentRate);      _reflectFee(tValues[1], tValues[1] * currentRate);    }    _rOwned[sender] -= (tAmount * currentRate);    _rOwned[recipient] += (tValues[0] * currentRate);    if (_isExcluded[sender]) {      _tOwned[sender] -= tAmount;    }    if (_isExcluded[recipient]) {      _tOwned[recipient] += tValues[0];    }    emit Transfer(sender, recipient, tValues[0]);    if (!takeFee) {      restoreAllFee();    }  }"