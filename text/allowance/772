"function migrateLiquidity(        address _tokenA,         address _tokenB,         address _lpToken,         address _externalRouter    )         external         whenNotPaused    {        IERC20 lpToken = IERC20(_lpToken);        uint256 exLiquidity = lpToken.balanceOf(msg.sender);        require(exLiquidity > 0, \"Migrator: no balance to migrate\");        require(            exLiquidity <= lpToken.<mask0>,            \"Migrator: insufficient allowance\"        );        lpToken.safeTransferFrom(msg.sender, address(this), exLiquidity);        lpToken.safeApprove(_externalRouter, exLiquidity);        (uint256 exBalanceTokenA, uint256 exBalanceTokenB) = IExternalRouter(_externalRouter).removeLiquidity(            _tokenA,                        _tokenB,                        exLiquidity,                    0,                              0,                              address(this),                  block.timestamp             );        IERC20(_tokenA).safeApprove(address(router), exBalanceTokenA);        IERC20(_tokenB).safeApprove(address(router), exBalanceTokenB);        (uint256 balanceTokenA, uint256 balanceTokenB, uint256 liquidity) = router.addLiquidity(            _tokenA,                        _tokenB,                        exBalanceTokenA,                exBalanceTokenB,                0,                              0,                              msg.sender,                     block.timestamp             );         emit MigrateLiquidity(            msg.sender,            _tokenA,            _tokenB,            _externalRouter,            exLiquidity,            exBalanceTokenA,            exBalanceTokenB,            liquidity,            balanceTokenA,            balanceTokenB        );    }"