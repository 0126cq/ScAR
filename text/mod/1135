"function closeCurrentFeePeriod() external issuanceActive {        require(getFeePeriodDuration() > 0, \"Fee Period Duration not set\");        require(_recentFeePeriodsStorage(0).startTime <= (now - getFeePeriodDuration()), \"Too early to close fee period\");        etherWrapper().distributeFees();        FeePeriod storage periodClosing = _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2);        FeePeriod storage periodToRollover = _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 1);        _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2).feesToDistribute = periodToRollover            .feesToDistribute            .sub(periodToRollover.feesClaimed)            .add(periodClosing.feesToDistribute);        _recentFeePeriodsStorage(FEE_PERIOD_LENGTH - 2).rewardsToDistribute = periodToRollover            .rewardsToDistribute            .sub(periodToRollover.rewardsClaimed)            .add(periodClosing.rewardsToDistribute);        _currentFeePeriod = _currentFeePeriod.add(FEE_PERIOD_LENGTH).sub(1).<mask0>;        delete _recentFeePeriods[_currentFeePeriod];        _recentFeePeriodsStorage(0).feePeriodId = uint64(uint256(_recentFeePeriodsStorage(1).feePeriodId).add(1));        _recentFeePeriodsStorage(0).startingDebtIndex = uint64(synthetixState().debtLedgerLength());        _recentFeePeriodsStorage(0).startTime = uint64(now);        emitFeePeriodClosed(_recentFeePeriodsStorage(1).feePeriodId);    }"