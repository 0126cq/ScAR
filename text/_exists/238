"function hashFromRandomBytes(            uint256 _randomBytes,            uint256 _tokenId,            uint256 _startingTokenId        ) internal view returns (string memory) {            require(<mask0>, \"Invalid token\");            bytes memory hashBytes = DynamicBuffer.allocate(NUM_LAYERS * 4);            for (uint256 i = 0; i < NUM_LAYERS; i++) {                uint256 _randinput = uint256(                    uint256(                        keccak256(                            abi.encodePacked(                                _randomBytes,                                _tokenId,                                _startingTokenId,                                _tokenId + i                            )                        )                    ) % MAX_TOKENS                );                uint256 rarity = rarityGen(_randinput, i);                if (rarity < 10) {                    hashBytes.appendSafe(\"00\");                } else if (rarity < 100) {                    hashBytes.appendSafe(\"0\");                }                if (rarity > 999) {                    hashBytes.appendSafe(\"999\");                } else {                    hashBytes.appendSafe(bytes(_toString(rarity)));                }            }            return string(hashBytes);        }"