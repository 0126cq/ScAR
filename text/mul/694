"function propose(        address[] memory targets,        uint256[] memory values,        string[] memory signatures,        bytes[] memory calldatas,        string memory description    ) public override nonReentrant returns (uint256 id) {        require(!hasActiveProposal[msg.sender], \"yVaren: HAS_ACTIVE_PROPOSAL\");        require(            targets.length == values.length &&                targets.length == signatures.length &&                targets.length == calldatas.length,            \"yVaren: PARITY_MISMATCH\"        );        require(targets.length != 0, \"yVaren: NO_ACTIONS\");        require(targets.length <= MAX_OPERATIONS, \"yVaren: TOO_MANY_ACTIONS\");        require(            (VAREN.balanceOf(address(this)).mul(balanceOf(msg.sender))).div(                totalSupply()            ) >= minVarenForProposal,            \"yVaren: INSUFFICIENT_VAREN_FOR_PROPOSAL\"        );        uint256 endBlock = votingPeriodBlocks.add(block.number);        id = proposalCount;        proposals[id] = Proposal({            proposer: msg.sender,            endBlock: endBlock,            targets: targets,            values: values,            signatures: signatures,            calldatas: calldatas,            totalForVotes: 0,            totalAgainstVotes: 0,            quorumVotes: VAREN.balanceOf(address(this)).<mask0> /                1000000,            executed: false        });        hasActiveProposal[msg.sender] = true;        proposalCount = proposalCount.add(1);        emit ProposalCreated(            id,            msg.sender,            targets,            values,            signatures,            calldatas,            block.number,            endBlock,            description        );    }"