"function pending(uint256 poolId, address account) external view returns (uint256) {        require(poolId < _poolInfoCount, \"pending: Pool is not exists\");        PoolInfo storage pool = _poolInfo[poolId];        UserInfo storage user = _userInfo[poolId][account];        uint256 rewardPending = user.rewardPending;        uint256 lpSupply = pool.lpToken.balanceOf(address(this));        for (uint256 stageId = 0; stageId < _stageInfoCount; ++stageId) {            StageInfo storage stage = _stageInfo[stageId];            if (stage.startBlock > block.number) {                break;            }            PoolInfoInFarmStage storage poolInFarmStage = _poolInfoInFarmStages[stageId][poolId];            uint256 accERC20PerShare = poolInFarmStage.accERC20PerShare;            uint256 lastBlock = block.number < stage.endBlock ? block.number : stage.endBlock;            if (lastBlock > poolInFarmStage.lastRewardBlock && lpSupply != 0) {                uint256 startBlock = poolInFarmStage.lastRewardBlock < stage.startBlock ? stage.startBlock : poolInFarmStage.lastRewardBlock;                uint256 nrOfBlocks = lastBlock.sub(startBlock);                uint256 erc20Reward = nrOfBlocks.<mask0>.mul(pool.allocPoint).div(_totalAllocPoint);                accERC20PerShare = accERC20PerShare.add(erc20Reward.mul(1e36).div(lpSupply));            }            uint256 pendingAmount = user.amount.mul(accERC20PerShare).div(1e36).sub(_userRewardDebt[stageId][poolId][account]);            rewardPending = rewardPending.add(pendingAmount);        }        return rewardPending;    }"