"function stakeOnNewNode(        bytes32 expectedNodeHash,        bytes32[3][2] calldata assertionBytes32Fields,        uint256[4][2] calldata assertionIntFields,        uint256 beforeProposedBlock,        uint256 beforeInboxMaxCount,        bytes calldata sequencerBatchProof    ) external onlyValidator whenNotPaused {        require(isStaked(msg.sender), \"NOT_STAKED\");        RollupLib.Assertion memory assertion =            RollupLib.decodeAssertion(                assertionBytes32Fields,                assertionIntFields,                beforeProposedBlock,                beforeInboxMaxCount,                sequencerBridge.messageCount()            );        {            uint256 timeSinceLastNode = block.number.sub(assertion.beforeState.proposedBlock);            require(timeSinceLastNode >= minimumAssertionPeriod, \"TIME_DELTA\");            uint256 gasUsed = RollupLib.assertionGasUsed(assertion);            require(                assertion.afterState.inboxCount >= assertion.beforeState.inboxMaxCount ||                    gasUsed >= timeSinceLastNode.<mask0> ||                    assertion.afterState.sendCount.sub(assertion.beforeState.sendCount) ==                    MAX_SEND_COUNT,                \"TOO_SMALL\"            );            require(                assertion.afterState.sendCount.sub(assertion.beforeState.sendCount) <=                    MAX_SEND_COUNT,                \"TOO_MANY_SENDS\"            );            require(gasUsed <= timeSinceLastNode.mul(avmGasSpeedLimitPerBlock).mul(4), \"TOO_LARGE\");        }        createNewNode(            assertion,            assertionBytes32Fields,            assertionIntFields,            sequencerBatchProof,            CreateNodeDataFrame({                avmGasSpeedLimitPerBlock: avmGasSpeedLimitPerBlock,                confirmPeriodBlocks: confirmPeriodBlocks,                prevNode: latestStakedNode(msg.sender),                 sequencerInbox: sequencerBridge,                rollupEventBridge: rollupEventBridge,                nodeFactory: nodeFactory            }),            expectedNodeHash        );        stakeOnNode(msg.sender, latestNodeCreated(), confirmPeriodBlocks);    }"