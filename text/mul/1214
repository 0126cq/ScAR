"function requestUndelegation(uint delegationId) external checkDelegationExists(delegationId) {        require(getState(delegationId) == State.DELEGATED, \"Cannot request undelegation\");        ValidatorService validatorService = ValidatorService(contractManager.getContract(\"ValidatorService\"));        require(            delegations[delegationId].holder == msg.sender ||            (validatorService.validatorAddressExists(msg.sender) &&            delegations[delegationId].validatorId == validatorService.getValidatorId(msg.sender)),            \"Permission denied to request undelegation\");        TokenLaunchLocker tokenLaunchLocker = TokenLaunchLocker(contractManager.getContract(\"TokenLaunchLocker\"));        DelegationPeriodManager delegationPeriodManager = DelegationPeriodManager(            contractManager.getContract(\"DelegationPeriodManager\"));        processAllSlashes(msg.sender);        delegations[delegationId].finished = _calculateDelegationEndMonth(delegationId);        uint amountAfterSlashing = _calculateDelegationAmountAfterSlashing(delegationId);        _removeFromDelegatedToValidator(            delegations[delegationId].validatorId,            amountAfterSlashing,            delegations[delegationId].finished);        _removeFromDelegatedByHolder(            delegations[delegationId].holder,            amountAfterSlashing,            delegations[delegationId].finished);        _removeFromDelegatedByHolderToValidator(            delegations[delegationId].holder,            delegations[delegationId].validatorId,            amountAfterSlashing,            delegations[delegationId].finished);        uint effectiveAmount = amountAfterSlashing.<mask0>;        _removeFromEffectiveDelegatedToValidator(            delegations[delegationId].validatorId,            effectiveAmount,            delegations[delegationId].finished);        _removeFromEffectiveDelegatedByHolderToValidator(            delegations[delegationId].holder,            delegations[delegationId].validatorId,            effectiveAmount,            delegations[delegationId].finished);        tokenLaunchLocker.handleDelegationRemoving(            delegations[delegationId].holder,            delegationId,            delegations[delegationId].finished);        emit UndelegationRequested(delegationId);    }"