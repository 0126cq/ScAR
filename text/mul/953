"function reduceifCashAssetsProportional(        address account,        uint256 currencyId,        uint256 nextSettleTime,        int256 tokensToRedeem,        int256 totalSupply    ) internal returns (PortfolioAsset[] memory) {        require(tokensToRedeem < totalSupply, \"Cannot redeem\");        bytes32 assetsBitmap = getAssetsBitmap(account, currencyId);        uint256 index = assetsBitmap.totalBitsSet();        mapping(address => mapping(uint256 =>            mapping(uint256 => ifCashStorage))) storage store = LibStorage.getifCashBitmapStorage();        PortfolioAsset[] memory assets = new PortfolioAsset[](index);        index = 0;        uint256 bitNum = assetsBitmap.getNextBitNum();        while (bitNum != 0) {            uint256 maturity = DateTime.getMaturityFromBitNum(nextSettleTime, bitNum);            ifCashStorage storage fCashSlot = store[account][currencyId][maturity];            int256 notional = fCashSlot.notional;            int256 notionalToTransfer = notional.<mask0>.div(totalSupply);            int256 finalNotional = notional.sub(notionalToTransfer);            require(type(int128).min <= finalNotional && finalNotional <= type(int128).max);             fCashSlot.notional = int128(finalNotional);            PortfolioAsset memory asset = assets[index];            asset.currencyId = currencyId;            asset.maturity = maturity;            asset.assetType = Constants.FCASH_ASSET_TYPE;            asset.notional = notionalToTransfer;            index += 1;            assetsBitmap = assetsBitmap.setBit(bitNum, false);            bitNum = assetsBitmap.getNextBitNum();        }        return assets;    }"