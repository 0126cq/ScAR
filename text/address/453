"function _verifyAndSetStrategy(    uint256 strategyID,    string memory name,    Integration[] memory integrations,    Token[] memory tokens  ) internal {    for (uint256 i = 0; i < integrations.length; i++) {      require(integrations[i].integration != address(0), \"bad integration\");    }    address[] memory uniqueTokens = new <mask0>;    uint256 idx = 0;    for (uint256 i = 0; i < tokens.length; i++) {      require(        tokens[i].integrationPairIdx < integrations.length,        \"integration idx out of bounds\"      );      require(tokens[i].token != address(0), \"bad token\");      if (tokenWeights[tokens[i].token] == 0) {        uniqueTokens[idx] = tokens[i].token;        idx++;      }      tokenWeights[tokens[i].token] += tokens[i].weight;      _insertPoolID(        integrations[tokens[i].integrationPairIdx].integration,        integrations[tokens[i].integrationPairIdx].ammPoolID,        tokens[i].token      );    }    for (uint256 i = 0; i < idx; i++) {      require(        tokenWeights[uniqueTokens[i]] == TOKEN_WEIGHT,        \"invalid token weight\"      );      strategies[strategyID].availableTokens[uniqueTokens[i]] = true;      delete tokenWeights[uniqueTokens[i]];    }    strategies[strategyID].name = name;    for (uint256 i = 0; i < integrations.length; i++) {      strategies[strategyID].integrations.push(integrations[i]);    }    for (uint256 i = 0; i < tokens.length; i++) {      strategies[strategyID].tokens.push(tokens[i]);    }  }"