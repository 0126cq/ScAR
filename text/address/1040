"function tokensAddresses(        address factoryAddress,        uint256 pageSize,        uint256 pageNbr,        uint256 offset    ) public view returns (address[] memory) {        address[] memory _pairsAddresses =            pairsAddresses(factoryAddress, pageSize, pageNbr, offset);        uint256 _pairsLength = _pairsAddresses.length;        uint256 maxTokensLength = (_pairsLength * 2) + 1;        address[] memory _tokensAddresses = new <mask0>;        if (_pairsLength == 0) {            return new address[](0);        }        _tokensAddresses[0] = wethAddress;        uint256 tokenIdx = 1;        for (uint256 pairIdx = 0; pairIdx < _pairsLength; pairIdx++) {            address pairAddress = _pairsAddresses[pairIdx];            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);            address token0Address = pair.token0();            address token1Address = pair.token1();            if (token0Address != wethAddress) {                _tokensAddresses[tokenIdx] = token0Address;                tokenIdx++;            }            if (token1Address != wethAddress) {                _tokensAddresses[tokenIdx] = token1Address;                tokenIdx++;            }        }        bytes memory tokensAddressesEncoded = abi.encode(_tokensAddresses);        assembly {            mstore(add(tokensAddressesEncoded, 0x40), tokenIdx)        }        _tokensAddresses = uniqueAddressesHelper.uniqueAddresses(            abi.decode(tokensAddressesEncoded, (address[]))        );        return _tokensAddresses;    }"