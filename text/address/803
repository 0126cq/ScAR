"function stakeAt(        address _controllerAddress,        uint256 _maxAmount,        uint256 _maxDepositors,        uint256 _iterations    ) external onlyOperator {        require(_maxAmount > 0, \"BrightRiskToken: BRI5\");        require(_maxAmount <= externalPool, \"BrightRiskToken: BRI6\");        require(_positionControllers.contains(_controllerAddress), \"BrightRiskToken: BRI2\");        _maxDepositors = _maxDepositors.min(_outstandingDepositors.length());        _iterations = _iterations.min(_maxDepositors);        uint256 _totalStaking;        uint256 _stakingCounter;        uint256 _ratio = _indexRatio();        address[] memory _stakers = new <mask0>;        for (uint256 i = 0; i < _iterations; i++) {            address _depositor = _outstandingDepositors.at(i);            DepositorInfo storage _info = externalPoolByDepositor[_depositor];            if (!_info.readyToStake) {                continue;            }            uint256 _deposited = _info.depositAmount;            if (_stakingCounter >= _maxDepositors || _totalStaking.add(_deposited) > _maxAmount) {                break;            }            _totalStaking = _totalStaking.add(_deposited);            if (_depositor == address(this)) {                internalPool = internalPool.sub(_deposited);            } else {                _info.minting = _convertInvestmentToIndexWithRatio(_deposited, _ratio);            }            _info.readyToStake = false;            _stakers[_stakingCounter] = _depositor;            _stakingCounter++;        }        require(_totalStaking > 0, \"BrightRiskToken: BRI21\");        _stakeExternalPool(_controllerAddress, _totalStaking);        _mintAndDistributeIndex(_stakers, _stakingCounter);        emit Stake(_stakingCounter, _totalStaking, externalPool);    }"