"function swapAndLiquify(uint256 contractTokenBalance) internal lockTheSwap {        if (_liquidityRatio + _marketingRatio == 0)            return;        uint256 toLiquify = ((contractTokenBalance * _liquidityRatio) / (_liquidityRatio + _marketingRatio)) / 2;        uint256 toSwapForEth = contractTokenBalance - toLiquify;        address[] memory path = new <mask0>;        path[0] = address(this);        path[1] = dexRouter.WETH();        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(            toSwapForEth,            0,            path,            address(this),            block.timestamp        );        uint256 liquidityBalance = ((address(this).balance * _liquidityRatio) / (_liquidityRatio + _marketingRatio)) / 2;        if (toLiquify > 0) {            dexRouter.addLiquidityETH{value: liquidityBalance}(                address(this),                toLiquify,                0,                 0,                 DEAD,                block.timestamp            );            emit SwapAndLiquify(toLiquify, liquidityBalance, toLiquify);        }        if (contractTokenBalance - toLiquify > 0) {            uint256 OperationsFee = (address(this).balance);            uint256 marketFee = OperationsFee/(ValueDivisor)*(MarketShare);            uint256 devfeeshare = OperationsFee/(ValueDivisor)*(DevShare);            _marketWallet.transfer(marketFee);            _devWallet.transfer(devfeeshare);                    }    }"