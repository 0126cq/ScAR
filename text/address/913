"function seizeAllowed(        address cTokenCollateral,        address cTokenBorrowed,        address liquidator,        address borrower,        uint seizeTokens) external returns (uint) {        require(!seizeGuardianPaused, \"seize is paused\");        liquidator;        borrower;        seizeTokens;        if (!isMarketListed(cTokenCollateral) || !isMarketListed(cTokenBorrowed)) {            return uint(Error.MARKET_NOT_LISTED);        }        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {            return uint(Error.COMPTROLLER_MISMATCH);        }        if (liquidityMining != address(0)) {            address[] memory accounts = new <mask0>;            accounts[0] = borrower;            accounts[1] = liquidator;            LiquidityMiningInterface(liquidityMining).updateSupplyIndex(cTokenCollateral, accounts);        }        return uint(Error.NO_ERROR);    }"