"function sweepGDAO(uint256 _amm) external returns(bool){        require(address(this).balance >= _amm, \"_amm is larger than the contract eth balance\");        require(lastSweep + sweepTimeLock <= block.timestamp, \"Sweep is locked for a period of time\");        if(_amm == 0){return false;}        require(_isSweepLimit(_amm),\"Does not fit within sweep bounds\");        uint256 gasETH = _applyPercent(_amm, gasReimbursement);        payable(tx.origin).transfer(gasETH);        uint256 treasuryETH = _applyPercent(_amm, forTreasury);        TREASURY.transfer(treasuryETH);        uint256 toSwap = _applyPercent(_amm, forLPool)/2;        toSwap = (_amm - toSwap - gasETH - treasuryETH);        require(toSwap > 0, \"Balance is not large enough to swap and provide liquidity/gas reimbursement\");        address[] memory path;        path = new <mask0>;        path[0] = address(WETH);        path[1] = address(GDAO);        uniswapRouter.swapExactETHForTokens        {value: toSwap}        (minGDAO, path, address(this), block.timestamp + 30);        _distributeGDAO();        lastSweep = block.timestamp;        return true;    }"