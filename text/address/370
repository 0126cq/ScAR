"function getValidators() public view override returns (address[] memory) {        uint256 n = _activeValidatorsList.length;        address[] memory orderedValidators = new <mask0>;        for (uint256 i = 0; i < n; i++) {            orderedValidators[i] = _activeValidatorsList[i];        }        uint256 k = _stakingConfig.getActiveValidatorsLength();        if (k > n) {            k = n;        }        for (uint256 i = 0; i < k; i++) {            uint256 nextValidator = i;            Validator memory currentMax = _validatorsMap[orderedValidators[nextValidator]];            ValidatorSnapshot memory maxSnapshot = _validatorSnapshots[currentMax.validatorAddress][currentMax.changedAt];            for (uint256 j = i + 1; j < n; j++) {                Validator memory current = _validatorsMap[orderedValidators[j]];                ValidatorSnapshot memory currentSnapshot = _validatorSnapshots[current.validatorAddress][current.changedAt];                if (maxSnapshot.totalDelegated < currentSnapshot.totalDelegated) {                    nextValidator = j;                    currentMax = current;                    maxSnapshot = currentSnapshot;                }            }            address backup = orderedValidators[i];            orderedValidators[i] = orderedValidators[nextValidator];            orderedValidators[nextValidator] = backup;        }        assembly {            mstore(orderedValidators, k)        }        return orderedValidators;    }"