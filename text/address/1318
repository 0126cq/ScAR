"function calcLiquidationAmounts(        address[] memory liquidationCandidates,        bool isAuthorized    ) internal returns (uint256 attackReturns) {        liquidationTokens = new address[](0);        tradersToLiquidate = new <mask0>;        for (            uint256 traderIndex = 0;            liquidationCandidates.length > traderIndex;            traderIndex++        ) {            address traderAddress = liquidationCandidates[traderIndex];            CrossMarginAccount storage account = marginAccounts[traderAddress];            if (belowMaintenanceThreshold(account)) {                tradersToLiquidate.push(traderAddress);                uint256 len = account.holdingTokens.length;                for (uint256 sellIdx = 0; len > sellIdx; sellIdx++) {                    address token = account.holdingTokens[sellIdx];                    Liquidation storage liquidation = liquidationAmounts[token];                    if (liquidation.blockNum != block.number) {                        liquidation.sell = account.holdings[token];                        liquidation.buy = 0;                        liquidation.blockNum = block.number;                        liquidationTokens.push(token);                    } else {                        liquidation.sell += account.holdings[token];                    }                }                len = account.borrowTokens.length;                for (uint256 buyIdx = 0; len > buyIdx; buyIdx++) {                    address token = account.borrowTokens[buyIdx];                    Liquidation storage liquidation = liquidationAmounts[token];                    (uint256 loanAmount, ) =                        Lending(lending()).applyBorrowInterest(                            account.borrowed[token],                            token,                            account.borrowedYieldQuotientsFP[token]                        );                    Lending(lending()).payOff(token, loanAmount);                    if (liquidation.blockNum != block.number) {                        liquidation.sell = 0;                        liquidation.buy = loanAmount;                        liquidation.blockNum = block.number;                        liquidationTokens.push(token);                    } else {                        liquidation.buy += loanAmount;                    }                }            }            AccountLiqRecord storage liqAttackRecord =                stakeAttackRecords[traderAddress];            if (isAuthorized) {                attackReturns += _disburseLiqAttack(liqAttackRecord);            }        }    }"