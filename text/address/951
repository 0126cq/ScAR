"function claimToIntermediary(address payable intermediary, uint256 threshold) public onlyOperator payable {        address[] memory stakers = new <mask0>;        uint256[] memory amounts = new uint256[](_pendingStakers.length.sub(_pendingGap));        uint256 total = 0;        uint256 j = 0;        uint256 gaps = 0;        uint256 i = 0;        for (i = _pendingGap; i < _pendingStakers.length; i++) {            if (total >= threshold) {                break;            }            address staker = _pendingStakers[i];            uint256 amount = _pendingUserStakes[staker];            if (staker == address(0) || amount == 0) {                gaps++;                continue;            }            if (total.add(amount) > threshold) {                amount = threshold.sub(total);            }            stakers[j] = staker;            amounts[j] = amount;            total = total.add(amount);            j++;            _pendingUserStakes[staker] = _pendingUserStakes[staker].sub(amount);            if (_pendingUserStakes[staker] == 0) {                delete _pendingStakers[i];                gaps++;            }        }        _pendingGap = _pendingGap.add(gaps);        _maticToken.transfer(intermediary, total.add(msg.value));        uint256 removeCells = stakers.length.sub(j);        if (removeCells > 0) {            assembly {mstore(stakers, sub(mload(stakers), removeCells))}            assembly {mstore(amounts, sub(mload(amounts), removeCells))}        }        emit IntermediaryClaimed(stakers, amounts, intermediary, total);    }"