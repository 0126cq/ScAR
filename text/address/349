"function initialize(        address _governance,        address _strategist,        address _controller,        address _keeper,        address _guardian,        address[4] memory _wantConfig,        uint256 _pid,        uint256[3] memory _feeConfig,        CurvePoolConfig memory _curvePool    ) public initializer whenNotPaused {        __BaseStrategy_init(_governance, _strategist, _controller, _keeper, _guardian);        want = _wantConfig[0];        badgerTree = _wantConfig[1];        cvxHelperVault = ISettV4(_wantConfig[2]);        cvxCrvHelperVault = ISettV4(_wantConfig[3]);        pid = _pid;         IBooster.PoolInfo memory poolInfo = booster.poolInfo(pid);        baseRewardsPool = IBaseRewardsPool(poolInfo.crvRewards);        performanceFeeGovernance = _feeConfig[0];        performanceFeeStrategist = _feeConfig[1];        withdrawalFee = _feeConfig[2];        IERC20Upgradeable(want).approve(address(booster), MAX_UINT_256);        cvxToken.approve(address(cvxRewardsPool), MAX_UINT_256);        cvxCrvToken.approve(address(cvxCrvRewardsPool), MAX_UINT_256);        crvToken.approve(address(crvDepositor), MAX_UINT_256);        curvePool = CurvePoolConfig(            _curvePool.swap,            _curvePool.wbtcPosition,            _curvePool.numElements        );        address[] memory path = new address[](3);        path[0] = usdc;        path[1] = weth;        path[2] = cvxCrv;        _setTokenSwapPath(usdc, cvxCrv, path);        path = new address[](2);        path[0] = crv;        path[1] = cvxCrv;        _setTokenSwapPath(crv, cvxCrv, path);        path = new <mask0>;        path[0] = cvxCrv;        path[1] = weth;        path[2] = wbtc;        _setTokenSwapPath(cvxCrv, wbtc, path);        path = new address[](3);        path[0] = cvx;        path[1] = weth;        path[2] = wbtc;        _setTokenSwapPath(cvx, wbtc, path);        _initializeApprovals();        autoCompoundingBps = 2000;        autoCompoundingPerformanceFeeGovernance = 5000;    }"