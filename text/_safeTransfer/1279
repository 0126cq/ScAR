"function _dealWithPoolAndCollectFee(Context memory ctx, bool isBuy) internal returns (uint) {        (uint outpoolTokenReserve, uint inpoolTokenReserve, uint otherToTaker) = (              ctx.reserveMoney, ctx.reserveStock, ctx.dealMoneyInBook);        if(isBuy) {            (outpoolTokenReserve, inpoolTokenReserve, otherToTaker) = (                ctx.reserveStock, ctx.reserveMoney, ctx.dealStockInBook);        }        uint outAmount = (outpoolTokenReserve*ctx.amountIntoPool)/(inpoolTokenReserve+ctx.amountIntoPool);        if(ctx.amountIntoPool > 0) {            _emitDealWithPool(uint112(ctx.amountIntoPool), uint112(outAmount), isBuy);        }        uint32 feeBPS = IGraSwapFactory(ctx.factory).feeBPS();        uint amountToTaker = outAmount + otherToTaker;        require(amountToTaker < uint(1<<112), \"GraSwap: AMOUNT_TOO_LARGE\");        uint fee = (amountToTaker * feeBPS + 9999) / 10000;        amountToTaker -= fee;        if(isBuy) {            ctx.reserveMoney = ctx.reserveMoney + ctx.amountIntoPool;            ctx.reserveStock = ctx.reserveStock - outAmount + fee;        } else {            ctx.reserveMoney = ctx.reserveMoney - outAmount + fee;            ctx.reserveStock = ctx.reserveStock + ctx.amountIntoPool;        }        address token = ctx.moneyToken;        if(isBuy) {            token = ctx.stockToken;        }        <mask0>;        return amountToTaker;    }"