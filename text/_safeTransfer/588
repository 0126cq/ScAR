"function burn(address to) external lock returns (uint amount0, uint amount1) {        (uint112 _reserve0, uint112 _reserve1,) = getReserves();        address _token0 = token0;        address _token1 = token1;        uint balance0 = IERC20Uniswap(_token0).balanceOf(address(this));        uint balance1 = IERC20Uniswap(_token1).balanceOf(address(this));        uint liquidity = balanceOf[address(this)];        bool feeOn = _mintFee(_reserve0, _reserve1);        uint _totalSupply = totalSupply;        amount0 = liquidity.mul(balance0) / _totalSupply;        amount1 = liquidity.mul(balance1) / _totalSupply;        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');        _burn(address(this), liquidity);        <mask0>;        _safeTransfer(_token1, to, amount1);        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));        _update(balance0, balance1, _reserve0, _reserve1);        if (feeOn) kLast = uint(reserve0).mul(reserve1);        emit Burn(msg.sender, amount0, amount1, to);    }"