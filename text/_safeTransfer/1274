"function burn(address to) external override lock returns (uint stockAmount, uint moneyAmount) {        uint[5] memory proxyData;        ProxyData.fill(proxyData, 4+32*(ProxyData.COUNT+1));        (uint112 reserveStock, uint112 reserveMoney, uint32 firstSellID) = getReserves();        (uint bookedStock, uint bookedMoney, ) = getBooked();        uint stockBalance = _myBalance(ProxyData.stock(proxyData)).sub(bookedStock);        uint moneyBalance = _myBalance(ProxyData.money(proxyData)).sub(bookedMoney);        require(stockBalance >= uint(reserveStock) && moneyBalance >= uint(reserveMoney), \"GraSwap: INVALID_BALANCE\");        bool feeOn = _mintFee(reserveStock, reserveMoney, proxyData);        {            uint _totalSupply = totalSupply;             uint liquidity = balanceOf[address(this)];             stockAmount = liquidity.mul(stockBalance) / _totalSupply;            moneyAmount = liquidity.mul(moneyBalance) / _totalSupply;            require(stockAmount > 0 && moneyAmount > 0, \"GraSwap: INSUFFICIENT_BURNED\");            balanceOf[address(this)] = 0;            totalSupply = totalSupply.sub(liquidity);            emit Transfer(address(this), address(0), liquidity);        }        address graContract = ProxyData.graContract(proxyData);        _safeTransfer(ProxyData.stock(proxyData), to, stockAmount, graContract);        <mask0>;        stockBalance = stockBalance - stockAmount;        moneyBalance = moneyBalance - moneyAmount;        _setReserves(stockBalance, moneyBalance, firstSellID);        if (feeOn) _kLast = stockBalance.mul(moneyBalance);        emit Burn(msg.sender, (moneyAmount<<112)|stockAmount, to);    }"