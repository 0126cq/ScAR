"function _distributePerformanceFee(    uint256 _performanceFee,    address _performanceFeeReceiver,    uint256 _performanceFeeDebt,    WrappedPiErc20Interface _piToken,    IERC20 _underlying,    uint256 _totalReward  )    internal    returns (      uint256 performance,      uint256 remainder,      uint256 resultPerformanceFeeDebt    )  {    performance = 0;    remainder = 0;    resultPerformanceFeeDebt = _performanceFeeDebt;    if (_performanceFee > 0) {      performance = _totalReward.mul(_performanceFee).div(HUNDRED_PCT);      remainder = _totalReward.sub(performance);      uint256 performanceFeeDebtBefore = _performanceFeeDebt;      uint256 underlyingBalance = _underlying.balanceOf(address(_piToken));      uint256 totalFeeToPayOut = performance.add(performanceFeeDebtBefore);      if (underlyingBalance >= totalFeeToPayOut) {        <mask0>;      } else {        resultPerformanceFeeDebt = totalFeeToPayOut.sub(underlyingBalance);        _safeTransfer(_piToken, _underlying, _performanceFeeReceiver, underlyingBalance);      }      emit DistributePerformanceFee(performanceFeeDebtBefore, resultPerformanceFeeDebt, underlyingBalance, performance);    } else {      remainder = _totalReward;    }  }"