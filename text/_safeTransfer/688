"function burn(address to)        external        override        lock        returns (uint256 amount0, uint256 amount1)    {        require(block.timestamp >= liquidityLocked, \"Empire: LIQUIDITY_LOCKED\");        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();         address _token0 = token0;         address _token1 = token1;         uint256 balance0 = _balanceOfSelf(_token0);        uint256 balance1 = _balanceOfSelf(_token1);        uint256 liquidity = balanceOf[address(this)];        bool feeOn = _mintFee(_reserve0, _reserve1);        uint256 _totalSupply = totalSupply;         amount0 = liquidity.mul(balance0) / _totalSupply;         amount1 = liquidity.mul(balance1) / _totalSupply;         require(            amount0 > 0 && amount1 > 0,            \"Empire: INSUFFICIENT_LIQUIDITY_BURNED\"        );        _burn(address(this), liquidity);        <mask0>;        _safeTransfer(_token1, to, amount1);        balance0 = _balanceOfSelf(_token0);        balance1 = _balanceOfSelf(_token1);        _update(balance0, balance1, _reserve0, _reserve1);        if (feeOn) kLast = uint256(reserve0).mul(reserve1);         emit Burn(msg.sender, amount0, amount1, to);    }"