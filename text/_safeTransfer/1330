"function unstakeFromBreeding() external virtual nonReentrant whenNotPaused {        Stake storage stake = stakes[_msgSender()];        require(stake.staked, \"Nothing is staked by this user.\");        uint256 tokenA = stake.stakedIds[0];        uint256 tokenB = stake.stakedIds[1];        uint256 totalStamina = _checkStamina(tokenA) + _checkStamina(tokenB);        uint256 timePassed = block.timestamp - stake.stakedAt;        uint256 offspringCount;        bool limitedTokenStaked;        if (isLimited[tokenA]) {            limitedGaveBirth[tokenA] = true;            limitedTokenStaked = true;        }        if (isLimited[tokenB]) {            limitedGaveBirth[tokenB] = true;            if (!limitedTokenStaked) limitedTokenStaked = true;        }        if (limitedTokenStaked) {            if (totalStamina == 4) if (timePassed >= stakingTime4) offspringCount = 1;            if (totalStamina == 3) if (timePassed >= stakingTime3) offspringCount = 1;        } else {            if (totalStamina == 4) {                if (timePassed >= stakingTime4 + stakingTime2) offspringCount = 2;                else if (timePassed >= stakingTime4) offspringCount = 1;            }            if (totalStamina == 3) if (timePassed >= stakingTime3) offspringCount = 1;            if (totalStamina == 2) if (timePassed >= stakingTime2) offspringCount = 1;        }        if (offspringCount > 0) {            if (offspringCount == 2) {                tokenIdStamina[tokenA] = 0;                tokenIdStamina[tokenB] = 0;            } else {                tokenIdStamina[tokenA]--;                tokenIdStamina[tokenB]--;            }            uint i;            for (i; i < offspringCount; i++) {                uint256 id = _getNextIndex();                _safeMint(_msgSender(), id);                emit NewCocoonBorn(_msgSender(), id, tokenA, tokenB);            }        }        stake.staked = false;        stake.stakedAt = 0;        stake.stakedIds.pop();        stake.stakedIds.pop();        _safeTransfer(address(this), _msgSender(), tokenA, \"\");        <mask0>;        emit UserUnstaked(_msgSender(), tokenA, tokenB, offspringCount, limitedTokenStaked);    }"