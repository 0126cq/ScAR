"function _tradeMakerPsm(        IERC20TokenV06 sellToken,        IERC20TokenV06 buyToken,        uint256 sellAmount,        bytes memory bridgeData    )        internal        returns (uint256 boughtAmount)    {        MakerPsmBridgeData memory data = abi.decode(bridgeData, (MakerPsmBridgeData));        uint256 beforeBalance = buyToken.balanceOf(address(this));        IPSM psm = IPSM(data.psmAddress);        if (address(sellToken) == data.gemTokenAddres) {            sellToken.approveIfBelow(                psm.gemJoin(),                sellAmount            );            psm.sellGem(address(this), sellAmount);        } else if (address(buyToken) == data.gemTokenAddres) {            uint256 feeDivisor = WAD.safeAdd(psm.tout());             uint256 buyTokenBaseUnit = uint256(10) ** uint256(buyToken.decimals());            uint256 gemAmount =  sellAmount.safeMul(buyTokenBaseUnit).safeDiv(feeDivisor);            sellToken.approveIfBelow(                data.psmAddress,                sellAmount            );            psm.buyGem(address(this), gemAmount);        }        return buyToken.balanceOf(address(this)).<mask0>;    }"