"function convertInternal(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn)        public        bancorNetworkOnly        conversionsAllowed        greaterThanZero(_minReturn)        returns (uint256)    {        require(_fromToken != _toToken);         if (_toToken == token)            return buy(_fromToken, _amount, _minReturn);        else if (_fromToken == token)            return sell(_toToken, _amount, _minReturn);        uint256 amount = getCrossConnectorReturn(_fromToken, _toToken, _amount);        require(amount != 0 && amount >= _minReturn);        Connector storage fromConnector = connectors[_fromToken];        if (fromConnector.isVirtualBalanceEnabled)            fromConnector.virtualBalance = safeAdd(fromConnector.virtualBalance, _amount);        Connector storage toConnector = connectors[_toToken];        if (toConnector.isVirtualBalanceEnabled)            toConnector.virtualBalance = <mask0>;        uint256 toConnectorBalance = getConnectorBalance(_toToken);        assert(amount < toConnectorBalance);        assert(_fromToken.transferFrom(msg.sender, this, _amount));        assert(_toToken.transfer(msg.sender, amount));        uint256 feeAmount = safeSub(amount, getFinalAmount(amount, 2));        dispatchConversionEvent(_fromToken, _toToken, _amount, amount, feeAmount);        emit PriceDataUpdate(_fromToken, token.totalSupply(), getConnectorBalance(_fromToken), fromConnector.weight);        emit PriceDataUpdate(_toToken, token.totalSupply(), getConnectorBalance(_toToken), toConnector.weight);        return amount;    }"