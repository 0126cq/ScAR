"function createNode(address from, NodeCreationParams calldata params)        external        allow(\"SkaleManager\")    {        require(params.ip != 0x0 && !nodesIPCheck[params.ip], \"IP address is zero or is not available\");        require(!nodesNameCheck[keccak256(abi.encodePacked(params.name))], \"Name is already registered\");        require(params.port > 0, \"Port is zero\");        require(from == _publicKeyToAddress(params.publicKey), \"Public Key is incorrect\");        uint validatorId = ValidatorService(            contractManager.getContract(\"ValidatorService\")).getValidatorIdByNodeAddress(from);        uint8 totalSpace = ConstantsHolder(contractManager.getContract(\"ConstantsHolder\")).TOTAL_SPACE_ON_NODE();        nodes.push(Node({            name: params.name,            ip: params.ip,            publicIP: params.publicIp,            port: params.port,            publicKey: params.publicKey,            startBlock: block.number,            lastRewardDate: block.timestamp,            finishTime: 0,            status: NodeStatus.Active,            validatorId: validatorId        }));        uint nodeIndex = nodes.length.sub(1);        validatorToNodeIndexes[validatorId].push(nodeIndex);        bytes32 nodeId = keccak256(abi.<mask0>);        nodesIPCheck[params.ip] = true;        nodesNameCheck[nodeId] = true;        nodesNameToIndex[nodeId] = nodeIndex;        nodeIndexes[from].isNodeExist[nodeIndex] = true;        nodeIndexes[from].numberOfNodes++;        domainNames[nodeIndex] = params.domainName;        spaceOfNodes.push(SpaceManaging({            freeSpace: totalSpace,            indexInSpaceMap: spaceToNodes[totalSpace].length        }));        _setNodeActive(nodeIndex);        emit NodeCreated(            nodeIndex,            from,            params.name,            params.ip,            params.publicIp,            params.port,            params.nonce,            params.domainName,            block.timestamp,            gasleft());    }"