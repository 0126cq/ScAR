"function _performTransfersWithConduit(        TransferHelperItemsWithRecipient[] calldata transfers,        bytes32 conduitKey    ) internal {        uint256 numTransfers = transfers.length;        address conduit = address(            uint160(                uint256(                    keccak256(                        abi.<mask0>                    )                )            )        );        uint256 sumOfItemsAcrossAllTransfers;        unchecked {            for (uint256 i = 0; i < numTransfers; ++i) {                TransferHelperItemsWithRecipient calldata transfer = transfers[                    i                ];                sumOfItemsAcrossAllTransfers += transfer.items.length;            }        }        ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](            sumOfItemsAcrossAllTransfers        );        uint256 itemIndex;        unchecked {            for (uint256 i = 0; i < numTransfers; ++i) {                TransferHelperItemsWithRecipient calldata transfer = transfers[                    i                ];                TransferHelperItem[] calldata transferItems = transfer.items;                _checkRecipientIsNotZeroAddress(transfer.recipient);                bool callERC721Receiver = transfer.validateERC721Receiver &&                    transfer.recipient.code.length != 0;                uint256 numItemsInTransfer = transferItems.length;                for (uint256 j = 0; j < numItemsInTransfer; ++j) {                    TransferHelperItem calldata item = transferItems[j];                    if (item.itemType == ConduitItemType.ERC20) {                        if (item.identifier != 0) {                            revert InvalidERC20Identifier();                        }                    }                    if (item.itemType == ConduitItemType.ERC721) {                        if (callERC721Receiver) {                            _checkERC721Receiver(                                conduit,                                transfer.recipient,                                item.identifier                            );                        }                    }                    conduitTransfers[itemIndex] = ConduitTransfer(                        item.itemType,                        item.token,                        msg.sender,                        transfer.recipient,                        item.identifier,                        item.amount                    );                    ++itemIndex;                }            }        }        try ConduitInterface(conduit).execute(conduitTransfers) returns (            bytes4 conduitMagicValue        ) {            if (conduitMagicValue != ConduitInterface.execute.selector) {                revert InvalidConduit(conduitKey, conduit);            }        } catch Error(string memory reason) {            revert ConduitErrorRevertString(reason, conduitKey, conduit);        } catch (bytes memory data) {            bytes4 customErrorSelector = bytes4(0xffffffff);            assembly {                customErrorSelector := and(                    mload(add(data, 0x20)),                     customErrorSelector                )            }            if (                data.length == 4 &&                (customErrorSelector == InvalidItemType.selector ||                    customErrorSelector == InvalidERC721TransferAmount.selector)            ) {                assembly {                    revert(add(data, 0x20), 0x04)                }            }            revert ConduitErrorRevertBytes(data, conduitKey, conduit);        }    }"