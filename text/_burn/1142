"function withdrawUnderlying(uint256 _grossShares) public override nonReentrant\t{\t\taddress _from = msg.sender;\t\trequire(_grossShares > 0, \"shares must be greater than 0\");\t\t(uint256 _cost, uint256 _feeShares) = GFormulae._calcWithdrawalCostFromShares(_grossShares, totalReserve(), totalSupply(), withdrawalFee());\t\tuint256 _underlyingCost = GCFormulae._calcUnderlyingCostFromCost(_cost, exchangeRate());\t\trequire(_underlyingCost > 0, \"underlying cost must be greater than 0\");\t\trequire(_prepareWithdrawal(_cost), \"not available at the moment\");\t\t_underlyingCost = G.min(_underlyingCost, G.getLendAmount(reserveToken));\t\tG.safeRedeem(reserveToken, _underlyingCost);\t\tG.pushFunds(underlyingToken, _from, _underlyingCost);\t\t<mask0>;\t\t_mint(address(this), _feeShares.div(2));\t\tlpm.gulpPoolAssets();\t}"