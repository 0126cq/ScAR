"function burn(        uint256 tokenAmount,        bool redeemForEth,        uint256 minReturn    ) external {        require(tokenAmount > 0, \"Must send xINCH\");        uint256 stakedBalance = getStakedBalance();        uint256 bufferBalance = getBufferBalance();        uint256 inchHoldings = stakedBalance.add(bufferBalance);        uint256 proRataInch = inchHoldings.mul(tokenAmount).div(totalSupply());        require(proRataInch <= bufferBalance, \"Insufficient exit liquidity\");        super.<mask0>;        if (redeemForEth) {            uint256 fee = _calculateFee(proRataInch, feeDivisors.burnFee);            _incrementWithdrawableOneInchFees(fee);            oneInchLiquidityProtocol.swapFor(                address(oneInch),                ETH_ADDRESS,                proRataInch.sub(fee),                minReturn,                address(0),                msg.sender            );        } else {            uint256 fee = _calculateFee(proRataInch, feeDivisors.burnFee);            _incrementWithdrawableOneInchFees(fee);            oneInch.safeTransfer(msg.sender, proRataInch.sub(fee));        }    }"