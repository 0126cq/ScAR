"function _exercise(        address holder,        uint256 longTokenId,        uint256 contractSize    ) internal {        uint64 maturity;        int128 strike64x64;        bool isCall;        bool onlyExpired = holder == address(0);        {            PoolStorage.TokenType tokenType;            (tokenType, maturity, strike64x64) = PoolStorage.parseTokenId(                longTokenId            );            require(                tokenType == PoolStorage.TokenType.LONG_CALL ||                    tokenType == PoolStorage.TokenType.LONG_PUT,                \"invalid type\"            );            require(!onlyExpired || maturity < block.timestamp, \"not expired\");            isCall = tokenType == PoolStorage.TokenType.LONG_CALL;        }        PoolStorage.Layout storage l = PoolStorage.layout();        int128 spot64x64 = _update(l);        if (maturity < block.timestamp) {            spot64x64 = l.getPriceUpdateAfter(maturity);        }        require(            onlyExpired ||                (                    isCall                        ? (spot64x64 > strike64x64)                        : (spot64x64 < strike64x64)                ),            \"not ITM\"        );        uint256 exerciseValue;        if (isCall) {            if (spot64x64 > strike64x64) {                exerciseValue = spot64x64.sub(strike64x64).div(spot64x64).mulu(                    contractSize                );            }        } else {            if (spot64x64 < strike64x64) {                exerciseValue = l.fromUnderlyingToBaseDecimals(                    strike64x64.sub(spot64x64).mulu(contractSize)                );            }        }        uint256 totalFee;        if (onlyExpired) {            totalFee += _burnLongTokenLoop(                contractSize,                exerciseValue,                longTokenId,                isCall            );        } else {            <mask0>;            uint256 fee;            if (exerciseValue > 0) {                fee = _getFeeWithDiscount(                    holder,                    FEE_64x64.mulu(exerciseValue)                );                totalFee += fee;                _pushTo(holder, _getPoolToken(isCall), exerciseValue - fee);            }            emit Exercise(                holder,                longTokenId,                contractSize,                exerciseValue,                fee            );        }        totalFee += _burnShortTokenLoop(            contractSize,            exerciseValue,            PoolStorage.formatTokenId(                _getTokenType(isCall, false),                maturity,                strike64x64            ),            isCall        );        _mint(            FEE_RECEIVER_ADDRESS,            _getReservedLiquidityTokenId(isCall),            totalFee        );    }"