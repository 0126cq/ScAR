"function _mintShortTokenLoop(        PoolStorage.Layout storage l,        address buyer,        uint64 maturity,        int128 strike64x64,        uint256 contractSize,        uint256 premium,        bool isCall    ) internal {        uint256 shortTokenId = PoolStorage.formatTokenId(            PoolStorage.getTokenType(isCall, false),            maturity,            strike64x64        );        uint256 tokenAmount = l.contractSizeToBaseTokenAmount(            contractSize,            strike64x64,            isCall        );        uint256 apyFee = _calculateApyFee(            l,            shortTokenId,            tokenAmount,            maturity        );        while (tokenAmount > 0) {            address underwriter = l.liquidityQueueAscending[isCall][address(0)];            uint256 balance = _balanceOf(                underwriter,                _getFreeLiquidityTokenId(isCall)            );            if (!l.getReinvestmentStatus(underwriter, isCall)) {                <mask0>;                _processAvailableFunds(                    underwriter,                    balance,                    isCall,                    true,                    false                );                _subUserTVL(l, underwriter, isCall, balance);                continue;            }            if (balance < l.getMinimumAmount(isCall)) {                l.removeUnderwriter(underwriter, isCall);                continue;            }            if (underwriter == buyer) {                l.removeUnderwriter(underwriter, isCall);                l.addUnderwriter(underwriter, isCall);                continue;            }            balance -= l.pendingDepositsOf(underwriter, isCall);            Interval memory interval;            interval.tokenAmount =                (balance * (tokenAmount + premium - apyFee)) /                tokenAmount;            if (interval.tokenAmount == 0) continue;            if (interval.tokenAmount > tokenAmount)                interval.tokenAmount = tokenAmount;            interval.contractSize =                (contractSize * interval.tokenAmount) /                tokenAmount;            interval.payment = (premium * interval.tokenAmount) / tokenAmount;            interval.apyFee = (apyFee * interval.tokenAmount) / tokenAmount;            _mintShortTokenInterval(                l,                underwriter,                buyer,                shortTokenId,                interval,                isCall            );            tokenAmount -= interval.tokenAmount;            contractSize -= interval.contractSize;            premium -= interval.payment;            apyFee -= interval.apyFee;        }    }"