"function burn(address from, uint256 amount)        external        virtual        override        onlyPool        returns (uint256, uint256)    {        (            ,            uint256 currentBalance,            uint256 balanceIncrease        ) = _calculateBalanceIncrease(from);        uint256 previousSupply = totalSupply();        uint256 nextAvgStableRate = 0;        uint256 nextSupply = 0;        uint256 userStableRate = _userState[from].additionalData;        if (previousSupply <= amount) {            _avgStableRate = 0;            _totalSupply = 0;        } else {            nextSupply = _totalSupply = previousSupply - amount;            uint256 firstTerm = uint256(_avgStableRate).rayMul(                previousSupply.wadToRay()            );            uint256 secondTerm = userStableRate.rayMul(amount.wadToRay());            if (secondTerm >= firstTerm) {                nextAvgStableRate = _totalSupply = _avgStableRate = 0;            } else {                nextAvgStableRate = _avgStableRate = (                    (firstTerm - secondTerm).rayDiv(nextSupply.wadToRay())                ).toUint128();            }        }        if (amount == currentBalance) {            _userState[from].additionalData = 0;            _timestamps[from] = 0;        } else {            _timestamps[from] = uint40(block.timestamp);        }        _totalSupplyTimestamp = uint40(block.timestamp);        if (balanceIncrease > amount) {            uint256 amountToMint = balanceIncrease - amount;            _mint(from, amountToMint, previousSupply);            emit Transfer(address(0), from, amountToMint);            emit Mint(                from,                from,                amountToMint,                currentBalance,                balanceIncrease,                userStableRate,                nextAvgStableRate,                nextSupply            );        } else {            uint256 amountToBurn = amount - balanceIncrease;            <mask0>;            emit Transfer(from, address(0), amountToBurn);            emit Burn(                from,                amountToBurn,                currentBalance,                balanceIncrease,                nextAvgStableRate,                nextSupply            );        }        return (nextSupply, nextAvgStableRate);    }"