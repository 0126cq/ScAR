"function _unmintOptions(uint256 amountOfOptions, address owner)        internal        returns (uint256 strikeToSend, uint256 underlyingToSend)    {        require(shares[owner] > 0, \"PodOption: you do not have minted options\");        require(amountOfOptions <= mintedOptions[owner], \"PodOption: not enough minted options\");        uint256 burnedShares = shares[owner].mul(amountOfOptions).div(mintedOptions[owner]);        if (_optionType == IPodOption.OptionType.PUT) {            uint256 strikeAssetDeposited = totalSupply().mul(_strikePrice).div(10**uint256(decimals()));            uint256 totalInterest = 0;            if (strikeReserves() > strikeAssetDeposited) {                totalInterest = strikeReserves().sub(strikeAssetDeposited);            }            strikeToSend = amountOfOptions.mul(_strikePrice).div(10**uint256(decimals())).add(                totalInterest.mul(burnedShares).div(totalShares)            );            if (strikeToSend > strikeReserves()) {                strikeToSend = strikeReserves();            }        } else {            uint256 underlyingAssetDeposited = totalSupply();            uint256 currentUnderlyingAmount = underlyingReserves().add(strikeReserves().div(_strikePrice));            uint256 totalInterest = 0;            if (currentUnderlyingAmount > underlyingAssetDeposited) {                totalInterest = currentUnderlyingAmount.sub(underlyingAssetDeposited);            }            underlyingToSend = amountOfOptions.add(totalInterest.mul(burnedShares).div(totalShares));        }        shares[owner] = shares[owner].sub(burnedShares);        mintedOptions[owner] = mintedOptions[owner].sub(amountOfOptions);        totalShares = totalShares.sub(burnedShares);        <mask0>;    }"