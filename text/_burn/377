"function requestWithdraw(uint256 _amount) external override whenNotPaused {\t\trequire(_amount > 0, \"Invalid amount\");\t\t(uint256 totalAmount2WithdrawInMatic, , ) = convertMaticXToMatic(\t\t\t_amount\t\t);\t\tuint256 leftAmount2WithdrawInMatic = totalAmount2WithdrawInMatic;\t\tuint256 totalDelegated = getTotalStakeAcrossAllValidators();\t\trequire(\t\t\ttotalDelegated >= totalAmount2WithdrawInMatic,\t\t\t\"Too much to withdraw\"\t\t);\t\tuint256[] memory validators = validatorRegistry.getValidators();\t\tuint256 preferredValidatorId = validatorRegistry\t\t\t.getPreferredWithdrawalValidatorId();\t\tuint256 currentIdx = 0;\t\tfor (; currentIdx < validators.length; currentIdx++) {\t\t\tif (preferredValidatorId == validators[currentIdx]) break;\t\t}\t\twhile (leftAmount2WithdrawInMatic > 0) {\t\t\tuint256 validatorId = validators[currentIdx];\t\t\taddress validatorShare = stakeManager.getValidatorContract(\t\t\t\tvalidatorId\t\t\t);\t\t\t(uint256 validatorBalance, ) = getTotalStake(\t\t\t\tIValidatorShare(validatorShare)\t\t\t);\t\t\tuint256 amount2WithdrawFromValidator = (validatorBalance <=\t\t\t\tleftAmount2WithdrawInMatic)\t\t\t\t? validatorBalance\t\t\t\t: leftAmount2WithdrawInMatic;\t\t\tsellVoucher_new(\t\t\t\tvalidatorShare,\t\t\t\tamount2WithdrawFromValidator,\t\t\t\ttype(uint256).max\t\t\t);\t\t\tuserWithdrawalRequests[msg.sender].push(\t\t\t\tWithdrawalRequest(\t\t\t\t\tIValidatorShare(validatorShare).unbondNonces(address(this)),\t\t\t\t\tstakeManager.epoch() + stakeManager.withdrawalDelay(),\t\t\t\t\tvalidatorShare\t\t\t\t)\t\t\t);\t\t\tleftAmount2WithdrawInMatic -= amount2WithdrawFromValidator;\t\t\tcurrentIdx = currentIdx + 1 < validators.length\t\t\t\t? currentIdx + 1\t\t\t\t: 0;\t\t}\t\t<mask0>;\t\temit RequestWithdraw(msg.sender, _amount, totalAmount2WithdrawInMatic);\t}"