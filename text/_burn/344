"function _burnShortTokenInterval(        PoolStorage.Layout storage l,        address underwriter,        uint256 shortTokenId,        Interval memory interval,        bool isCallPool,        bool isSale    ) internal {        uint256 refundWithRebate = interval.apyFee +            _fulfillApyFee(                l,                underwriter,                shortTokenId,                interval.contractSize,                interval.apyFee,                isCallPool            );        <mask0>;        bool divest = !l.getReinvestmentStatus(underwriter, isCallPool);        _processAvailableFunds(            underwriter,            interval.tokenAmount - interval.payment + refundWithRebate,            isCallPool,            divest,            false        );        if (divest) {            _subUserTVL(l, underwriter, isCallPool, interval.tokenAmount);        } else {            if (refundWithRebate > interval.payment) {                _addUserTVL(                    l,                    underwriter,                    isCallPool,                    refundWithRebate - interval.payment                );            } else if (interval.payment > refundWithRebate) {                _subUserTVL(                    l,                    underwriter,                    isCallPool,                    interval.payment - refundWithRebate                );            }        }        if (isSale) {            emit AssignSale(                underwriter,                shortTokenId,                interval.tokenAmount - interval.payment,                interval.contractSize            );        } else {            emit AssignExercise(                underwriter,                shortTokenId,                interval.tokenAmount - interval.payment,                interval.contractSize,                0            );        }    }"