"function burn(address user, uint256 amount) external override onlyLendingPool {    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(user);    uint256 previousSupply = totalSupply();    uint256 newAvgStableRate = 0;    uint256 nextSupply = 0;    uint256 userStableRate = _usersStableRate[user];    if (previousSupply <= amount) {      _avgStableRate = 0;      _totalSupply = 0;    } else {      nextSupply = _totalSupply = previousSupply.sub(amount);      uint256 firstTerm = _avgStableRate.rayMul(previousSupply.wadToRay());      uint256 secondTerm = userStableRate.rayMul(amount.wadToRay());      if (secondTerm >= firstTerm) {        newAvgStableRate = _avgStableRate = _totalSupply = 0;      } else {        newAvgStableRate = _avgStableRate = firstTerm.sub(secondTerm).rayDiv(nextSupply.wadToRay());      }    }    if (amount == currentBalance) {      _usersStableRate[user] = 0;      _timestamps[user] = 0;    } else {      _timestamps[user] = uint40(block.timestamp);    }    _totalSupplyTimestamp = uint40(block.timestamp);    if (balanceIncrease > amount) {      uint256 amountToMint = balanceIncrease.sub(amount);      _mint(user, amountToMint, previousSupply);      emit Mint(        user,        user,        amountToMint,        currentBalance,        balanceIncrease,        userStableRate,        newAvgStableRate,        nextSupply      );    } else {      uint256 amountToBurn = amount.sub(balanceIncrease);      <mask0>;      emit Burn(user, amountToBurn, currentBalance, balanceIncrease, newAvgStableRate, nextSupply);    }    emit Transfer(user, address(0), amount);  }"