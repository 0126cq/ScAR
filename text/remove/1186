"function _claimBearFromFishing(uint256 tokenId, bool unstake) private returns (uint256 owed) {    uint256 alpha = _alphaForBear(tokenId);      Stake memory stake = Bears[alpha][packIndices[tokenId]];             require(stake.owner == _msgSender(), \"SWIPER, NO SWIPING\");    owed = calcRewardBear(tokenId);                                             if (unstake) {      totalAlphaStaked -= alpha;                                                  Stake memory lastStake = Bears[alpha][Bears[alpha].length - 1];               Bears[alpha][packIndices[tokenId]] = lastStake;                              packIndices[lastStake.tokenId] = packIndices[tokenId];                      Bears[alpha].pop();                                                          delete packIndices[tokenId];                                                _deposits[_msgSender()].<mask0>;      if (tokenId > 10498) {        roar.safeTransferFrom(address(this), _msgSender(), tokenId, \"\");               } else {        genXRoar.safeTransferFrom(address(this), _msgSender(), tokenId, \"\");               }       } else {      Bears[alpha][packIndices[tokenId]] = Stake({        owner: _msgSender(),        tokenId: uint16(tokenId),        value: uint80(SalmonPerAlpha)      });     }    emit BearClaimed(tokenId, owed, unstake);  }"