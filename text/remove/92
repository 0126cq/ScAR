"function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256) {        (bool exists, uint256 allocated) = _strategiesWaitingForRemoval.tryGet(strategy);        require(exists, Error.STRATEGY_DOES_NOT_EXIST);        IStrategy strategy_ = IStrategy(strategy);        strategy_.harvest();        uint256 withdrawn = strategy_.withdrawAll();        uint256 _waitingForRemovalAllocated = waitingForRemovalAllocated;        if (withdrawn >= _waitingForRemovalAllocated) {            waitingForRemovalAllocated = 0;        } else {            waitingForRemovalAllocated = _waitingForRemovalAllocated - withdrawn;        }        if (withdrawn > allocated) {            uint256 profit = withdrawn - allocated;            uint256 strategistShare = _shareFees(profit.scaledMul(getPerformanceFee()));            if (strategistShare > 0) {                _payStrategist(strategistShare, strategy_.strategist());            }            allocated = 0;            emit Harvest(profit, 0);        } else {            allocated -= withdrawn;        }        if (strategy_.balance() == 0) {            _strategiesWaitingForRemoval.<mask0>;        } else {            _strategiesWaitingForRemoval.set(address(strategy_), allocated);        }        return withdrawn;    }"