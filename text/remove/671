"function createAuction(        address tokenContract,        uint256 tokenId,        uint256 duration,        uint256 reservePrice,        uint256 houseId    )        public        override    {        if (contracts[tokenContract].tokenContract == address(0)) {            registerTokenContract(tokenContract);        }        address tokenOwner = IERC721(tokenContract).ownerOf(tokenId);        require(            msg.sender == tokenOwner ||            msg.sender == IERC721(tokenContract).getApproved(tokenId),            \"Not owner or approved\");        uint16  fee = 0;        bool    preApproved = true;        address curator = address(0);        if (houseId > 0) {            curator = houses[houseId].curator;            require(                curator != address(0),                \"House does not exist\");            require(                _houseCreators[houseId].contains(tokenOwner) || msg.sender == curator,                \"Not approved by curator\");            fee = houses[houseId].fee;            preApproved = houses[houseId].preApproved;            houses[houseId].activeAuctions += 1;        }        try ITux(tokenContract).tokenCreator(tokenId) returns (address creator) {            if (!_rankedCreators.contains(creator)) {                _rankedCreators.add(creator);            }        } catch {}        _lastAuctionId += 1;        uint256 auctionId = _lastAuctionId;        tokenAuction[keccak256(abi.encode(tokenContract, tokenId))] = auctionId;        _sellerAuctions[tokenOwner].add(auctionId);        bool approved = (curator == address(0) || preApproved || curator == tokenOwner);        if (houseId > 0) {            if (approved == true) {                _houseAuctions[houseId].add(auctionId);                if (_activeHouses.head() != houseId) {                    if (_activeHouses.contains(houseId)) {                        _activeHouses.<mask0>;                    }                    _activeHouses.add(houseId);                }            }            else {                _houseQueue[houseId].add(auctionId);            }        }        else {            _activeAuctions.add(auctionId);        }        auctions[auctionId] = Auction({            tokenContract: tokenContract,            tokenId: tokenId,            tokenOwner: tokenOwner,            duration: duration,            reservePrice: reservePrice,            houseId: houseId,            fee: fee,            approved: approved,            firstBidTime: 0,            amount: 0,            bidder: payable(0),            created: block.timestamp        });        IERC721(tokenContract).transferFrom(tokenOwner, address(this), tokenId);        ITuxERC20(tuxERC20).updateFeatured();        ITuxERC20(tuxERC20).mint(msg.sender, 10 * 10**18);        emit AuctionCreated(            auctionId        );    }"