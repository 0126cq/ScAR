"function claimFromParticipantOrder(        uint256 auctionId,        bytes32[] memory orders    )        public        atStageFinished(auctionId)        returns (            uint256 sumAuctioningTokenAmount,            uint256 sumBiddingTokenAmount        )    {        for (uint256 i = 0; i < orders.length; i++) {            require(                sellOrders[auctionId].<mask0>,                \"order is no longer claimable\"            );        }        AuctionData memory auction = auctionData[auctionId];        (, uint96 priceNumerator, uint96 priceDenominator) =            auction.clearingPriceOrder.decodeOrder();        (uint64 userId, , ) = orders[0].decodeOrder();        bool minFundingThresholdNotReached =            auctionData[auctionId].minFundingThresholdNotReached;        for (uint256 i = 0; i < orders.length; i++) {            (uint64 userIdOrder, uint96 buyAmount, uint96 sellAmount) =                orders[i].decodeOrder();            require(                userIdOrder == userId,                \"only allowed to claim for same user\"            );            if (minFundingThresholdNotReached) {                sumBiddingTokenAmount = sumBiddingTokenAmount.add(sellAmount);            } else {                if (orders[i] == auction.clearingPriceOrder) {                    sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(                        auction                            .volumeClearingPriceOrder                            .mul(priceNumerator)                            .div(priceDenominator)                    );                    sumBiddingTokenAmount = sumBiddingTokenAmount.add(                        sellAmount.sub(auction.volumeClearingPriceOrder)                    );                } else {                    if (orders[i].smallerThan(auction.clearingPriceOrder)) {                        sumAuctioningTokenAmount = sumAuctioningTokenAmount.add(                            sellAmount.mul(priceNumerator).div(priceDenominator)                        );                    } else {                        sumBiddingTokenAmount = sumBiddingTokenAmount.add(                            sellAmount                        );                    }                }            }            emit ClaimedFromOrder(auctionId, userId, buyAmount, sellAmount);        }        sendOutTokens(            auctionId,            sumAuctioningTokenAmount,            sumBiddingTokenAmount,            userId        );     }"