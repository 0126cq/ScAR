"function mintBatch(        IFingerprints fingerprints,        string memory modaId,        address beneficiary,        uint256 royaltyAmount,        NFTType[] memory nftTypes,        string[] memory uris,        uint256[] memory totalSupplies    ) external onlyOwner {        require(address(0) != beneficiary, \"Beneficiary cannot be 0x0\");        require(royaltyAmount <= 2_000, \"Invalid royaltyAmount\");        require(nftTypes.length == uris.length && uris.length == totalSupplies.length, \"Array mismatch\");        require(            IFingerprints(_fingerprintsRegistry).hasValidFingerprintAddress(address(fingerprints)),            \"Invalid Fingerprint\"        );        require(fingerprints.hasMatchingArtist(modaId, artist, address(this)), \"Artist not registered\");        uint256[] memory newReleaseIds = new uint256[](nftTypes.length);        uint256 creatorTokenId;        for (uint256 i = 0; i < nftTypes.length; i++) {            uint8 key = uint8(nftTypes[i]);            require(0 == _fingerprintReleases[modaId][key], \"Duplicate release\");            if (NFTType.CreatorGenesis == nftTypes[i] || NFTType.CollectorGenesis == nftTypes[i]) {                require(1 == totalSupplies[i], \"Invalid Genesis Count\");            }            tokenCounter++;            newReleaseIds[i] = tokenCounter;            _fingerprintReleases[modaId][key] = tokenCounter;            if (NFTType.CreatorGenesis == nftTypes[i]) creatorTokenId = tokenCounter;            _songReleases[newReleaseIds[i]].beneficiary = beneficiary;            _songReleases[newReleaseIds[i]].modaId = modaId;            _songReleases[newReleaseIds[i]].fingerprints = fingerprints;            _songReleases[newReleaseIds[i]].nftType = nftTypes[i];            _songReleases[newReleaseIds[i]].royaltyAmount = royaltyAmount;            _songReleases[newReleaseIds[i]].totalSupply = totalSupplies[i];            _songReleases[newReleaseIds[i]].uris.push(uris[i]);        }        _mintBatch(<mask0>, newReleaseIds, totalSupplies, \"\");        emit NFTReleased(fingerprints, modaId, nftTypes, newReleaseIds, totalSupplies);    }"