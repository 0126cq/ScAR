"function _computeLPShares(        uint256 _totalSupply,        uint256 _inventory0,        uint256 _inventory1,        uint256 _amount0Max,        uint256 _amount1Max,        uint160 _sqrtPriceX96    )        internal        pure        returns (            uint256 shares,            uint256 amount0,            uint256 amount1        )    {        <mask0>;        if (_totalSupply == 0) {            uint224 priceX96 = uint224(FullMath.mulDiv(_sqrtPriceX96, _sqrtPriceX96, Q96));            amount0 = FullMath.mulDiv(_amount1Max, Q96, priceX96);            if (amount0 < _amount0Max) {                amount1 = _amount1Max;                shares = amount1;            } else {                amount0 = _amount0Max;                amount1 = FullMath.mulDiv(amount0, priceX96, Q96);                shares = amount0;            }        } else if (_inventory0 == 0) {            amount1 = _amount1Max;            shares = FullMath.mulDiv(amount1, _totalSupply, _inventory1);        } else if (_inventory1 == 0) {            amount0 = _amount0Max;            shares = FullMath.mulDiv(amount0, _totalSupply, _inventory0);        } else {            bool cond = _inventory0 < _inventory1                ? FullMath.mulDiv(_amount1Max, _inventory0, _inventory1) < _amount0Max                : _amount1Max < FullMath.mulDiv(_amount0Max, _inventory1, _inventory0);            if (cond) {                amount1 = _amount1Max;                amount0 = FullMath.mulDiv(amount1, _inventory0, _inventory1);                shares = FullMath.mulDiv(amount1, _totalSupply, _inventory1);            } else {                amount0 = _amount0Max;                amount1 = FullMath.mulDiv(amount0, _inventory1, _inventory0);                shares = FullMath.mulDiv(amount0, _totalSupply, _inventory0);            }        }    }"