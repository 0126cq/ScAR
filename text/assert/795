"function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {    unchecked {      uint256 xExponent = uint128 (x) >> 112 & 0x7FFF;      uint256 yExponent = uint128 (y) >> 112 & 0x7FFF;      if (xExponent == 0x7FFF) {        if (yExponent == 0x7FFF) return NaN;        else return x ^ y & 0x80000000000000000000000000000000;      } else if (yExponent == 0x7FFF) {        if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;        else return POSITIVE_ZERO | (x ^ y) & 0x80000000000000000000000000000000;      } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {        if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;        else return POSITIVE_INFINITY | (x ^ y) & 0x80000000000000000000000000000000;      } else {        uint256 ySignifier = uint128 (y) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;        if (yExponent == 0) yExponent = 1;        else ySignifier |= 0x10000000000000000000000000000;        uint256 xSignifier = uint128 (x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;        if (xExponent == 0) {          if (xSignifier != 0) {            uint shift = 226 - mostSignificantBit (xSignifier);            xSignifier <<= shift;            xExponent = 1;            yExponent += shift - 114;          }        }        else {          xSignifier = (xSignifier | 0x10000000000000000000000000000) << 114;        }        xSignifier = xSignifier / ySignifier;        if (xSignifier == 0)          return (x ^ y) & 0x80000000000000000000000000000000 > 0 ?              NEGATIVE_ZERO : POSITIVE_ZERO;        <mask0>;        uint256 msb =          xSignifier >= 0x80000000000000000000000000000 ? mostSignificantBit (xSignifier) :          xSignifier >= 0x40000000000000000000000000000 ? 114 :          xSignifier >= 0x20000000000000000000000000000 ? 113 : 112;        if (xExponent + msb > yExponent + 16497) {           xExponent = 0x7FFF;          xSignifier = 0;        } else if (xExponent + msb + 16380  < yExponent) {           xExponent = 0;          xSignifier = 0;        } else if (xExponent + msb + 16268  < yExponent) {           if (xExponent + 16380 > yExponent)            xSignifier <<= xExponent + 16380 - yExponent;          else if (xExponent + 16380 < yExponent)            xSignifier >>= yExponent - xExponent - 16380;          xExponent = 0;        } else {           if (msb > 112)            xSignifier >>= msb - 112;          xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;          xExponent = xExponent + msb + 16269 - yExponent;        }        return bytes16 (uint128 (uint128 ((x ^ y) & 0x80000000000000000000000000000000) |            xExponent << 112 | xSignifier));      }    }  }"