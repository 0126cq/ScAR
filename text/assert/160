"function completeWithdrawal(        bytes32 contextId,        address provider,        uint256 id    ) external only(address(_network)) returns (CompletedWithdrawal memory) {        WithdrawalRequest memory request = _withdrawalRequests[id];        if (provider != request.provider) {            revert AccessDenied();        }        uint32 currentTime = _time();        if (!_canWithdrawAt(currentTime, request.createdAt)) {            revert WithdrawalNotAllowed();        }        _removeWithdrawalRequest(provider, id);        uint256 currentReserveTokenAmount = _poolTokenToUnderlying(request.reserveToken, request.poolTokenAmount);        <mask0>;        uint256 currentPoolTokenAmount = request.reserveTokenAmount == currentReserveTokenAmount            ? request.poolTokenAmount            : MathEx.mulDivF(request.poolTokenAmount, request.reserveTokenAmount, currentReserveTokenAmount);        if (request.poolTokenAmount > currentPoolTokenAmount) {            request.poolToken.burn(request.poolTokenAmount - currentPoolTokenAmount);        }        request.poolToken.safeTransfer(msg.sender, currentPoolTokenAmount);        emit WithdrawalCompleted({            contextId: contextId,            pool: request.reserveToken,            provider: provider,            requestId: id,            poolTokenAmount: currentPoolTokenAmount,            reserveTokenAmount: currentReserveTokenAmount,            timeElapsed: currentTime - request.createdAt        });        return CompletedWithdrawal({ poolToken: request.poolToken, poolTokenAmount: currentPoolTokenAmount });    }"