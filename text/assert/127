"function buy() internal view {    bool sale_is_whitelisted = Contract.read(Sale.isWhitelisted()) != 0 ? true : false;    bool sender_has_contributed = Contract.read(Sale.hasContributed(Contract.sender())) != 0 ? true : false;  \tuint current_rate = getCurrentRate(  \t  uint(Contract.read(Sale.startTime())),  \t  uint(Contract.read(Sale.startRate())),  \t  uint(Contract.read(Sale.endRate())),  \t  uint(Contract.read(Sale.totalDuration()))  \t);  \tuint min_contribution;    if (sale_is_whitelisted && !sender_has_contributed)      min_contribution = uint(Contract.read(Sale.whitelistMinTok(Contract.sender())));    else if (!sale_is_whitelisted && !sender_has_contributed)      min_contribution = uint(Contract.read(Sale.globalMinPurchaseAmt()));  \tuint spend_amount;  \tuint tokens_purchased;  \t(spend_amount, tokens_purchased) = getPurchaseInfo(  \t  uint(Contract.read(Sale.tokenDecimals())),  \t  current_rate,  \t  uint(Contract.read(Sale.tokensRemaining())),  \t  sale_is_whitelisted,  \t  uint(Contract.read(Sale.whitelistMaxTok(Contract.sender()))),  \t  min_contribution  \t);    <mask0>;    Contract.paying();    Contract.pay(spend_amount).toAcc(address(Contract.read(Sale.wallet())));    Contract.storing();  \tContract.increase(Sale.balances(Contract.sender())).by(tokens_purchased);  \tContract.decrease(Sale.tokensRemaining()).by(tokens_purchased);    Contract.increase(Sale.tokensSold()).by(tokens_purchased);  \tContract.increase(Sale.totalWeiRaised()).by(spend_amount);  \tif (sender_has_contributed == false) {  \t  Contract.increase(Sale.contributors()).by(1);  \t  Contract.set(Sale.hasContributed(Contract.sender())).to(true);  \t}"