"function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)    external    virtual    override    payable    ensure(deadline)    returns (uint[] memory amounts)    {        require(path.length == 2, \"RARESwapRouter: ONLY_TWO_TOKENS_ALLOWED\");        require(path[0] == WETH, 'RARESwapRouter: INVALID_PATH');        address pair = RARESwapLibrary.pairFor(factory, path[0], path[1]);        uint adminFeeDeduct;        if(path[0] == pairFeeAddress[pair]){            amounts = RARESwapLibrary.getAmountsIn(factory, amountOut, path);            require(amounts[0] <= msg.value, 'RARESwapRouter: EXCESSIVE_INPUT_AMOUNT');            (amounts[0], adminFeeDeduct) = RARESwapLibrary.adminFeeCalculation(amounts[0], adminFee);            if(address(this) != feeAddressGet()){                payable(feeAddressGet()).transfer(adminFeeDeduct);            }            amounts = RARESwapLibrary.getAmountsOut(factory, amounts[0], path);            IWETH(WETH).deposit{value: amounts[0]}();            assert(IWETH(WETH).transfer(pair, amounts[0]));        } else {            amounts = RARESwapLibrary.getAmountsIn(factory, amountOut, path);            require(amounts[0] <= msg.value, 'RARESwapRouter: EXCESSIVE_INPUT_AMOUNT');            IWETH(WETH).deposit{value: amounts[0]}();            <mask0>;        }        _swap(amounts, path, to);        uint bal = amounts[0].add(adminFeeDeduct);        if (msg.value > bal) TransferHelper.safeTransferETH(msg.sender, msg.value - bal);    }"