"function guardedArrayReplace(bytes memory array, bytes memory desired, bytes memory mask)        internal        pure    {        require(array.length == desired.length, \"Arrays have different lengths\");        require(array.length == mask.length, \"Array and mask have different lengths\");        uint words = array.length / 0x20;        uint index = words * 0x20;        <mask0>;        uint i;        for (i = 0; i < words; i++) {            assembly {                let commonIndex := mul(0x20, add(1, i))                let maskValue := mload(add(mask, commonIndex))                mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))            }        }        if (words > 0) {            i = words;            assembly {                let commonIndex := mul(0x20, add(1, i))                let maskValue := mload(add(mask, commonIndex))                mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))            }        } else {            for (i = index; i < array.length; i++) {                array[i] = ((mask[i] ^ 0xff) & array[i]) | (mask[i] & desired[i]);            }        }    }"