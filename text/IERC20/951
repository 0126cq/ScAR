"function withdraw(uint256 amount,uint256 unitprice)public payable returns (bool) {      require(ChainLink(_linkpricecontract).checkPrice(_coincontract,unitprice)==true,\"ChainLink price verification failed\");      uint256 nowtime=block.timestamp;      _calculation(_msgSender(),nowtime,0,0,unitprice);      uint256 n_0=_userpool[_msgSender()][0].amount;      if(n_0<amount){        amount=n_0;      }      require(amount <= IERC20(_coincontract).allowance(_owner, address(this)), \"ERC20: _owner amount exceeds allowance\");      uint256 beforeAmount = <mask0>.balanceOf(_owner);      TransferHelper.safeTransferFrom(_coincontract,_owner ,_msgSender(), amount);      uint256 afterAmount = IERC20(_coincontract).balanceOf(_owner);      uint256 balance =beforeAmount.sub(afterAmount, \"ERC20: beforeAmount amount afterAmount balance\");      require(balance == amount, \"ERC20: error balance\");       _userpool[_msgSender()][0]=UserInfo(                      _userpool[_msgSender()][0].amount.sub(amount),                      _userpool[_msgSender()][0].time,                      _userpool[_msgSender()][0].price);      _balances[_msgSender()] = _balances[_msgSender()].sub(amount);      _tokenBalance=_tokenBalance.add(amount);      emit Transfer(_msgSender(),address(0),amount);      return true;    }"