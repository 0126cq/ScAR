"function claim(        uint256 slot_,        address to_,        uint256 claimAmount    ) external nonReentrant onlyManager {        if (claimAmount > amountOfSlot[slot_]) {            claimAmount = amountOfSlot[slot_];        }        amountOfSlot[slot_] = amountOfSlot[slot_].sub(claimAmount);        totalAmount = totalAmount.sub(claimAmount);        SlotDetail storage slotDetail = _slotDetails[slot_];        uint64 finalTerm = slotDetail.claimType ==            uint8(Constants.ClaimType.LINEAR)            ? slotDetail.terms[0]            : slotDetail.claimType == uint8(Constants.ClaimType.ONE_TIME)            ? 0            : stagedTermsToVestingTerm(slotDetail.terms);        uint64 startTime = slotDetail.startTime > 0            ? slotDetail.startTime            : slotDetail.latestStartTime;        uint64[] memory maturities = new uint64[](slotDetail.terms.length);        maturities[0] = startTime + slotDetail.terms[0];        for (uint256 i = 1; i < maturities.length; i++) {            maturities[i] = maturities[i - 1] + slotDetail.terms[i];        }        <mask0>.approve(            address(IICToken(underlyingVestingVoucher).vestingPool()),            claimAmount        );        (, uint256 vestingVoucherId) = IICToken(underlyingVestingVoucher).mint(            finalTerm,            claimAmount,            maturities,            slotDetail.percentages,            \"\"        );        VNFTTransferHelper.doTransferOut(            address(underlyingVestingVoucher),            to_,            vestingVoucherId        );        emit Claim(slot_, to_, claimAmount);    }"