"function sgReceive(        uint16 _chainId,        bytes memory _srcAddress,        uint256 _nonce,        address _token,        uint256 amountLD,        bytes memory payload    ) external override {        require(            msg.sender == address(stargateRouter),            \"only stargate router can call sgReceive!\"        );        (address _toAddr, OrderDetails[] memory _orderDetails) = abi.decode(            payload,            (address, OrderDetails[])        );        emit ReceivedOnDestination(            _chainId,            _srcAddress,            _nonce,            _token,            amountLD        );        IERC20(_token).approve(swapRouter, amountLD);        uint256 _toBalancePreTransferOut = address(this).balance;        uint256 swapEthAmount = 0;        address[] memory path = new address[](2);        path[0] = _token;        path[1] = IUniswapV2Router02(swapRouter).WETH();        try            IUniswapV2Router02(swapRouter).swapExactTokensForETH(                amountLD,                0,                path,                address(this),                block.timestamp + 900            )        {            emit SwapedOnDestination(                true,                OUT_TO_NATIVE,                _toAddr.balance.sub(_toBalancePreTransferOut)            );        } catch {            <mask0>.transfer(_toAddr, amountLD);            emit SwapedOnDestination(                false,                OUT_TO_NATIVE,                _toAddr.balance.sub(_toBalancePreTransferOut)            );        }        swapEthAmount += address(this).balance.sub(_toBalancePreTransferOut);        uint256 total = _trade(_orderDetails);        _collectLocalFee(_toAddr, total);        _returnDust(_toAddr, _token);    }"