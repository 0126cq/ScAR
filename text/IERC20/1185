"function withdrawStEth(        address steth,        address wstEth,        uint256 amount    ) external returns (uint256) {        uint256 _amount = amount;        uint256 stethBalance = <mask0>.balanceOf(address(this));        if (stethBalance >= amount) {            return amount;         } else {            amount = amount.sub(stethBalance);        }        uint256 wstethBalance = IWSTETH(wstEth).balanceOf(address(this));        uint256 totalShares = ISTETH(steth).getTotalShares();        uint256 totalPooledEther = ISTETH(steth).getTotalPooledEther();        stethBalance = wstethBalance.mul(totalPooledEther).div(totalShares);        if (stethBalance >= amount) {            wstethBalance = amount.mul(totalShares).div(totalPooledEther);            if (wstethBalance > 0) {                IWSTETH(wstEth).unwrap(wstethBalance);                return IERC20(steth).balanceOf(address(this));             }        } else if (stethBalance > 0) {            stethBalance = IERC20(steth).balanceOf(address(this));            IWSTETH(wstEth).unwrap(wstethBalance);            amount = amount.sub(                IERC20(steth).balanceOf(address(this)).sub(stethBalance)            );        }        uint256 ethBalance = address(this).balance;        if (amount > 0 && ethBalance >= amount) {            ISTETH(steth).submit{value: amount}(address(this));        } else if (ethBalance > 0) {            ISTETH(steth).submit{value: ethBalance}(address(this));        }        stethBalance = IERC20(steth).balanceOf(address(this));        require(_amount.add(3) >= stethBalance, \"Unwrapped too much stETH\");        require(_amount <= stethBalance.add(3), \"Unwrapped insufficient stETH\");        return stethBalance;     }"