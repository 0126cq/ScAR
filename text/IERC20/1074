"function exchange(I1Inch3 _1inchExchange, bytes calldata data) internal returns (I1Inch3.SwapDescription memory description) {        if (data[0] == 0x7c) {            (, description, ) = abi.decode(data[4:], (address, I1Inch3.SwapDescription, bytes));        } else {            (address srcToken, uint256 amount, uint256 minReturn, bytes32[] memory pathData) = abi.decode(                data[4:],                (address, uint256, uint256, bytes32[])            );            description.srcToken = srcToken;            description.amount = amount;            description.minReturnAmount = minReturn;            description.flags = 0;            uint256 lastPath = uint256(pathData[pathData.length - 1]);            IUniRouter uniRouter = IUniRouter(address(lastPath & ADDRESS_MASK));            bool isReverse = lastPath & REVERSE_MASK > 0;            description.dstToken = isReverse ? uniRouter.token0() : uniRouter.token1();            description.dstReceiver = address(this);        }        <mask0>.approve(address(_1inchExchange), description.amount);        (bool success, ) = address(_1inchExchange).call(data);        if (!success) {            assembly {                let ptr := mload(0x40)                let size := returndatasize()                returndatacopy(ptr, 0, size)                revert(ptr, size)            }        }    }"