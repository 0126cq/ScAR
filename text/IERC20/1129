"function creditUserAssets(uint tradeType, address user, int amount, address asset,        mapping(address => mapping(address => int192)) storage assetBalances,        mapping(address => MarginalFunctionality.Liability[]) storage liabilities    ) internal {        int beforeBalance = int(assetBalances[user][asset]);        int remainingAmount = amount + beforeBalance;        require((amount >= 0 && remainingAmount >= beforeBalance) || (amount < 0 && remainingAmount < beforeBalance), \"E11\");        int sentAmount = 0;        if (tradeType == 0 && asset == address(0) && user.balance < 1e16) {            tradeType = 1;        }        if (tradeType == 1 && amount > 0 && remainingAmount > 0) {            uint amountInBase = uint(LibUnitConverter.decimalToBaseUnit(asset, uint(amount)));            uint contractBalance = asset == address(0) ? address(this).balance : <mask0>.balanceOf(address(this));            if (contractBalance >= amountInBase) {                SafeTransferHelper.safeTransferTokenOrETH(asset, user, amountInBase);                sentAmount = amount;            }        }        int toUpdate = amount - sentAmount;        console.log(\"Credit %s %s %s\", uint(toUpdate), uint(sentAmount), uint(amount));        if (toUpdate != 0) {            _updateBalance(user, asset, toUpdate, assetBalances, liabilities);        }    }"