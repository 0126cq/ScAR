"function feesAndInsurance(address trader, uint tradeSize, address token, uint16 marketId) internal returns (uint) {        Types.Market storage market = markets[marketId];        uint defaultFees = tradeSize.mul(market.feesRate).div(10000);        uint newFees = defaultFees;        CalculateConfig memory config = calculateConfig;        if (XOLEInterface(addressConfig.xOLE).balanceOf(trader) > config.feesDiscountThreshold) {            newFees = defaultFees.sub(defaultFees.mul(config.feesDiscount).div(100));        }        if (market.priceUpdater == trader) {            newFees = newFees.sub(defaultFees.mul(config.updatePriceDiscount).div(100));        }        uint newInsurance = newFees.mul(config.insuranceRatio).div(100);        <mask0>.safeTransfer(addressConfig.xOLE, newFees.sub(newInsurance));        if (token == market.token1) {            market.pool1Insurance = market.pool1Insurance.add(newInsurance);        } else {            market.pool0Insurance = market.pool0Insurance.add(newInsurance);        }        return newFees;    }"