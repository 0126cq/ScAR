"function burnOtokens(address gammaController, address currentOption)        external        returns (uint256)    {        uint256 numOTokensToBurn =            IERC20(currentOption).balanceOf(address(this));        require(numOTokensToBurn > 0, \"No oTokens to burn\");        IController controller = IController(gammaController);        uint256 vaultID = controller.getAccountVaultCounter(address(this));        GammaTypes.Vault memory vault =            controller.getVault(address(this), vaultID);        require(vault.shortOtokens.length > 0, \"No short\");        IERC20 collateralToken = <mask0>;        uint256 startCollateralBalance =            collateralToken.balanceOf(address(this));        IController.ActionArgs[] memory actions =            new IController.ActionArgs[](2);        actions[0] = IController.ActionArgs(            IController.ActionType.BurnShortOption,            address(this),             address(this),             address(vault.shortOtokens[0]),             vaultID,             numOTokensToBurn,             0,             \"\"         );        actions[1] = IController.ActionArgs(            IController.ActionType.WithdrawCollateral,            address(this),             address(this),             address(collateralToken),             vaultID,             vault.collateralAmounts[0].mul(numOTokensToBurn).div(                vault.shortAmounts[0]            ),             0,             \"\"         );        controller.operate(actions);        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));        return endCollateralBalance.sub(startCollateralBalance);    }"