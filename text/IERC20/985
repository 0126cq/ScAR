"function ZapOut(        address gVault,        uint256 amountIn,        address swapAddress,        address intermediateToken,        address toToken,        uint256 minToTokens,        address _swapTarget,        bytes calldata _swapCallData    ) external stopInEmergency returns (uint256) {        address underlyingToken = IVault(gVault).token();        address poolTokenAddress = curveReg.getTokenAddress(swapAddress);         require(poolTokenAddress == underlyingToken, \"Wrong LpAddress\");        _approveToken(gVault, address(this), amountIn);         _pullTokens(gVault, amountIn);        uint256 underlyingTokenReceived = _vaultWithdraw(            gVault,            amountIn,            underlyingToken        );        if (intermediateToken == address(0)) {            intermediateToken = ETHAddress;        }        uint256 toTokensBought = _zapOut(            swapAddress,            underlyingTokenReceived,            intermediateToken,            toToken,            _swapTarget,            _swapCallData        );        require(toTokensBought >= minToTokens, \"High Slippage\");        if (toToken == address(0)) {            Address.sendValue(payable(msg.sender), toTokensBought);        } else {            <mask0>.safeTransfer(msg.sender, toTokensBought);        }        emit zapCurveOut(msg.sender, swapAddress, toToken, toTokensBought);        return toTokensBought;    }"