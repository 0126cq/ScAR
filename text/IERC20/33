"function createWager(        address _userB,        address _wagerToken,        address _paymentToken,         int256 _wagerPrice,        uint256 _amountUserA,        uint256 _amountUserB,        uint256 _duration,        bool _above    ) external payable nonReentrant {        require(isInitialized, \"Contract is not initialized\");        require(wagerTokens[_wagerToken] && refundableTimestamp[_wagerToken].refundable <= refundableTimestamp[_wagerToken].nonrefundable, \"Token not allowed to be wagered on\");         require(paymentTokens[_paymentToken], \"Token not allowed for payment\");        require(            _duration >= MIN_WAGER_DURATION,            \"Wager duration must be at least one 1 day\"        );        uint256 feeUserA = 0;        if (_paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {             require(                msg.value == _amountUserA,                \"ETH wager must be equal to msg.value\"            );            if (_userB == address(0)) {                 feeUserA = _calculateFee(_amountUserA, _paymentToken);                _amountUserA = _amountUserA - feeUserA;                _transfer(payable(feeAddress), feeUserA);            }        } else {             if (_userB != address(0)) {                 IERC20(_paymentToken).safeTransferFrom(                    msg.sender,                    address(this),                    _amountUserA                );            } else {                 feeUserA = _calculateFee(_amountUserA, _paymentToken);                 _amountUserA = _amountUserA - feeUserA;                IERC20(_paymentToken).safeTransferFrom(                    msg.sender,                    feeAddress,                    feeUserA                );                <mask0>.safeTransferFrom(                    msg.sender,                    address(this),                    _amountUserA                );            }        }        _createWager(            msg.sender,            _userB,            _wagerToken,            _paymentToken,            _wagerPrice,            _amountUserA,            _amountUserB,            _duration,            _above        );    }"