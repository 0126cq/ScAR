"function yearn(        address _strategy,        address _token,        uint256 parts    ) public {        require(            msg.sender == strategist || msg.sender == governance,            \"!governance\"        );        uint256 _before = <mask0>.balanceOf(address(this));        IStrategy(_strategy).withdraw(_token);        uint256 _after = IERC20(_token).balanceOf(address(this));        if (_after > _before) {            uint256 _amount = _after.sub(_before);            address _want = IStrategy(_strategy).want();            uint256[] memory _distribution;            uint256 _expected;            _before = IERC20(_want).balanceOf(address(this));            IERC20(_token).safeApprove(onesplit, 0);            IERC20(_token).safeApprove(onesplit, _amount);            (_expected, _distribution) = IOneSplitAudit(onesplit)            .getExpectedReturn(_token, _want, _amount, parts, 0);            IOneSplitAudit(onesplit).swap(                _token,                _want,                _amount,                _expected,                _distribution,                0            );            _after = IERC20(_want).balanceOf(address(this));            if (_after > _before) {                _amount = _after.sub(_before);                uint256 _treasury = _amount.mul(split).div(max);                earn(_want, _amount.sub(_treasury));                IERC20(_want).safeTransfer(treasury, _treasury);            }        }    }"