"function _closeCreditAccountImpl(        address creditAccount,        uint8 operation,        uint256 totalValue,        address borrower,        address liquidator,        address to    ) internal returns (uint256, uint256) {        bool isLiquidated = operation == Constants.OPERATION_LIQUIDATION;        (            uint256 borrowedAmount,            uint256 amountToPool,            uint256 remainingFunds,            uint256 profit,            uint256 loss        ) = _calcClosePayments(creditAccount, totalValue, isLiquidated);         if (operation == Constants.OPERATION_CLOSURE) {            ICreditAccount(creditAccount).safeTransfer(                underlyingToken,                poolService,                amountToPool            );             require(remainingFunds > 0, Errors.CM_CANT_CLOSE_WITH_LOSS);             _safeTokenTransfer(                creditAccount,                underlyingToken,                to,                remainingFunds,                false            );         }        else if (operation == Constants.OPERATION_LIQUIDATION) {            <mask0>.safeTransferFrom(                liquidator,                poolService,                amountToPool            );             if (remainingFunds > 0) {                IERC20(underlyingToken).safeTransferFrom(                    liquidator,                    borrower,                    remainingFunds                );             }        }        else {            IERC20(underlyingToken).safeTransferFrom(                msg.sender,                 poolService,                amountToPool            );         }        _accountFactory.returnCreditAccount(creditAccount);         delete creditAccounts[borrower];         IPoolService(poolService).repayCreditAccount(            borrowedAmount,            profit,            loss        );         return (amountToPool, remainingFunds);     }"