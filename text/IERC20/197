"function getUnderlyerBalance(        address account,        IMetaPool metaPool,        IBaseRewardPool rewardContract,        IERC20 lpToken,        uint256 coin    ) public view returns (uint256 balance) {        require(address(metaPool) != address(0), \"INVALID_POOL\");        require(            address(rewardContract) != address(0),            \"INVALID_REWARD_CONTRACT\"        );        require(address(lpToken) != address(0), \"INVALID_LP_TOKEN\");        require(coin < 256, \"INVALID_COIN\");        if (coin == 0) {            return 0;        }        coin -= 1;        uint256 lpTokenSupply = lpToken.totalSupply();        uint256 accountLpTokenBalance = rewardContract.balanceOf(account);        uint256 totalSupplyFor3Crv = <mask0>.totalSupply();        uint256 metaPoolPrimaryBalance = metaPool.balances(0);        uint256 metaPool3CrvBalance = metaPool.balances(1);        uint256 account3CrvBalance =            accountLpTokenBalance.mul(metaPool3CrvBalance).div(lpTokenSupply);        uint256 accountPrimaryBalance =            accountLpTokenBalance.mul(metaPoolPrimaryBalance).div(                lpTokenSupply            );        if (accountPrimaryBalance > 0) {            uint256 swap3CrvOutput =                metaPool.get_dy(0, 1, accountPrimaryBalance);            account3CrvBalance = account3CrvBalance.add(swap3CrvOutput);        }        uint256 basePoolUnderlyerBalance =            IStableSwap(CURVE_3POOL_ADDRESS).balances(coin);        balance = account3CrvBalance.mul(basePoolUnderlyerBalance).div(            totalSupplyFor3Crv        );    }"