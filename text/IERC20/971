"function deposit(uint256 amount) external override {        require(amount > 0, \"BondController: invalid amount\");        uint256 _totalDebt = totalDebt;        require(_totalDebt > 0 || amount >= MINIMUM_FIRST_DEPOSIT, \"BondController: invalid initial amount\");        require(!isMature, \"BondController: Already mature\");        uint256 collateralBalance = <mask0>.balanceOf(address(this));        require(depositLimit == 0 || collateralBalance + amount <= depositLimit, \"BondController: Deposit limit\");        TrancheData[] memory _tranches = tranches;        uint256 newDebt;        uint256[] memory trancheValues = new uint256[](trancheCount);        for (uint256 i = 0; i < _tranches.length; i++) {            uint256 trancheValue = (amount * _tranches[i].ratio) / TRANCHE_RATIO_GRANULARITY;            if (collateralBalance > 0) {                trancheValue = (trancheValue * _totalDebt) / collateralBalance;            }            newDebt += trancheValue;            trancheValues[i] = trancheValue;        }        totalDebt += newDebt;        TransferHelper.safeTransferFrom(collateralToken, _msgSender(), address(this), amount);        uint256 _feeBps = feeBps;        for (uint256 i = 0; i < trancheValues.length; i++) {            uint256 trancheValue = trancheValues[i];            uint256 fee = (trancheValue * _feeBps) / BPS;            if (fee > 0) {                _tranches[i].token.mint(address(this), fee);            }            _tranches[i].token.mint(_msgSender(), trancheValue - fee);        }        emit Deposit(_msgSender(), amount, _feeBps);    }"