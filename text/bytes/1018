"function decode(string memory _data) internal pure returns (bytes memory) {        bytes memory data = bytes(_data);        if (data.length == 0) return new <mask0>;        require(data.length % 4 == 0, \"invalid base64 decoder input\");        bytes memory table = TABLE_DECODE;        uint256 decodedLen = (data.length / 4) * 3;        bytes memory result = new bytes(decodedLen + 32);        assembly {            let lastBytes := mload(add(data, mload(data)))            if eq(and(lastBytes, 0xFF), 0x3d) {                decodedLen := sub(decodedLen, 1)                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {                    decodedLen := sub(decodedLen, 1)                }            }            mstore(result, decodedLen)            let tablePtr := add(table, 1)            let dataPtr := data            let endPtr := add(dataPtr, mload(data))            let resultPtr := add(result, 32)            for {} lt(dataPtr, endPtr) {}            {               dataPtr := add(dataPtr, 4)               let input := mload(dataPtr)               let output := add(                   add(                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),                   add(                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)                    )                )                mstore(resultPtr, shl(232, output))                resultPtr := add(resultPtr, 3)            }        }        return result;    }"