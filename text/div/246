"function _getAuctionParams(uint256 _auctionTriggerTime) internal view returns (Constants.AuctionParams memory) {        (uint256 ethUsdcPrice, uint256 osqthEthPrice) = IVaultMath(vaultMath).getPrices();        uint256 totalValue;        {            (uint256 ethBalance, uint256 usdcBalance, uint256 osqthBalance) = IVaultMath(vaultMath).getTotalAmounts();            totalValue = IVaultMath(vaultMath).getValue(                ethBalance,                usdcBalance,                osqthBalance,                ethUsdcPrice,                osqthEthPrice            );        }        uint256 priceMultiplier;        uint256 weight;        Constants.Boundaries memory boundaries;        {            uint256 cIV = IVaultMath(vaultMath).getIV();            uint256 pIV = IVaultStorage(vaultStorage).ivAtLastRebalance();            bool isPosIVbump = cIV < pIV;            priceMultiplier = IVaultMath(vaultMath).getPriceMultiplier(_auctionTriggerTime);            uint256 expIVbump;            if (isPosIVbump) {                expIVbump = pIV.div(cIV);                weight = priceMultiplier.div(priceMultiplier + uint256(1e18)) + uint256(1e16).div(cIV);            } else {                expIVbump = cIV.div(pIV);                weight = priceMultiplier.div(priceMultiplier + uint256(1e18)) - uint256(1e16).div(cIV);            }            uint256 cachedBump = expIVbump.mul(2e18).sub(2e18);            expIVbump = cachedBump > uint256(1e18) ? uint256(1e18) : cachedBump;            boundaries = _getBoundaries(                ethUsdcPrice.mul(priceMultiplier),                osqthEthPrice.mul(priceMultiplier),                isPosIVbump,                expIVbump            );        }        uint128 liquidityEthUsdc = IVaultMath(vaultMath).getLiquidityForValue(            totalValue.mul(ethUsdcPrice).mul(weight).mul(priceMultiplier),            ethUsdcPrice,            uint256(1e30).div(IVaultMath(vaultMath).getPriceFromTick(boundaries.ethUsdcLower)),            uint256(1e30).div(IVaultMath(vaultMath).getPriceFromTick(boundaries.ethUsdcUpper)),            1e12        );        uint128 liquidityOsqthEth = IVaultMath(vaultMath).getLiquidityForValue(            totalValue.mul(uint256(1e18) - weight).mul(priceMultiplier),            osqthEthPrice,            uint256(1e18).<mask0>,            uint256(1e18).div(IVaultMath(vaultMath).getPriceFromTick(boundaries.osqthEthUpper)),            1e18        );        return            Constants.AuctionParams(                boundaries,                liquidityEthUsdc,                liquidityOsqthEth,                totalValue,                ethUsdcPrice.mul(priceMultiplier)            );    }"