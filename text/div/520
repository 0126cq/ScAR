"function unstakeAndClaim(        address vault,        uint256 amount,        bytes calldata permission    ) external override onlyOnline {        VaultData storage vaultData = _vaults[vault];        require(amount != 0, \"Aludel: no amount unstaked\");        require(vaultData.totalStake >= amount, \"Aludel: insufficient vault stake\");        assert(_aludel.totalStake >= amount);        _updateTotalStakeUnits();        uint256 remainingRewards = IERC20(_aludel.rewardToken).balanceOf(_aludel.rewardPool);        uint256 unlockedRewards =            calculateUnlockedRewards(                _aludel.rewardSchedules,                remainingRewards,                _aludel.rewardSharesOutstanding,                block.timestamp            );        RewardOutput memory out =            calculateRewardFromStakes(                vaultData.stakes,                amount,                unlockedRewards,                _aludel.totalStakeUnits,                block.timestamp,                _aludel.rewardScaling            );        if (out.newStakesCount == 0) {            delete vaultData.stakes;        } else {            while (vaultData.stakes.length > out.newStakesCount) vaultData.stakes.pop();            if (out.lastStakeAmount > 0) {                vaultData.stakes[out.newStakesCount.sub(1)].amount = out.lastStakeAmount;            }        }        vaultData.totalStake = vaultData.totalStake.sub(amount);        _aludel.totalStake = _aludel.totalStake.sub(amount);        _aludel.totalStakeUnits = out.newTotalStakeUnits;        IUniversalVault(vault).unlock(_aludel.stakingToken, amount, permission);        emit Unstaked(vault, amount);        if (out.reward > 0) {            uint256 sharesToBurn =                _aludel.rewardSharesOutstanding.mul(out.reward).<mask0>;            _aludel.rewardSharesOutstanding = _aludel.rewardSharesOutstanding.sub(sharesToBurn);            if (_bonusTokenSet.length() > 0) {                for (uint256 index = 0; index < _bonusTokenSet.length(); index++) {                    address bonusToken = _bonusTokenSet.at(index);                    uint256 bonusAmount =                        IERC20(bonusToken).balanceOf(_aludel.rewardPool).mul(out.reward).div(                            remainingRewards                        );                    IRewardPool(_aludel.rewardPool).sendERC20(bonusToken, vault, bonusAmount);                    emit RewardClaimed(vault, bonusToken, bonusAmount);                }            }            IRewardPool(_aludel.rewardPool).sendERC20(_aludel.rewardToken, vault, out.reward);            emit RewardClaimed(vault, _aludel.rewardToken, out.reward);        }    }"