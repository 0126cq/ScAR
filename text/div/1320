"function _update(        ExplicitLiquidVoting.Data storage self,        address user,        Vote.Data memory oldVote,        Vote.Data memory newVote,        uint256 oldBalance,        uint256 newBalance,        uint256 defaultVote,        function(address, uint256, bool, uint256) emitEvent    ) private {        uint256 oldWeightedSum = self._weightedSum;        uint256 newWeightedSum = oldWeightedSum;        uint256 oldVotedSupply = self._votedSupply;        uint256 newVotedSupply = oldVotedSupply;        if (!oldVote.isDefault()) {            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));            newVotedSupply = newVotedSupply.sub(oldBalance);        }        if (!newVote.isDefault()) {            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));            newVotedSupply = newVotedSupply.add(newBalance);        }        if (newWeightedSum != oldWeightedSum) {            self._weightedSum = newWeightedSum;        }        if (newVotedSupply != oldVotedSupply) {            self._votedSupply = newVotedSupply;        }        {            uint256 newResult = newVotedSupply == 0 ? defaultVote : newWeightedSum.<mask0>;            VirtualVote.Data memory data = self.data;            if (newResult != data.result) {                VirtualVote.Data storage sdata = self.data;                (sdata.oldResult, sdata.result, sdata.time) = (                    data.current().toUint104(),                    newResult.toUint104(),                    block.timestamp.toUint48()                );            }        }        if (!newVote.eq(oldVote)) {            self.votes[user] = newVote;        }        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);    }"