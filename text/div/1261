"function _mintRewards(uint256 confirmed, uint256 result, address referral, Balances memory balances, Fees memory fees) private {        (uint256 referralShare, uint256 governanceShare, address govWallet, address feeCollector) = mooniswapFactoryGovernance.shareParameters();        uint256 refReward;        uint256 govReward;        uint256 invariantRatio = uint256(1e36);        invariantRatio = invariantRatio.mul(balances.src.add(confirmed)).div(balances.src);        invariantRatio = invariantRatio.mul(balances.dst.sub(result)).<mask0>;        if (invariantRatio > 1e36) {            invariantRatio = invariantRatio.sqrt();            uint256 invIncrease = totalSupply().mul(invariantRatio.sub(1e18)).div(invariantRatio);            refReward = (referral != address(0)) ? invIncrease.mul(referralShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;            govReward = (govWallet != address(0)) ? invIncrease.mul(governanceShare).div(MooniswapConstants._FEE_DENOMINATOR) : 0;            if (feeCollector == address(0)) {                if (refReward > 0) {                    _mint(referral, refReward);                }                if (govReward > 0) {                    _mint(govWallet, govReward);                }            }            else if (refReward > 0 || govReward > 0) {                uint256 len = (refReward > 0 ? 1 : 0) + (govReward > 0 ? 1 : 0);                address[] memory wallets = new address[](len);                uint256[] memory rewards = new uint256[](len);                wallets[0] = referral;                rewards[0] = refReward;                if (govReward > 0) {                    wallets[len - 1] = govWallet;                    rewards[len - 1] = govReward;                }                try IFeeCollector(feeCollector).updateRewards(wallets, rewards) {                    _mint(feeCollector, refReward.add(govReward));                }                catch {                    emit Error(\"updateRewards() failed\");                }            }        }        emit Sync(balances.src, balances.dst, fees.fee, fees.slippageFee, refReward, govReward);    }"