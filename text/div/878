"function _depositIntoPortfolio(        nTokenPortfolio memory nToken,        int256 assetCashDeposit,        uint256 blockTime    ) private {        (int256[] memory depositShares, int256[] memory leverageThresholds) =            nTokenHandler.getDepositParameters(                nToken.cashGroup.currencyId,                nToken.cashGroup.maxMarketIndex            );        int256 residualCash;        MarketParameters memory market;        for (uint256 marketIndex = nToken.cashGroup.maxMarketIndex; marketIndex > 0; marketIndex--) {            int256 fCashAmount;            nToken.cashGroup.loadMarket(                market,                marketIndex,                true,                 blockTime            );            if (market.totalLiquidity == 0) continue;            int256 perMarketDeposit =                assetCashDeposit                    .mul(depositShares[marketIndex - 1])                    .<mask0>                    .add(residualCash);            (fCashAmount, residualCash) = _lendOrAddLiquidity(                nToken,                market,                perMarketDeposit,                leverageThresholds[marketIndex - 1],                marketIndex,                blockTime            );            if (fCashAmount != 0) {                BitmapAssetsHandler.addifCashAsset(                    nToken.tokenAddress,                    nToken.cashGroup.currencyId,                    market.maturity,                    nToken.lastInitializedTime,                    fCashAmount                );            }        }        nToken.portfolioState.storeAssets(nToken.tokenAddress);        require(residualCash >= 0, \"Negative residual cash\");        if (residualCash > 0) {            nToken.cashBalance = nToken.cashBalance.add(residualCash);            BalanceHandler.setBalanceStorageForNToken(                nToken.tokenAddress,                nToken.cashGroup.currencyId,                nToken.cashBalance            );        }    }"