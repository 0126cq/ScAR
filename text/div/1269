"function _update(        LiquidVoting.Data storage self,        address user,        Vote.Data memory oldVote,        Vote.Data memory newVote,        uint256 oldBalance,        uint256 newBalance,        uint256 newTotalSupply,        uint256 defaultVote,        function(address, uint256, bool, uint256) emitEvent    ) private {        uint256 oldWeightedSum = self._weightedSum;        uint256 newWeightedSum = oldWeightedSum;        uint256 oldDefaultVotes = self._defaultVotes;        uint256 newDefaultVotes = oldDefaultVotes;        if (oldVote.isDefault()) {            newDefaultVotes = newDefaultVotes.sub(oldBalance);        } else {            newWeightedSum = newWeightedSum.sub(oldBalance.mul(oldVote.get(defaultVote)));        }        if (newVote.isDefault()) {            newDefaultVotes = newDefaultVotes.add(newBalance);        } else {            newWeightedSum = newWeightedSum.add(newBalance.mul(newVote.get(defaultVote)));        }        if (newWeightedSum != oldWeightedSum) {            self._weightedSum = newWeightedSum;        }        if (newDefaultVotes != oldDefaultVotes) {            self._defaultVotes = newDefaultVotes;        }        {            uint256 newResult = newTotalSupply == 0 ? defaultVote : newWeightedSum.add(newDefaultVotes.mul(defaultVote)).<mask0>;            VirtualVote.Data memory data = self.data;            if (newResult != data.result) {                VirtualVote.Data storage sdata = self.data;                (sdata.oldResult, sdata.result, sdata.time) = (                    data.current().toUint104(),                    newResult.toUint104(),                    block.timestamp.toUint48()                );            }        }        if (!newVote.eq(oldVote)) {            self.votes[user] = newVote;        }        emitEvent(user, newVote.get(defaultVote), newVote.isDefault(), newBalance);    }"