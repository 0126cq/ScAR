"function executeCoverAction(        uint256 tokenId,        uint256 assetAmount,        address asset,        uint8 action,        bytes calldata data    )        external        payable        onlyTokenApprovedOrOwner(tokenId)        nonReentrant        returns (bytes memory response, uint256 withheldAmount)    {        if (assetAmount == 0) {            return gateway.executeCoverAction(tokenId, action, data);        }        if (asset == ETH) {            require(                msg.value >= assetAmount,                \"Distributor: Insufficient ETH sent\"            );            (response, withheldAmount) = gateway.executeCoverAction{                value: msg.value            }(tokenId, action, data);            uint256 ethRemainder = assetAmount.sub(withheldAmount);            (                bool ok,             ) = address(_msgSender()).call{value: ethRemainder}(\"\");            require(                ok,                \"Distributor: Returning ETH remainder to sender failed.\"            );            return (response, withheldAmount);        }        IERC20Upgradeable token = IERC20Upgradeable(asset);        SafeERC20Upgradeable.safeTransferFrom(            IERC20Upgradeable(asset),            _msgSender(),            address(this),            assetAmount        );        SafeERC20Upgradeable.<mask0>;        (response, withheldAmount) = gateway.executeCoverAction(            tokenId,            action,            data        );        uint256 remainder = assetAmount.sub(withheldAmount);        SafeERC20Upgradeable.safeTransfer(            IERC20Upgradeable(asset),            _msgSender(),            remainder        );        return (response, withheldAmount);    }"