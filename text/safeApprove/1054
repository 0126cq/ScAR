"function swapMintLiquidate(        address uniswapRouter,        address financialContract,        address reserveCurrency,        address liquidatedSponsor,        FixedPoint.Unsigned calldata maxReserveTokenSpent,        FixedPoint.Unsigned calldata minCollateralPerTokenLiquidated,        FixedPoint.Unsigned calldata maxCollateralPerTokenLiquidated,        FixedPoint.Unsigned calldata maxTokensToLiquidate,        uint256 deadline    ) public {        IFinancialContract fc = IFinancialContract(financialContract);        FixedPoint.Unsigned memory tokenShortfall = subOrZero(maxTokensToLiquidate, getSyntheticBalance(fc));        FixedPoint.Unsigned memory gcr = fc.pfc().divCeil(fc.totalTokensOutstanding());        FixedPoint.Unsigned memory collateralToMintShortfall = tokenShortfall.mulCeil(gcr);        FixedPoint.Unsigned memory totalCollateralRequired = getFinalFee(fc).add(collateralToMintShortfall);        FixedPoint.Unsigned memory collateralToBePurchased =            subOrZero(totalCollateralRequired, getCollateralBalance(fc));        if (collateralToBePurchased.isGreaterThan(0) && reserveCurrency != fc.collateralCurrency()) {            IUniswapV2Router01 router = IUniswapV2Router01(uniswapRouter);            address[] memory path = new address[](2);            path[0] = reserveCurrency;            path[1] = fc.collateralCurrency();            TransferHelper.safeApprove(reserveCurrency, address(router), maxReserveTokenSpent.rawValue);            router.swapTokensForExactTokens(                collateralToBePurchased.rawValue,                maxReserveTokenSpent.rawValue,                path,                address(this),                deadline            );        }        if (totalCollateralRequired.isGreaterThan(getCollateralBalance(fc))) {            totalCollateralRequired = getCollateralBalance(fc);            collateralToMintShortfall = totalCollateralRequired.sub(getFinalFee(fc));            tokenShortfall = collateralToMintShortfall.divCeil(gcr);        }        TransferHelper.<mask0>;        if (tokenShortfall.isGreaterThan(0)) fc.create(collateralToMintShortfall, tokenShortfall);        FixedPoint.Unsigned memory liquidatableTokens = maxTokensToLiquidate;        if (maxTokensToLiquidate.isGreaterThan(getSyntheticBalance(fc))) liquidatableTokens = getSyntheticBalance(fc);        TransferHelper.safeApprove(fc.tokenCurrency(), address(fc), liquidatableTokens.rawValue);        fc.createLiquidation(            liquidatedSponsor,            minCollateralPerTokenLiquidated,            maxCollateralPerTokenLiquidated,            liquidatableTokens,            deadline        );    }"