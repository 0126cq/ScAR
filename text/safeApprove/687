"function harvest() public override onlyBenevolent {        ISushiChef(masterChef).deposit(poolId, 0);        uint256 _sushi = IERC20(sushi).balanceOf(address(this));        if (_sushi > 0) {            _swapToNeurAndDistributePerformanceFees(sushi, sushiRouter);        }        _sushi = IERC20(sushi).balanceOf(address(this));        if (_sushi > 0) {            uint256 _keepSUSHI = _sushi.mul(keepSUSHI).div(keepSUSHIMax);            IERC20(sushi).safeTransfer(                IController(controller).treasury(),                _keepSUSHI            );            uint256 _swap = _sushi.sub(_keepSUSHI);            IERC20(sushi).safeApprove(sushiRouter, 0);            IERC20(sushi).<mask0>;            _swapSushiswap(sushi, weth, _swap);        }        uint256 _weth = IERC20(weth).balanceOf(address(this));        if (_weth > 0) {            _swapSushiswap(weth, token1, _weth.div(2));        }        _weth = IERC20(weth).balanceOf(address(this));        uint256 _token1 = IERC20(token1).balanceOf(address(this));        if (_weth > 0 && _token1 > 0) {            IERC20(token1).safeApprove(sushiRouter, 0);            IERC20(token1).safeApprove(sushiRouter, _token1);            IUniswapRouterV2(sushiRouter).addLiquidity(                weth,                token1,                _weth,                _token1,                0,                0,                address(this),                block.timestamp + 60            );            IERC20(weth).transfer(                IController(controller).treasury(),                IERC20(weth).balanceOf(address(this))            );            IERC20(token1).safeTransfer(                IController(controller).treasury(),                IERC20(token1).balanceOf(address(this))            );        }        deposit();    }"