"function harvest() public override onlyBenevolent {        address[] memory path = new address[](2);        IStakingRewards(rewards).getReward();        uint256 _bas = IERC20_1(bas).balanceOf(address(this));        if (_bas > 0) {            uint256 _keepBAS = _bas.mul(keepBAS).div(keepBASMax);            IERC20_1(bas).safeTransfer(                IController(controller).treasury(),                _keepBAS            );            path[0] = bas;            path[1] = dai;            _swapUniswapWithPath(path, _bas.sub(_keepBAS));        }        uint256 _dai = IERC20_1(dai).balanceOf(address(this));        if (_dai > 0) {            path[0] = dai;            path[1] = token1;            _swapUniswapWithPath(path, _dai.div(2));        }        _dai = IERC20_1(dai).balanceOf(address(this));        uint256 _token1 = IERC20_1(token1).balanceOf(address(this));        if (_dai > 0 && _token1 > 0) {            IERC20_1(dai).safeApprove(univ2Router2, 0);            IERC20_1(dai).<mask0>;            IERC20_1(token1).safeApprove(univ2Router2, 0);            IERC20_1(token1).safeApprove(univ2Router2, _token1);            UniswapRouterV2(univ2Router2).addLiquidity(                dai,                token1,                _dai,                _token1,                0,                0,                address(this),                now + 60            );            IERC20_1(dai).transfer(                IController(controller).treasury(),                IERC20_1(dai).balanceOf(address(this))            );            IERC20_1(token1).safeTransfer(                IController(controller).treasury(),                IERC20_1(token1).balanceOf(address(this))            );        }        _distributePerformanceFeesAndDeposit();    }"