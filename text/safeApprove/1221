"function _approveAndSwap(        IERC20 from,        IERC20 to,        uint256 amount,        SwapData calldata swapData    ) internal virtual returns (uint256) {        if(amount == 0)            return 0;        if(amount < type(uint256).max) {            from.safeApprove(address(uniswapRouter), amount);        } else {            amount = 0;        }        SwapAction action = SwapAction(swapData.path.toUint8(0));        uint256 result;        if (action == SwapAction.UNI_V2_DIRECT) {             address[] memory path = new address[](2);            result = _swapV2(from, to, amount, swapData.slippage, path);        } else if (action == SwapAction.UNI_V2_WETH) {             address[] memory path = new address[](3);            path[1] = WETH;            result = _swapV2(from, to, amount, swapData.slippage, path);        } else if (action == SwapAction.UNI_V2) {             address[] memory path = _getV2Path(swapData.path);            result = _swapV2(from, to, amount, swapData.slippage, path);        } else if (action == SwapAction.UNI_V3_DIRECT) {             result = _swapDirectV3(from, to, amount, swapData.slippage, swapData.path);        } else if (action == SwapAction.UNI_V3_WETH) {             bytes memory wethPath = _getV3WethPath(swapData.path);            result = _swapV3(from, to, amount, swapData.slippage, wethPath);        } else if (action == SwapAction.UNI_V3) {             require(swapData.path.length > MIN_V3_PATH, \"SwapHelper::_approveAndSwap: Path too short\");            uint256 actualpathSize = swapData.path.length - ACTION_SIZE;            require((actualpathSize - FEE_SIZE) % NEXT_OFFSET == 0 &&                actualpathSize <= MAX_V3_PATH,                \"SwapHelper::_approveAndSwap: Bad V3 path\");            result = _swapV3(from, to, amount, swapData.slippage, swapData.path[ACTION_SIZE:]);        } else {            revert(\"SwapHelper::_approveAndSwap: No action\");        }        if (from.allowance(address(this), address(uniswapRouter)) > 0) {            from.<mask0>;        }        return result;    }"