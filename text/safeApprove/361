"function depositFor(        uint256 _pid,        uint256 _amount,        address _user    ) public override onlyLendingMarket nonReentrant returns (bool) {        PoolInfo storage pool = poolInfo[_pid];        IERC20(pool.lpToken).safeTransferFrom(            msg.sender,            address(this),            _amount        );        (, , , , , bool shutdown) = IOriginConvexBooster(originConvexBooster)            .poolInfo(pool.originConvexPid);        require(!shutdown, \"!convex shutdown\");        require(!pool.shutdown, \"!shutdown\");        IERC20(pool.lpToken).<mask0>;        IERC20(pool.lpToken).safeApprove(originConvexBooster, _amount);        IOriginConvexBooster(originConvexBooster).deposit(            pool.originConvexPid,            _amount,            true        );        IConvexRewardPool(pool.rewardCrvPool).stake(_user);        IConvexRewardPool(pool.rewardCvxPool).stake(_user);        IVirtualBalanceWrapper(pool.virtualBalance).stakeFor(_user, _amount);        emit Deposited(_user, _pid, _amount);        return true;    }"