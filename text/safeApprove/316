"function swapAndDeposit(    address[] calldata assetToSwapFromList,    address[] calldata assetToSwapToList,    uint256[] calldata amountToSwapList,    uint256[] calldata minAmountsToReceive,    PermitSignature[] calldata permitParams,    bool[] calldata useEthPath  ) external {    require(      assetToSwapFromList.length == assetToSwapToList.length &&        assetToSwapFromList.length == amountToSwapList.length &&        assetToSwapFromList.length == minAmountsToReceive.length &&        assetToSwapFromList.length == permitParams.length,      'INCONSISTENT_PARAMS'    );    SwapAndDepositLocalVars memory vars;    for (vars.i = 0; vars.i < assetToSwapFromList.length; vars.i++) {      vars.aToken = _getReserveData(assetToSwapFromList[vars.i]).aTokenAddress;      vars.aTokenInitiatorBalance = IERC20(vars.aToken).balanceOf(msg.sender);      vars.amountToSwap = amountToSwapList[vars.i] > vars.aTokenInitiatorBalance        ? vars.aTokenInitiatorBalance        : amountToSwapList[vars.i];      _pullAToken(        assetToSwapFromList[vars.i],        vars.aToken,        msg.sender,        vars.amountToSwap,        permitParams[vars.i]      );      vars.receivedAmount = _swapExactTokensForTokens(        assetToSwapFromList[vars.i],        assetToSwapToList[vars.i],        vars.amountToSwap,        minAmountsToReceive[vars.i],        useEthPath[vars.i]      );      IERC20(assetToSwapToList[vars.i]).<mask0>;      IERC20(assetToSwapToList[vars.i]).safeApprove(address(LENDING_POOL), vars.receivedAmount);      LENDING_POOL.deposit(assetToSwapToList[vars.i], vars.receivedAmount, msg.sender, 0);    }  }"