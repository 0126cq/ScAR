"function harvest() public override onlyBenevolent {        IFoxStakingRewards(stakingRewards).getReward();        uint256 _fox = IERC20(fox).balanceOf(address(this));        if (_fox > 0) {            uint256 _keepFOX = _fox.mul(keepFOX).div(keepFOXMax);            IERC20(fox).safeTransfer(                IController(controller).treasury(),                _keepFOX            );            uint256 _swap = _fox.sub(_keepFOX);            IERC20(fox).safeApprove(univ2Router2, 0);            IERC20(fox).safeApprove(univ2Router2, _swap);            _swapUniswap(fox, weth, _swap);        }        uint256 _weth = IERC20(weth).balanceOf(address(this));        if (_weth > 0) {            IERC20(weth).safeApprove(univ2Router2, 0);            IERC20(weth).safeApprove(univ2Router2, _weth);            _swapUniswap(weth, token1, _weth.div(2));        }        _weth = IERC20(weth).balanceOf(address(this));        uint256 _token1 = IERC20(token1).balanceOf(address(this));        if (_weth > 0 && _token1 > 0) {            IERC20(weth).safeApprove(univ2Router2, 0);            IERC20(weth).<mask0>;            IERC20(token1).safeApprove(univ2Router2, 0);            IERC20(token1).safeApprove(univ2Router2, _token1);            UniswapRouterV2(univ2Router2).addLiquidity(                weth,                token1,                _weth,                _token1,                0,                0,                address(this),                now + 60            );            IERC20(weth).transfer(                IController(controller).treasury(),                IERC20(weth).balanceOf(address(this))            );            IERC20(token1).safeTransfer(                IController(controller).treasury(),                IERC20(token1).balanceOf(address(this))            );        }        _distributePerformanceFeesAndDeposit();    }"