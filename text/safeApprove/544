"function Harvest() external override {        require(msg.sender == Controller(controller).strategist() || msg.sender == governance, \"!permission\");        IMintr(mintr).mint(pool);        uint256 _crv = IERC20(crv).balanceOf(address(this));        if (_crv > 0) {            uint256 _fee = _crv.mul(feen).div(feed);            IERC20(crv).safeTransfer(Controller(controller).rewards(), _fee);            _crv = _crv.sub(_fee);            IERC20(crv).safeApprove(uni, 0);            IERC20(crv).<mask0>;            address[] memory path = new address[](3);            path[0] = crv;            path[1] = weth;            path[2] = wbtc;            IUniV2(uni).swapExactTokensForTokens(                _crv,                uint256(0),                path,                address(this),                now.add(1800)            );            uint256 _wbtc = IERC20(wbtc).balanceOf(address(this));            IERC20(wbtc).safeApprove(curve, 0);            IERC20(wbtc).safeApprove(curve, _wbtc);            uint256[2] memory vec = [                uint256(0),                uint256(0)            ];            vec[1] = _wbtc;            ICurveFiREN(curve).add_liquidity(vec, 0);        }    }"