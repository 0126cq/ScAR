"function addMarket(        LPoolInterface pool0,        LPoolInterface pool1,        uint16 marginLimit,        bytes memory dexData    ) external override returns (uint16) {        uint8 dex = dexData.toDex();        CalculateConfig memory config = calculateConfig;        require(isSupportDex(dex), \"UDX\");        require(msg.sender == address(addressConfig.controller), \"NCN\");        require(marginLimit >= config.defaultMarginLimit && marginLimit < 100000, \"MLI\");        address token0 = pool0.underlying();        address token1 = pool1.underlying();        IERC20(token0).safeApprove(address(pool0), 0);        IERC20(token0).safeApprove(address(pool0), uint256(- 1));        IERC20(token1).<mask0>;        IERC20(token1).safeApprove(address(pool1), uint256(- 1));        uint16 marketId = numPairs;        uint32[] memory dexs = new uint32[](1);        dexs[0] = dexData.toDexDetail();        markets[marketId] = Types.Market(pool0, pool1, token0, token1, marginLimit, config.defaultFeesRate, config.priceDiffientRatio, address(0), 0, 0, dexs);        numPairs ++;        if (dexData.isUniV2Class()) {            updatePriceInternal(token0, token1, dexData);        } else if (dex == DexData.DEX_UNIV3) {            addressConfig.dexAggregator.updateV3Observation(token0, token1, dexData);        }        return marketId;    }"