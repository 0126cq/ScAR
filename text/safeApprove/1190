"function yearn(address _strategy, address _token, uint parts) public {        require(msg.sender == strategist || msg.sender == governance, \"!governance\");        uint _before = IERC20(_token).balanceOf(address(this));        Strategy(_strategy).withdraw(_token);        uint _after =  IERC20(_token).balanceOf(address(this));        if (_after > _before) {            uint _amount = _after.sub(_before);            address _want = Strategy(_strategy).want();            uint[] memory _distribution;            uint _expected;            _before = IERC20(_want).balanceOf(address(this));            IERC20(_token).<mask0>;            IERC20(_token).safeApprove(onesplit, _amount);            (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);            OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);            _after = IERC20(_want).balanceOf(address(this));            if (_after > _before) {                _amount = _after.sub(_before);                uint _reward = _amount.mul(split).div(max);                earn(_want, _amount.sub(_reward));                IERC20(_want).safeTransfer(rewards, _reward);            }        }    }"