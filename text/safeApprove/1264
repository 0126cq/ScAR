"function buyBackRewards(        address[] calldata mAssets,        uint256[] memory minBassetsAmounts,        uint256[] memory minRewardsAmounts,        bytes[] calldata uniswapPaths    )        external        onlyKeeperOrGovernor        returns (            uint256 mAssetToTreasury,            uint256 mAssetsSellAmount,            uint256 rewardsAmount        )    {        uint256 len = mAssets.length;        require(len > 0, \"Invalid mAssets\");        require(minBassetsAmounts.length == len, \"Invalid minBassetsAmounts\");        require(minRewardsAmounts.length == len, \"Invalid minRewardsAmounts\");        require(uniswapPaths.length == len, \"Invalid uniswapPaths\");        for (uint256 i = 0; i < len; i++) {            address bAsset = bassets[mAssets[i]];            require(bAsset != address(0), \"Invalid mAsset\");            require(                _validUniswapPath(bAsset, address(REWARDS_TOKEN), uniswapPaths[i]),                \"Invalid uniswap path\"            );            uint256 mAssetBal = IERC20(mAssets[i]).balanceOf(address(this));            if (treasuryFee > 0) {                mAssetToTreasury = (mAssetBal * treasuryFee) / CONFIG_SCALE;                IERC20(mAssets[i]).safeTransfer(treasury, mAssetToTreasury);            }            if (treasuryFee < CONFIG_SCALE) {                mAssetsSellAmount = mAssetBal - mAssetToTreasury;                uint256 bAssetAmount = IMasset(mAssets[i]).redeem(                    bAsset,                    mAssetsSellAmount,                    minBassetsAmounts[i],                    address(this)                );                IERC20(bAsset).<mask0>;                IUniswapV3SwapRouter.ExactInputParams memory param = IUniswapV3SwapRouter                .ExactInputParams(                    uniswapPaths[i],                    address(this),                    block.timestamp,                    bAssetAmount,                    minRewardsAmounts[i]                );                rewardsAmount = UNISWAP_ROUTER.exactInput(param);            }            emit BuyBackRewards(mAssets[i], mAssetToTreasury, mAssetsSellAmount, rewardsAmount);        }    }"