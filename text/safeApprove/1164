"function initializeMetaSwap(        IERC20[] memory _pooledTokens,        uint8[] memory decimals,        string memory lpTokenName,        string memory lpTokenSymbol,        uint256 _a,        uint256 _fee,        uint256 _adminFee,        address lpTokenTargetAddress,        ISwap baseSwap    ) external virtual initializer {        Swap.initialize(            _pooledTokens,            decimals,            lpTokenName,            lpTokenSymbol,            _a,            _fee,            _adminFee,            lpTokenTargetAddress        );        metaSwapStorage.baseSwap = baseSwap;        metaSwapStorage.baseVirtualPrice = baseSwap.getVirtualPrice();        metaSwapStorage.baseCacheLastUpdated = block.timestamp;        {            uint8 i;            for (; i < 32; i++) {                try baseSwap.getToken(i) returns (IERC20 token) {                    metaSwapStorage.baseTokens.push(token);                    token.safeApprove(address(baseSwap), MAX_UINT256);                } catch {                    break;                }            }            require(i > 1, \"baseSwap must pool at least 2 tokens\");        }        IERC20 baseLPToken = _pooledTokens[_pooledTokens.length - 1];        require(            LPToken(address(baseLPToken)).owner() == address(baseSwap),            \"baseLPToken is not owned by baseSwap\"        );        baseLPToken.<mask0>;    }"