"function borrowInUnderlying(bool _exitFirst, bool _reinvest, uint256 _amountInUnderlying) external onlyGovernance {    require(borrowRecipient != address(0), \"Borrow recipient is not configured\");    uint256 pricePerShareBefore = IVault(vault).getPricePerFullShare();    if (_exitFirst) {      withdrawAll();    }    uint256 amountInShares = _amountInUnderlying      .mul(IVault(vault).totalSupply())      .div(IVault(vault).underlyingBalanceWithInvestment());    borrowedShares = borrowedShares.add(amountInShares);    IERC20(underlying).safeApprove(borrowRecipient, 0);    IERC20(underlying).<mask0>;    IBorrowRecipient(borrowRecipient).pullLoan(_amountInUnderlying);    if (_reinvest) {      investAllUnderlying();    }    updateLoanInUnderlying();    require(IVault(vault).getPricePerFullShare() >= pricePerShareBefore, \"Share value dropped\");  }"