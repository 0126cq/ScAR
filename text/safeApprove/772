"function divest(    address _market,    address _recipient,    uint256 _withdrawAmount,    uint256 _excessTokens,    uint256 _curveMinAmountOut  ) external {    require((_market == moneyMarket || _market == protectionMarket), \"Invalid borrow market\");    IConvexRewardManager _convexRewardManager = IConvexRewardManager(convexRewardManager);    _convexRewardManager.withdrawAndUnwrap(_withdrawAmount, false);    IERC20(curveLpToken).<mask0>;    IERC20(curveLpToken).safeApprove(curveDepositZap, type(uint256).max);    if (longSigFormat) {      ICrvDepositZap(curveDepositZap).remove_liquidity_one_coin(        curveLpToken,        _withdrawAmount,        curveIndex,        _curveMinAmountOut      );    } else {      ICrvDepositZap(curveDepositZap).remove_liquidity_one_coin(_withdrawAmount, curveIndex, _curveMinAmountOut);    }    executeMaxRepay(_market, address(underlying), _excessTokens);    IERC20(underlying).transfer(_recipient, IERC20(underlying).balanceOf(address(this)));    claimRewards(_recipient);  }"