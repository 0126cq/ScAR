"function _removeLiquidity(        uint256 lpBalance,        uint8 index,        uint256 minAmount    ) internal override {        require(index < 4, \"INVALID_INDEX\");        uint256[] memory balances = new uint256[](4);        for (uint256 i = 0; i < balances.length; i++) {            if (i == index) continue;            IERC20 inToken = IERC20(_getCoinAtIndex(i));            balances[i] = inToken.balanceOf(address(this));        }        IStableSwap swap = IStableSwap(SWAP_ADDRESS);        swap.remove_liquidity(            lpBalance,            [uint256(0), uint256(0), uint256(0), uint256(0)]        );        for (uint256 i = 0; i < balances.length; i++) {            if (i == index) continue;            IERC20 inToken = IERC20(_getCoinAtIndex(i));            uint256 balanceDelta =                inToken.balanceOf(address(this)).sub(balances[i]);            inToken.safeApprove(address(swap), 0);            inToken.<mask0>;            swap.exchange(int128(i), index, balanceDelta, 0);        }        uint256 underlyerBalance =            IERC20(_getCoinAtIndex(index)).balanceOf(address(this));        require(underlyerBalance >= minAmount, \"UNDER_MIN_AMOUNT\");    }"