"function _mint(        address to,        uint256 quantity,        bytes memory _data,        uint256 kind,        bool safe    ) internal {        uint256 startTokenId;        uint256 _current;        if (kind == 1){            startTokenId = _currentIndexW;            _current = _currentIndexW;            require (startTokenId + quantity <= _maxIndexW + 1, \"Sold out !\");        }else if (kind == 2){            startTokenId = _currentIndexM;            _current = _currentIndexM;            require (startTokenId + quantity <= _maxIndexM + 1, \"Sold out !\");        }else {            startTokenId = _currentIndexG;            _current = _currentIndexG;            require (startTokenId + quantity <= _maxIndexG + 1, \"Sold out !\");        }        if (to == address(0)) revert MintToZeroAddress();        if (quantity == 0) revert MintZeroQuantity();        <mask0>;        unchecked {            _addressData[to].balance += uint64(quantity);            _addressData[to].numberMinted += uint64(quantity);            _ownerships[startTokenId].addr = to;            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);            uint256 updatedIndex = startTokenId;            uint256 end = updatedIndex + quantity;            if (safe && to.isContract()) {                do {                    emit Transfer(address(0), to, updatedIndex);                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {                        revert TransferToNonERC721ReceiverImplementer();                    }                } while (updatedIndex != end);                if (_current != startTokenId) revert();            } else {                do {                    emit Transfer(address(0), to, updatedIndex++);                } while (updatedIndex != end);            }            _current = updatedIndex;        }        _currentIndex = _currentIndex + quantity;        if (kind == 1){            _currentIndexW = _currentIndexW + quantity;        }else if (kind == 2){            _currentIndexM = _currentIndexM + quantity;        }else {            _currentIndexG = _currentIndexG + quantity;        }        _afterTokenTransfers(address(0), to, startTokenId, quantity);        _ownerOf[startTokenId] = to;    }"