"function _transfer(        address from,        address to,        uint256 tokenId,        TokenData memory token    ) internal virtual {        if (token.owner != from) revert TransferFromIncorrectOwner();        if (to == address(0)) revert TransferToZeroAddress();        <mask0>;        _approve(address(0), tokenId, token);        unchecked {            uint256 nextTokenId = tokenId + 1;            if (_exists(nextTokenId)) {                TokenData storage nextToken = _tokens[nextTokenId];                if (nextToken.owner == address(0)) {                    nextToken.owner = token.owner;                    nextToken.aux = token.aux;                }            }        }        TokenData storage newToken = _tokens[tokenId];        newToken.owner = to;        newToken.aux = _calculateAux(from, to, tokenId, token.aux);        emit Transfer(from, to, tokenId);        _afterTokenTransfers(from, to, tokenId, 1);    }"