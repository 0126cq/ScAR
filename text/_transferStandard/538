"function _tokenTransfer(address sender, address recipient, uint256 amount) private {        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){            removeAllFee();        }        else{            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");        }        uint256 burnAmt = amount.mul(_burnFee).div(100);        uint256 fundingAmt = amount.mul(_fundingFee).div(100);        uint256 fundingPiece = fundingAmt.div(6);        if (_isExcluded[sender] && !_isExcluded[recipient]) {            _transferFromExcluded(sender, recipient, (amount.sub(burnAmt).sub(fundingAmt)));        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {            _transferToExcluded(sender, recipient, (amount.sub(burnAmt).sub(fundingAmt)));        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {            _transferStandard(sender, recipient, (amount.sub(burnAmt).sub(fundingAmt)));        } else if (_isExcluded[sender] && _isExcluded[recipient]) {            _transferBothExcluded(sender, recipient, (amount.sub(burnAmt).sub(fundingAmt)));        } else {            _transferStandard(sender, recipient, (amount.sub(burnAmt).sub(fundingAmt)));        }        _taxFee = 0;        _liquidityFee = 0;        _fundingFee = 0;        <mask0>;        _transferStandard(sender, communityAddress, fundingPiece.mul(2));        _transferStandard(sender, DevWallet, fundingPiece.mul(2));        _taxFee = _previousTaxFee;        _liquidityFee = _previousLiquidityFee;        _fundingFee = _previousFundingFee;        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient])            restoreAllFee();    }"