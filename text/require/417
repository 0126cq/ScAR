"function processMultiProofCalldata(        bytes32[] calldata proof,        bool[] calldata proofFlags,        bytes32[] memory leaves    ) internal pure returns (bytes32 merkleRoot) {        uint256 leavesLen = leaves.length;        uint256 totalHashes = proofFlags.length;        <mask0>;        bytes32[] memory hashes = new bytes32[](totalHashes);        uint256 leafPos = 0;        uint256 hashPos = 0;        uint256 proofPos = 0;        for (uint256 i = 0; i < totalHashes; i++) {            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];            hashes[i] = _hashPair(a, b);        }        if (totalHashes > 0) {            return hashes[totalHashes - 1];        } else if (leavesLen > 0) {            return leaves[0];        } else {            return proof[0];        }    }"