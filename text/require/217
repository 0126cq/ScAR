"function mk_contract_address(address a, uint256 n) constant internal returns (address rlp) {        <mask0>;        uint256 nonce_bytes;        uint256 nonce_rlp_len;        if (0 < n && n < MAX_SINGLE_BYTE) {            nonce_bytes = 1;            nonce_rlp_len = 1;        } else {            nonce_bytes = count_bytes(n);            nonce_rlp_len = nonce_bytes + 1;        }        uint256 tot_bytes = 1 + ADDRESS_BYTES + nonce_rlp_len;        uint256 word = ((192 + tot_bytes) * 256**31) +                       ((128 + ADDRESS_BYTES) * 256**30) +                       (uint256(a) * 256**10);        if (0 < n && n < MAX_SINGLE_BYTE) {            word += n * 256**9;        } else {            word += (128 + nonce_bytes) * 256**9;            word += n * 256**(9 - nonce_bytes);        }        uint256 hash;        assembly {            let mem_start := mload(0x40)                    mstore(0x40, add(mem_start, 0x20))              mstore(mem_start, word)                         hash := sha3(mem_start,                         add(tot_bytes, 1))             }        return address(hash);    }"