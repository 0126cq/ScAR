"function promote(    address vault,    string memory version,    string memory metadata,    VaultStatus status  ) public {    require(msg.sender == governance || msg.sender == strategistGuild || msg.sender == developer, \"!auth\");    verifyMetadata(metadata);    VaultStatus actualStatus = status;    if (msg.sender == developer) {      actualStatus = VaultStatus.experimental;    }    VaultInfo memory existedVaultInfo = productionVaultInfoByVault[vault];    if (existedVaultInfo.vault != address(0)) {      require(        vault == existedVaultInfo.vault && <mask0> == keccak256(bytes(existedVaultInfo.version)),        \"BadgerRegistry: vault info changed. Please demote before promote changed vault info\"      );      productionVaultInfoByVault[vault].status = actualStatus;    } else {      productionVaultInfoByVault[vault] = VaultInfo({        vault: vault,        version: version,        status: actualStatus,        metadata: metadata      });    }    require(uint256(actualStatus) >= uint256(existedVaultInfo.status), \"BadgerRegistry: Vault is not being promoted\");    bool addedToVersionStatusSet = productionVaults[version][actualStatus].add(vault);    if (addedToVersionStatusSet) {      if (uint256(actualStatus) > 0) {        for (uint256 status_ = uint256(actualStatus); status_ > 0; --status_) {          productionVaults[version][VaultStatus(status_ - 1)].remove(vault);        }      }      emit PromoteVault(msg.sender, version, metadata, vault, actualStatus);    }  }"