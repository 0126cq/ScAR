"function getNewMarketParameters(address underlying) external override returns (NewMarketParameters memory p) {        p.config.borrowIsolated = true;        p.config.collateralFactor = uint32(0);        p.config.borrowFactor = type(uint32).max;        p.config.twapWindow = type(uint24).max;        if (underlying == referenceAsset) {            p.pricingType = PRICINGTYPE__PEGGED;            p.pricingParameters = uint32(0);        } else if (pTokenLookup[underlying] != address(0)) {            p.pricingType = PRICINGTYPE__FORWARDED;            p.pricingParameters = uint32(0);            p.config.collateralFactor = underlyingLookup[pTokenLookup[underlying]].collateralFactor;        } else {            uint24 fee;            if (IUniswapV3Factory(uniswapFactory).getPool(underlying, referenceAsset, 3000) != address(0)) fee = 3000;            else if (IUniswapV3Factory(uniswapFactory).getPool(underlying, referenceAsset, 500) != address(0)) fee = 500;            else if (IUniswapV3Factory(uniswapFactory).getPool(underlying, referenceAsset, 10000) != address(0)) fee = 10000;            else revert(\"e/no-uniswap-pool-avail\");            p.pricingType = PRICINGTYPE__UNISWAP3_TWAP;            p.pricingParameters = uint32(fee);            address pool = computeUniswapPoolAddress(underlying, fee);            require(IUniswapV3Factory(uniswapFactory).getPool(underlying, referenceAsset, fee) == pool, \"e/bad-uniswap-pool-addr\");            try IUniswapV3Pool(pool).increaseObservationCardinalityNext(MIN_UNISWAP3_OBSERVATION_CARDINALITY) {            } catch Error(string memory err) {                if (keccak256(bytes(err)) == <mask0>) revert(\"e/risk/uniswap-pool-not-inited\");                revert(string(abi.encodePacked(\"e/risk/uniswap/\", err)));            } catch (bytes memory returnData) {                revertBytes(returnData);            }        }    }"