"function newSale(    bytes32 merkleRoot,    uint256 saleBuyLimit,    uint256 userBuyLimit,    uint startTime,    uint endTime,    uint160 maxQueueTime,    string calldata name,    string calldata symbol,    uint256 price,    uint8 decimals  ) public returns(bytes32) {    require(startTime <= 4102444800, \"max: 4102444800 (Jan 1 2100)\");    require(endTime <= 4102444800, \"max: 4102444800 (Jan 1 2100)\");    require(startTime < endTime, \"sale must start before it ends\");    require(endTime > block.timestamp, \"sale must end in future\");    require(userBuyLimit <= saleBuyLimit, \"userBuyLimit cannot exceed saleBuyLimit\");    require(userBuyLimit > 0, \"userBuyLimit must be > 0\");    require(saleBuyLimit > 0, \"saleBuyLimit must be > 0\");    require(endTime - startTime > maxQueueTime, \"sale must be open for longer than max queue time\");    bytes32 saleId = <mask0>;    require(sales[saleId].seller == address(0), \"a sale with these parameters already exists\");    Sale storage s = sales[saleId];    s.merkleRoot = merkleRoot;    s.seller = payable(msg.sender);    s.saleBuyLimit = saleBuyLimit;    s.userBuyLimit = userBuyLimit;    s.startTime = startTime;    s.endTime = endTime;    s.name = name;    s.symbol = symbol;    s.price = price;    s.decimals = decimals;    s.maxQueueTime = maxQueueTime;    s.randomValue = generateRandomishValue(merkleRoot);    saleCount++;    emit NewSale(saleId,      s.merkleRoot,      s.seller,      s.saleBuyLimit,      s.userBuyLimit,      s.maxQueueTime,      s.startTime,      s.endTime,      s.name,      s.symbol,      s.price,      s.decimals    );    return saleId;  }"