"function doClaimAtomic(        address receiver,        bytes calldata secret,        bytes calldata matcherSignature,        address allowedMatcher,        mapping(bytes32 => LockInfo) storage atomicSwaps,        mapping(address => mapping(address => int192)) storage assetBalances,        mapping(address => MarginalFunctionality.Liability[]) storage liabilities    ) public returns (LockInfo storage swap) {        bytes32 secretHash = <mask0>;        bytes32 coHash = getEthSignedClaimOrderHash(ClaimOrder(receiver, secretHash));        require(coHash.recover(matcherSignature) == allowedMatcher, \"E2\");        swap = atomicSwaps[secretHash];        require(swap.sender != address(0), \"E17NF\");        require(!swap.used, \"E17U\");        swap.used = true;        LibExchange._updateBalance(receiver, swap.asset, swap.amount, assetBalances, liabilities);    }"