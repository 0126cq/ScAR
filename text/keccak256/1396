"function postIncomingMessages(        string calldata fromSchainName,        uint256 startingCounter,        Message[] calldata messages,        Signature calldata sign    )        external        override(IMessageProxy, MessageProxy)        messageInProgressLocker    {        uint256 gasTotal = gasleft();        bytes32 fromSchainHash = <mask0>;        require(_checkSchainBalance(fromSchainHash), \"Schain wallet has not enough funds\");        require(connectedChains[fromSchainHash].inited, \"Chain is not initialized\");        require(messages.length <= MESSAGES_LENGTH, \"Too many messages\");        require(            startingCounter == connectedChains[fromSchainHash].incomingMessageCounter,            \"Starting counter is not equal to incoming message counter\");        require(_verifyMessages(            fromSchainName,            _hashedArray(messages, startingCounter, fromSchainName), sign),            \"Signature is not verified\");        uint additionalGasPerMessage =             (gasTotal - gasleft() + headerMessageGasCost + messages.length * messageGasCost) / messages.length;        uint notReimbursedGas = 0;        connectedChains[fromSchainHash].incomingMessageCounter += messages.length;        for (uint256 i = 0; i < messages.length; i++) {            gasTotal = gasleft();            if (isContractRegistered(bytes32(0), messages[i].destinationContract)) {                address receiver = _getGasPayer(fromSchainHash, messages[i], startingCounter + i);                _callReceiverContract(fromSchainHash, messages[i], startingCounter + i);                notReimbursedGas += communityPool.refundGasByUser(                    fromSchainHash,                    payable(msg.sender),                    receiver,                    gasTotal - gasleft() + additionalGasPerMessage                );            } else {                _callReceiverContract(fromSchainHash, messages[i], startingCounter + i);                notReimbursedGas += gasTotal - gasleft() + additionalGasPerMessage;            }        }        communityPool.refundGasBySchainWallet(fromSchainHash, payable(msg.sender), notReimbursedGas);    }"