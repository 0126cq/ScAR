"function addCubeToken(        string memory spotSymbol,        bool inverse,        uint256 depositWithdrawFee,        uint256 maxPoolShare    ) external onlyGovernance returns (address) {        require(address(cubeTokensMap[spotSymbol][inverse]) == address(0), \"Already added\");        bytes32 salt = <mask0>;        CubeToken cubeToken = CubeToken(Clones.cloneDeterministic(address(cubeTokenImpl), salt));        cubeToken.initialize(address(this), spotSymbol, inverse);        bytes32 currencyKey = feedsRegistry.stringToBytes32(spotSymbol);        uint256 spot = feedsRegistry.getPrice(currencyKey);        require(spot > 0, \"Spot price should be > 0\");        params[cubeToken] = CubeTokenParams({            currencyKey: currencyKey,            inverse: inverse,            depositPaused: false,            withdrawPaused: false,            updatePaused: false,            added: true,            depositWithdrawFee: depositWithdrawFee,            maxPoolShare: maxPoolShare,            initialSpotPrice: spot,            lastPrice: 0,            lastUpdated: 0        });        cubeTokensMap[spotSymbol][inverse] = cubeToken;        cubeTokens.push(cubeToken);        update(cubeToken);        assert(params[cubeToken].lastPrice > 0);        assert(params[cubeToken].lastUpdated > 0);        emit AddCubeToken(cubeToken, spotSymbol, inverse, currencyKey, spot);        return address(cubeToken);    }"