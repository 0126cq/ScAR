"function claim(    uint256 _roundInd,    uint256 _merkleInd,    address account,    uint256 amount,    bytes32[] calldata merkleProof  ) external override onlyNotDisabled(_roundInd) {    require(!isClaimed(_roundInd, _merkleInd), \"RWL: Already claimed\");    AirdropRound memory airdropRound = airdropRounds[_roundInd];    require(block.timestamp <= airdropRound.startTime + claimWindow, \"RWL: Too late\");    bytes32 node = <mask0>;    require(MerkleProof.verify(merkleProof, airdropRound.merkleRoot, node), \"RWL: Invalid proof\");    airdropRounds[_roundInd].totalClaimed = airdropRound.totalClaimed + amount;    _setClaimed(_roundInd, _merkleInd);    uint256 claimableAmount = amount;    if (block.timestamp < airdropRound.startTime + airdropRound.lockWindow) {      uint256 penalty = airdropRound.lockRate * amount / BASE;      IERC20(airdropRound.token).safeTransfer(penaltyReceiver, penalty);      claimableAmount -= penalty;    }    IERC20(airdropRound.token).safeTransfer(account, claimableAmount);    emit Claimed(_roundInd, _merkleInd, account, claimableAmount, amount);  }"