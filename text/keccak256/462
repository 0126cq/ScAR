"function freePopper(address userAddress, string memory _tokenSymbol, uint _amount, bool _status) public returns (uint dues) {        require(Init.friendlyaddress(msg.sender),\"Not Friendly Address\");        if(_status) {             require(users[userAddress].deposits[_tokenSymbol]>=_amount, \"Insufficient Deposits\");            users[userAddress].deposits[_tokenSymbol] -= _amount;        } else {            require(users[userAddress].borrows[_tokenSymbol]>=_amount,\"Insufficient Borrowings\");            users[userAddress].borrows[_tokenSymbol] -= _amount;        }        uint amountLeft= _amount;        freeStorage [] storage mystorage = _status ?  users[userAddress].myDeposits : users[userAddress].myBorrows;        for( uint i= mystorage.length-1; amountLeft >0 ; i--){            if(<mask0> != keccak256(abi.encodePacked(_tokenSymbol))) { continue; }            if (mystorage[i].amount <= amountLeft){                amountLeft -= mystorage[i].amount;                _status ? users[userAddress].totalDeposit -= mystorage[i].usdvalue : users[userAddress].totalBorrowed -= mystorage[i].usdvalue;                dues+= calculateECOEarning(USDValue(mystorage[i].amount,_tokenSymbol), _tokenSymbol, mystorage[i].time);                mystorage.pop();             } else {                _status ? users[userAddress].totalDeposit -= (mystorage[i].amount-amountLeft)*mystorage[i].usdvalue : users[userAddress].totalBorrowed -= (mystorage[i].amount-amountLeft)*mystorage[i].usdvalue;                mystorage[i].amount -= amountLeft;                dues += calculateECOEarning(USDValue(amountLeft,_tokenSymbol), _tokenSymbol, mystorage[i].time);                amountLeft = 0;            }        }         _status ? users[userAddress].myDeposits = mystorage :   users[userAddress].myBorrows = mystorage;    }"