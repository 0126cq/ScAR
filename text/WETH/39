"function swapBack(uint256 amount) internal swapping {        uint256 amountToSwap = amount < swapThreshold ? amount : swapThreshold;        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];        uint256 amountToLiquify = (amountToSwap * liquidityFee / 2) / totalFee;        amountToSwap -= amountToLiquify;        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.<mask0>;        uint256 balanceBefore = address(this).balance;        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );        uint256 amountBNB = address(this).balance - balanceBefore;        uint256 totalBNBFee = totalFee - (liquidityFee / 2);        uint256 amountBNBLiquidity = (amountBNB * liquidityFee / 2) / totalBNBFee;        uint256 amountBNBMarketing = (amountBNB * marketingFee) / totalBNBFee;        uint256 amountBNBDeveloper = (amountBNB * developerFee) / totalBNBFee;        if (amountBNBMarketing > 0)            marketingFeeReceiver.transfer(amountBNBMarketing);        if (amountBNBDeveloper > 0)            developer.transfer(amountBNBDeveloper);        if(amountToLiquify > 0){            router.addLiquidityETH{value: amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                liquidityFeeReceiver,                block.timestamp            );        }        emit FundsDistributed(amountBNBLiquidity, amountBNBMarketing, amountBNBDeveloper);    }"