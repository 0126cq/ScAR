"function launch(address[] calldata airdropWallets, uint256[] calldata amounts) external onlyOwner {        require(!tradingActive, \"Trading is already active, cannot relaunch.\");        require(airdropWallets.length < 200, \"Can only airdrop 200 wallets per txn due to gas limits\");         removeAllFee();        buyOrSellSwitch = TRANSFER;        for(uint256 i = 0; i < airdropWallets.length; i++){            address wallet = airdropWallets[i];            uint256 amount = amounts[i];        }        _tokenTransfer(msg.sender, address(this), balanceOf(msg.sender));        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);        excludeFromMaxTransaction(address(_uniswapV2Router), true);        uniswapV2Router = _uniswapV2Router;        _approve(address(this), address(uniswapV2Router), balanceOf(address(this)));        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.<mask0>);        excludeFromMaxTransaction(address(uniswapV2Pair), true);        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);        require(address(this).balance > 0, \"Must have ETH on contract to launch\");        liquidityAddress = payable(msg.sender);         addLiquidity(balanceOf(address(this)), address(this).balance);        liquidityAddress = payable(address(0xdead));        restoreAllFee();        enableTrading();    }"