"function _transfer(address from, address to, uint256 amount) private {        require(from != address(0), \"ERC20: transfer from the zero address\");        require(to != address(0), \"ERC20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        require(!isBot[from]);        if (maxWalletOn == true && ! _isMaxWalletExclude[to]) {            require(balanceOf(to) + amount <= _maxWallet, \"Max amount of tokens for wallet reached\");        }        if(_initiateTrades == true) {            IUniswapV2Router02 _uniV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);            uniV2Router = _uniV2Router;            uniV2Pair = IUniswapV2Factory(_uniV2Router.factory()).getPair(address(this), _uniV2Router.<mask0>);            activeTradingBlock = block.number;            _isMaxWalletExclude[address(uniV2Pair)] = true;            _isMaxWalletExclude[address(uniV2Router)] = true;            limitsOn = true;            maxWalletOn = true;            swapAndLiquifyEnabled = true;            _initiateTrades = false;        }        if(limitsOn){            if (from != owner() && to != owner() && to != address(0) && to != dead && !inSwapAndLiquify) {                if(from != owner() && to != uniV2Pair) {                    for (uint x = 0; x < 2; x++) {                    if(block.number == activeTradingBlock + x) {                        isSniper[to] = true;                        }                    }                }            }        }        uint256 totalTokensToSwap = tokensForLiquidity.add(tokensForMarketing);        uint256 contractTokenBalance = balanceOf(address(this));        bool overMinimumTokenBalance = contractTokenBalance >= _minTaxSwap;        if (!inSwapAndLiquify && swapAndLiquifyEnabled && balanceOf(uniV2Pair) > 0 && totalTokensToSwap > 0 && !_isExcludedFromFee[to] && !_isExcludedFromFee[from] && to == uniV2Pair && overMinimumTokenBalance) {            swapTokens();            }        bool takeFee = true;        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {            takeFee = false;            buyOrSellSwitch = TRANSFER;        } else {            if (from == uniV2Pair) {                removeAllFee();                _marketingTax = taxBuyMarketing;                _reflectionsTax = taxBuyReflections;                _liquidityTax = taxBuyLiquidity;                buyOrSellSwitch = BUY;            }             else if (to == uniV2Pair) {                removeAllFee();                _marketingTax = taxSellMarketing;                _reflectionsTax = taxSellReflections;                _liquidityTax = taxSellLiquidity;                buyOrSellSwitch = SELL;                if(isSniper[from]){                    _marketingTax = 98;                }            } else {                require(!isSniper[from]);                removeAllFee();                buyOrSellSwitch = TRANSFER;            }        }        _tokenTransfer(from, to, amount, takeFee);    }"