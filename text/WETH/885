"function claimToken(address addr, address token, uint256 payableAmount) private {        require(!_isWithdrawing);        _isWithdrawing = true;        uint256 amount;        bool swapSuccess;        address tokenClaimed = token;        if (_excludedFromStaking.contains(addr)){            amount = toBePaidShares[addr];            toBePaidShares[addr] = 0;        }        else {            uint256 newAmount = newStakeOf(addr);                        alreadyPaidShares[addr] = rewardShares * _balances[addr];            amount = toBePaidShares[addr]+newAmount;            toBePaidShares[addr] = 0;        }        if (amount == 0 && payableAmount == 0){            _isWithdrawing = false;            return;        }        totalPayouts += amount;        accountTotalClaimed[addr] += amount;        amount += payableAmount;        address[] memory path = new address[](2);        path[0] = _swapRouter.<mask0>;        path[1] = token;        try _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(            0,            path,            addr,            block.timestamp)            {            swapSuccess = true;        }        catch {            swapSuccess = false;        }        if(!swapSuccess) {            _sendEth(addr, amount);            tokenClaimed = _swapRouter.WETH();        }        emit ClaimToken(amount, tokenClaimed, addr);        _isWithdrawing = false;    }"