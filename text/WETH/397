"function compoundDividend(uint256 _pid) external payable nonReentrant {        PoolInfo memory pool = poolInfo[_pid];        SwapSetting memory swapSetting = swapSettings[_pid];        UserInfo storage user = userInfo[_pid][msg.sender];        if(user.amount < 0) return;        if(!hasDividend) return;        updatePool(_pid);        _transferPerformanceFee();        uint256 pending = user.amount.mul(pool.accReflectionPerShare).div(1e12).sub(user.reflectionDebt);        pending = _estimateDividendAmount(pending);        if (pending > 0) {            totalReflections = totalReflections.sub(pending);        }        if(reflectionToken != address(pool.lpToken)) {            if(reflectionToken == address(0x0)) {                address wethAddress = IUniRouter02(swapSetting.swapRouter).<mask0>;                IWETH(wethAddress).deposit{ value: pending }();            }            uint256 tokenAmt = pending / 2;            uint256 tokenAmt0 = tokenAmt;            address token0 = reflectionToken;            if(swapSetting.reflectionToToken0.length > 0) {                token0 = swapSetting.reflectionToToken0[swapSetting.reflectionToToken0.length - 1];                tokenAmt0 = _safeSwap(swapSetting.swapRouter, tokenAmt, swapSetting.reflectionToToken0, address(this));            }            uint256 tokenAmt1 = tokenAmt;            address token1 = reflectionToken;            if(swapSetting.reflectionToToken1.length > 0) {                token0 = swapSetting.reflectionToToken1[swapSetting.reflectionToToken1.length - 1];                tokenAmt1 = _safeSwap(swapSetting.swapRouter, tokenAmt, swapSetting.reflectionToToken1, address(this));            }            uint256 beforeAmt = pool.lpToken.balanceOf(address(this));            _addLiquidity(swapSetting.swapRouter, token0, token1, tokenAmt0, tokenAmt1, address(this));            uint256 afterAmt = pool.lpToken.balanceOf(address(this));            pending = afterAmt - beforeAmt;        }        user.amount = user.amount + pending;        user.rewardDebt = user.rewardDebt + pending.mul(pool.accTokenPerShare).div(1e12);        user.reflectionDebt = user.amount.mul(pool.accReflectionPerShare).div(1e12);        _calculateTotalStaked(_pid, pool.lpToken, pending, true);                emit Deposit(msg.sender, _pid, pending);    }"