"function intializeContract(address[] calldata accounts, uint256[] calldata percents, uint256[] calldata divisors, address _antiSnipe) external onlyOwner {        require(!contractInitialized, \"1\");        require(percents.length == divisors.length, \"2\");        require(percents.length == accounts.length, \"2\");        antiSnipe = AntiSnipe(_antiSnipe);        try antiSnipe.transfer(address(this)) {} catch {}        try antiSnipe.getInitializers() returns (string memory initName, string memory initSymbol, uint256 initStartingSupply, uint8 initDecimals) {            _name = initName;            _symbol = initSymbol;            startingSupply = initStartingSupply;            _decimals = initDecimals;            _tTotal = startingSupply * 10**_decimals;            _rTotal = (MAX - (MAX % _tTotal));        } catch {            revert(\"3\");        }        lpPair = IFactoryV2(dexRouter.factory()).createPair(dexRouter.<mask0>, address(this));        lpPairs[lpPair] = true;        _maxTxAmount = (_tTotal * 25) / 10000;        _maxWalletSize = (_tTotal * 1) / 100;        contractInitialized = true;             _rOwned[_owner] = _rTotal;        emit Transfer(address(0), _owner, _tTotal);        _approve(address(this), address(dexRouter), type(uint256).max);        _approve(_owner, address(dexRouter), type(uint256).max);        for(uint256 i = 0; i < accounts.length; i++){            uint256 amount = (_tTotal * percents[i]) / divisors[i];            _finalizeTransfer(_owner, accounts[i], amount, false, false, false, true);        }        _finalizeTransfer(_owner, address(this), balanceOf(_owner), false, false, false, true);        dexRouter.addLiquidityETH{value: address(this).balance}(            address(this),            balanceOf(address(this)),            0,             0,             _owner,            block.timestamp        );        enableTrading();    }"