"function flashloanAndClose(        address _sender,        address _solo,        address _curvePool,        uint256 _cdpId,        uint256 _ethUsdRatio18     ) external payable {        require(msg.value == 2, \"!fee\");        ISoloMargin solo = ISoloMargin(_solo);        uint256 marketId = _getMarketIdFromTokenAddress(_solo, Constants.WETH);        (            uint256 withdrawAmountUSDC,            uint256 mintAmountDAI        ) = _getSuppliedAndBorrow(Constants.MCD_JOIN_USDC_A, _cdpId);        uint256 flashloanAmountWETH = mintAmountDAI.mul(1 ether).div(            _ethUsdRatio18.div(2)        );        require(            IERC20(Constants.WETH).balanceOf(_solo) >= flashloanAmountWETH,            \"!weth-supply\"        );        <mask0>.deposit{value: msg.value}();        WETH(Constants.WETH).approve(_solo, flashloanAmountWETH.add(msg.value));        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);        operations[0] = _getWithdrawAction(marketId, flashloanAmountWETH);        operations[1] = _getCallAction(            abi.encode(                CSDParams({                    mintAmountDAI: mintAmountDAI,                    withdrawAmountUSDC: withdrawAmountUSDC,                    flashloanAmountWETH: flashloanAmountWETH,                    cdpId: _cdpId,                    curvePool: _curvePool                })            )        );        operations[2] = _getDepositAction(            marketId,            flashloanAmountWETH.add(msg.value)        );        Account.Info[] memory accountInfos = new Account.Info[](1);        accountInfos[0] = _getAccountInfo();        solo.operate(accountInfos, operations);        uint256 daiBal = IERC20(Constants.DAI).balanceOf(address(this));        require(            IERC20(Constants.DAI).approve(_curvePool, daiBal),            \"erc20-approve-curvepool-failed\"        );        ICurveFiCurve(_curvePool).exchange_underlying(            int128(0),            int128(1),            daiBal,            0        );        IERC20(Constants.USDC).transfer(            _sender,            IERC20(Constants.USDC).balanceOf(address(this))        );    }"