"function initialize(        bytes32 _machineHash,        uint256[4] calldata _rollupParams,        address _stakeToken,        address _owner,        bytes calldata _extraConfig,        address[6] calldata connectedContracts,        address[2] calldata _facets,        uint256[2] calldata sequencerInboxParams    ) public {        require(!isInit(), \"ALREADY_INIT\");        require(_facets[0].<mask0>, \"FACET_0_NOT_CONTRACT\");        require(_facets[1].isContract(), \"FACET_1_NOT_CONTRACT\");        (bool success, ) = _facets[1].delegatecall(            abi.encodeWithSelector(IRollupUser.initialize.selector, _stakeToken)        );        require(success, \"FAIL_INIT_FACET\");        delayedBridge = IBridge(connectedContracts[0]);        sequencerBridge = ISequencerInbox(connectedContracts[1]);        outbox = IOutbox(connectedContracts[2]);        delayedBridge.setOutbox(connectedContracts[2], true);        rollupEventBridge = RollupEventBridge(connectedContracts[3]);        delayedBridge.setInbox(connectedContracts[3], true);        rollupEventBridge.rollupInitialized(            _rollupParams[0],            _rollupParams[2],            _owner,            _extraConfig        );        challengeFactory = IChallengeFactory(connectedContracts[4]);        nodeFactory = INodeFactory(connectedContracts[5]);        INode node = createInitialNode(_machineHash);        initializeCore(node);        confirmPeriodBlocks = _rollupParams[0];        extraChallengeTimeBlocks = _rollupParams[1];        avmGasSpeedLimitPerBlock = _rollupParams[2];        baseStake = _rollupParams[3];        owner = _owner;        minimumAssertionPeriod = 75;        challengeExecutionBisectionDegree = 400;        sequencerBridge.setMaxDelay(sequencerInboxParams[0], sequencerInboxParams[1]);        facets = _facets;        emit RollupCreated(_machineHash);        require(isInit(), \"INITIALIZE_NOT_INIT\");    }"