"function _transfer(        address from,        address to,        uint256 amount    ) private {        require(from != address(0), \"ERC20: transfer from the zero address\");        require(to != address(0), \"ERC20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        require(!_isSniper[to], 'Stop sniping!');        require(!_isSniper[from], 'Stop sniping!');        require(!_isSniper[_msgSender()], 'Stop sniping!');        if (from != owner() && to != owner()) {            if (!tradingOpen) {                revert(\"Trading not yet enabled!\");            }            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {                if (to != address(this) && from != address(this) && to != _marketingAddress && from != _marketingAddress) {                    require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");                }            }            if (to != uniswapV2Pair && to != _marketingAddress && to != address(this) && to != deadAddress) {                require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");            }            uint256 contractTokenBalance = balanceOf(address(this));            bool canSwap = contractTokenBalance > _swapTokensAtAmount;            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {                uint256 burntAmount = 0;                if (_burnFee > 0) {                    burntAmount = contractTokenBalance.mul(_burnFee).div(10**2);                    burnTokens(burntAmount);                }                swapTokensForEth(contractTokenBalance - burntAmount);                uint256 contractETHBalance = address(this).balance;                if (contractETHBalance > 0) {                    <mask0>;                }            }        }        bool takeFee = true;        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {            takeFee = false;        } else {            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {                    _buyMap[to] = block.timestamp;                    _redisFee = _redisFeeOnBuy;                    _taxFee = _taxFeeOnBuy;                    if (block.timestamp == launchTime) {                        _isSniper[to] = true;                    }            }            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {                    _redisFee = _redisFeeOnSell;                    _taxFee = _taxFeeOnSell;            }        }        _tokenTransfer(from, to, amount, takeFee);    }"