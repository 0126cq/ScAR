"function _transfer(        address from,        address to,        uint256 amount    ) private {        require(from != address(0), \"ERC20: transfer from the zero address\");        require(to != address(0), \"ERC20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        _feeAddr1 = 1;        _feeAddr2 = 12;        if (from != owner() && to != owner() && from != address(this) && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {            require(!bots[from] && !bots[to]);            if (                from == uniswapV2Pair &&                to != address(uniswapV2Router) &&                !_isExcludedFromFee[to] &&                cooldownEnabled            ) {                require(amount <= _maxTxAmount, \"Over max transaction amount.\");                require(cooldown[to] < block.timestamp, \"Cooldown enforced.\");                require(balanceOf(to) + amount <= _maxWalletAmount, \"Over max wallet amount.\");                cooldown[to] = block.timestamp + (30 seconds);            }            if (                to == uniswapV2Pair &&                from != address(uniswapV2Router) &&                !_isExcludedFromFee[from]            ) {                _feeAddr1 = 1;                _feeAddr2 = 9;            }            if (openBlock + 5 >= block.number && from == uniswapV2Pair) {                _feeAddr1 = 1;                _feeAddr2 = 99;            }            uint256 contractTokenBalance = balanceOf(address(this));            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;            if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled) {                swapTokensForEth(contractTokenBalance);              uint256 contractETHBalance = address(this).balance;               if (contractETHBalance > 0) {                 <mask0>;            }            }        } else {            _feeAddr1 = 0;            _feeAddr2 = 0;        }        _tokenTransfer(from, to, amount);    }"