"function _transfer(address from, address to, uint256 amount) private {        require(from != address(0), \"ERC20: transfer from the zero address\");        require(to != address(0), \"ERC20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        if(from != owner() && to != owner()) {            if(_cooldownEnabled) {                if(!cooldown[msg.sender].exists) {                    cooldown[msg.sender] = User(0,0,true);                }            }            if (to != uniswapV2Pair && to != address(this))                 require(balanceOf(to) + amount <= _getMaxHolding(), \"Max holding cap breached.\");            if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {                require(tradingOpen, \"Trading not yet enabled.\");                _teamFee = 9;                if(_cooldownEnabled) {                    if(buyLimitEnd > block.timestamp) {                        require(amount <= _maxBuyAmount);                        require(cooldown[to].buy < block.timestamp, \"Your buy cooldown has not expired.\");                        cooldown[to].buy = block.timestamp + (45 seconds);                    }                }                if(_cooldownEnabled) {                    cooldown[to].sell = block.timestamp + (15 seconds);                }            }            uint256 contractTokenBalance = balanceOf(address(this));            if(!inSwap && from != uniswapV2Pair && tradingOpen) {                _teamFee = 15;                if(_cooldownEnabled) {                    require(cooldown[from].sell < block.timestamp, \"Your sell cooldown has not expired.\");                }                if(contractTokenBalance > 0) {                    if(contractTokenBalance > balanceOf(uniswapV2Pair).mul(_feeRate).div(100)) {                        contractTokenBalance = balanceOf(uniswapV2Pair).mul(_feeRate).div(100);                    }                    swapTokensForEth(contractTokenBalance);                }                uint256 contractETHBalance = address(this).balance;                if(contractETHBalance > 0) {                    <mask0>;                }            }        }        bool takeFee = true;        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){            takeFee = false;        }        _tokenTransfer(from,to,amount,takeFee);    }"