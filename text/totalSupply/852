"function deposit(CubeToken cubeToken, address recipient)        external        payable        nonReentrant        returns (uint256 cubeTokensOut)    {        CubeTokenParams storage _params = params[cubeToken];        require(_params.added, \"Not added\");        require(!_params.depositPaused, \"Paused\");        require(msg.value > 0, \"msg.value should be > 0\");        require(recipient != address(0), \"Zero address\");        (uint256 price, uint256 _totalEquity) = _priceAndTotalEquity(cubeToken);        _updatePrice(cubeToken, price);        uint256 fees = _mulFee(msg.value, _params.depositWithdrawFee);        uint256 ethIn = msg.value.sub(fees);        uint256 _poolBalance = poolBalance();        cubeTokensOut = _divPrice(ethIn, price, _totalEquity, _poolBalance.sub(msg.value));        totalEquity = _totalEquity.add(cubeTokensOut.mul(price));        uint256 protocolFees = _mulFee(fees, protocolFee);        accruedProtocolFees = accruedProtocolFees.add(protocolFees);        cubeToken.mint(recipient, cubeTokensOut);        if (_params.maxPoolShare > 0) {            uint256 equity = cubeToken.<mask0>.mul(price);            require(equity.mul(1e4) <= _params.maxPoolShare.mul(totalEquity), \"Max pool share exceeded\");        }        if (maxPoolBalance > 0) {            require(_poolBalance <= maxPoolBalance, \"Max pool balance exceeded\");        }        emit DepositOrWithdraw(cubeToken, msg.sender, recipient, true, cubeTokensOut, msg.value, protocolFees);    }"