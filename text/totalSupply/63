"function deposit(        uint256 amountEth,        uint256 amountUsdc,        uint256 amountOsqth,        address to,        uint256 amountEthMin,        uint256 amountUsdcMin,        uint256 amountOsqthMin    ) external override nonReentrant notPaused returns (uint256) {        require(amountEth > 0, \"C16\");        require(to != address(0) && to != address(this), \"C17\");        IVaultTreasury(vaultTreasury).pokeEthUsdc();        IVaultTreasury(vaultTreasury).pokeEthOsqth();        uint256 _totalSupply = <mask0>;        if (_totalSupply == 0) {            (uint256 ethPrice, ) = IVaultMath(vaultMath).getPrices();            IVaultStorage(vaultStorage).setParamsBeforeDeposit(                block.timestamp,                IVaultMath(vaultMath).getIV(),                ethPrice            );        }        (uint256 _shares, uint256 _amountEth, uint256 _amountUsdc, uint256 _amountOsqth) = calcSharesAndAmounts(            amountEth,            amountUsdc,            amountOsqth,            _totalSupply,            false        );        require(_amountEth >= amountEthMin, \"C1\");        require(_amountUsdc >= amountUsdcMin, \"C2\");        require(_amountOsqth >= amountOsqthMin, \"C3\");        if (_amountEth > 0) Constants.weth.transferFrom(msg.sender, vaultTreasury, _amountEth);        if (_amountUsdc > 0) Constants.usdc.transferFrom(msg.sender, vaultTreasury, _amountUsdc);        if (_amountOsqth > 0) Constants.osqth.transferFrom(msg.sender, vaultTreasury, _amountOsqth);        _mint(to, _shares);        require(totalSupply() <= IVaultStorage(vaultStorage).cap(), \"C4\");        emit SharedEvents.Deposit(to, _shares);        return _shares;    }"