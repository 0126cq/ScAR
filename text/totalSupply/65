"function withdraw(        uint256 shares,        uint256 amountEthMin,        uint256 amountUsdcMin,        uint256 amountOsqthMin    ) external override nonReentrant {        require(shares > 0, \"C5\");        uint256 _totalSupply = <mask0>;        _burn(msg.sender, shares);        (uint256 amountUsdc, uint256 amountEth0) = IVaultMath(vaultMath).burnLiquidityShare(            Constants.poolEthUsdc,            IVaultStorage(vaultStorage).orderEthUsdcLower(),            IVaultStorage(vaultStorage).orderEthUsdcUpper(),            shares,            _totalSupply        );        (uint256 amountEth1, uint256 amountOsqth) = IVaultMath(vaultMath).burnLiquidityShare(            Constants.poolEthOsqth,            IVaultStorage(vaultStorage).orderOsqthEthLower(),            IVaultStorage(vaultStorage).orderOsqthEthUpper(),            shares,            _totalSupply        );        uint256 amountEth = amountEth0 + amountEth1;        require(amountEth != 0 || amountUsdc != 0 || amountOsqth != 0, \"C6\");        require(amountEth >= amountEthMin, \"C7\");        require(amountUsdc >= amountUsdcMin, \"C8\");        require(amountOsqth >= amountOsqthMin, \"C9\");        if (amountEth > 0) IVaultTreasury(vaultTreasury).transfer(Constants.weth, msg.sender, amountEth);        if (amountUsdc > 0) IVaultTreasury(vaultTreasury).transfer(Constants.usdc, msg.sender, amountUsdc);        if (amountOsqth > 0) IVaultTreasury(vaultTreasury).transfer(Constants.osqth, msg.sender, amountOsqth);        emit SharedEvents.Withdraw(msg.sender, shares, amountEth, amountUsdc, amountOsqth);    }"