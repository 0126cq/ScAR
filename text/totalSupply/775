"function accrue() public {    uint timePassed = block.timestamp - lastAccrueTime;    if (timePassed == 0) return;    lastAccrueTime = block.timestamp;    require(!Pausable(betaBank).paused(), 'BetaBank/paused');    (uint totalLoan_, uint totalLoanable_, uint interestRate_) = (      totalLoan,      totalLoanable,      interestRate    );     IBetaConfig config = IBetaConfig(IBetaBank(betaBank).config());    IBetaInterestModel model = IBetaInterestModel(IBetaBank(betaBank).interestModel());    uint interest = (interestRate_ * totalLoan_ * timePassed) / (365 days) / 1e18;    totalLoan_ += interest;    totalLoan = totalLoan_;    interestRate = model.getNextInterestRate(interestRate_, totalLoanable_, totalLoan_, timePassed);    if (interest > 0) {      uint reserveRate = config.reserveRate();      if (reserveRate > 0) {        uint toReserve = (interest * reserveRate) / 1e18;        _mint(          config.reserveBeneficiary(),          (toReserve * <mask0>) / (totalLoan_ + totalLoanable_ - toReserve)        );      }      emit Accrue(interest);    }  }"