"function intializeContract(address payable setMarketWallet, address payable setDevWallet, string memory _tokenname, string memory _tokensymbol) external onlyOwner {        require(!contractInitialized);        _marketWallet = payable(setMarketWallet);        _devWallet = payable(setDevWallet);        _name = _tokenname;        _symbol = _tokensymbol;        startingSupply = 10_000_000_000;        if (startingSupply < 100000000000) {            _decimals = 18;            _decimalsMul = _decimals;        } else {            _decimals = 9;            _decimalsMul = _decimals;        }        _tTotal = startingSupply * (10**_decimalsMul);        _rTotal = (MAX - (MAX % _tTotal));        dexRouter = IUniswapV2Router02(_routerAddress);        lpPair = IUniswapV2Factory(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));        lpPairs[lpPair] = true;        _allowances[address(this)][address(dexRouter)] = type(uint256).max;        _maxTxAmount = (_tTotal * 500) / 100000;        maxTxAmountUI = (startingSupply * 500) / 100000;        _maxWalletSize = (_tTotal * 10) / 1000;        maxWalletSizeUI = (startingSupply * 10) / 1000;        swapThreshold = (_tTotal * 5) / 10000;        swapAmount = (_tTotal * 5) / 1000;        approve(_routerAddress, type(uint256).max);        contractInitialized = true;        _rOwned[owner()] = _rTotal;        emit Transfer(ZERO, owner(), _tTotal);        _approve(address(this), address(dexRouter), type(uint256).max);        _transfer(owner(), address(this), balanceOf(owner()));        dexRouter.<mask0>;        Planted = block.number;    }"