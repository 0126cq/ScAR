"function contractSwap(uint256 contractTokenBalance) private lockTheSwap {        Ratios memory ratios = _ratios;        if (ratios.total == 0) {            return;        }        if(_allowances[address(this)][address(dexRouter)] != type(uint256).max) {            _allowances[address(this)][address(dexRouter)] = type(uint256).max;        }        uint256 toLiquify = ((contractTokenBalance * ratios.liquidity) / ratios.total) / 2;        uint256 swapAmt = contractTokenBalance - toLiquify;        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = dexRouter.WETH();        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(            swapAmt,            0,            path,            address(this),            block.timestamp        );        uint256 amtBalance = address(this).balance;        uint256 liquidityBalance = (amtBalance * toLiquify) / swapAmt;        if (toLiquify > 0) {            dexRouter.<mask0>;            emit AutoLiquify(liquidityBalance, toLiquify);        }        amtBalance -= liquidityBalance;        ratios.total -= ratios.liquidity;        uint256 treasuryBalance = (amtBalance * ratios.treasury) / ratios.total;        uint256 marketingBalance = amtBalance - treasuryBalance;        if (ratios.treasury > 0) {            _taxWallets.treasury.transfer(treasuryBalance);        }        if (ratios.marketing > 0) {            _taxWallets.marketing.transfer(marketingBalance);        }    }"