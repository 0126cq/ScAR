"function swap_taxes(uint256 tx_amount) private safe{        uint256 contractBalance = _balances[address(this)];        uint16 totalTax = liquidityShare + DAOShare + devShare;        uint256 amount_to_swap = (swap_treshold.mul(75)).div(100);        if(amount_to_swap > tx_amount) {            if(pegged) {                amount_to_swap = tx_amount;            }        }        if(contractBalance<amount_to_swap){            return;        }        uint256 tokenForLiquidity=(amount_to_swap*liquidityShare)/totalTax;        uint256 liqToken=tokenForLiquidity/2;        uint256 liqETHToken=tokenForLiquidity-liqToken;        uint256 initialETHBalance = address(this).balance;        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amount_to_swap,            0,            path,            address(this),            block.timestamp            );        uint256 newETH=(address(this).balance - initialETHBalance);        uint256 liqETH = (newETH*liqETHToken)/amount_to_swap;        router.<mask0>;        uint256 afterLiqEth = (address(this).balance - initialETHBalance);        uint256 DAOSplit = afterLiqEth.mul(DAOShare).div(totalTax);        uint256 devSplit = afterLiqEth - DAOSplit;        payable(developer).transfer(devSplit);        payable(DAO).transfer(DAOSplit);    }"