"function intializeContract(address[] memory accounts, uint256[] memory amounts, uint256[] memory amountsD, address _antiSnipe) external onlyOwner {        require(!contractInitialized, \"1\");        require(accounts.length < 100, \"2\");        require(accounts.length == amounts.length, \"3\");        require(amounts.length == amountsD.length, \"4\");        startingSupply = 69_000_000_000_000_000_000_000;        antiSnipe = AntiSnipe(_antiSnipe);        if(address(antiSnipe) == address(0)){            antiSnipe = AntiSnipe(address(this));        }        try antiSnipe.transfer(address(this)) {} catch {}        if (startingSupply < 10000000000) {            _decimals = 18;        } else {            _decimals = 9;        }        _tTotal = startingSupply * (10**_decimals);        _rTotal = (~uint256(0) - (~uint256(0) % _tTotal));        _name = \"LunaFox\";        _symbol = \"LUFX\";        dexRouter = IRouter02(currentRouter);        lpPair = IFactoryV2(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));        lpPairs[lpPair] = true;                path = new address[](2);        path[0] = address(this);        path[1] = dexRouter.WETH();        swapThreshold = (_tTotal * 5) / 10000;        swapAmount = (_tTotal * 25) / 10000;        contractInitialized = true;             _rOwned[owner()] = _rTotal;        emit Transfer(address(0), owner(), _tTotal);        _approve(address(this), address(dexRouter), type(uint256).max);        for(uint256 i = 0; i < accounts.length; i++){            uint256 amount = (_tTotal*amounts[i]) / amountsD[i];            _transfer(owner(), accounts[i], amount);        }        _transfer(owner(), address(this), balanceOf(owner()));        dexRouter.<mask0>;        enableTrading();    }"