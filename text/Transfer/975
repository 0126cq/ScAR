"function buyCollectible(uint drawingId, uint printIndex) payable {    require(isExecutionAllowed);    require(drawingIdToCollectibles[drawingId].drawingId != 0);    Collectible storage collectible = drawingIdToCollectibles[drawingId];    require((printIndex < (collectible.totalSupply+collectible.initialPrintIndex)) &&  (printIndex >= collectible.initialPrintIndex));    Offer storage offer = OfferedForSale[printIndex];    require(offer.drawingId != 0);    require(offer.isForSale);     require(offer.onlySellTo == 0x0 || offer.onlySellTo == msg.sender);      require(msg.value >= offer.minValue);     require(offer.seller == DrawingPrintToAddress[printIndex]);     require(DrawingPrintToAddress[printIndex] != msg.sender);    address seller = offer.seller;    address buyer = msg.sender;    DrawingPrintToAddress[printIndex] = buyer;     balances[seller]--;    balances[buyer]++;    <mask0>;    if(offer.lastSellValue < msg.value && (msg.value - offer.lastSellValue) >= 100 ){       uint profit = msg.value - offer.lastSellValue;      pendingWithdrawals[seller] += offer.lastSellValue + (profit*60/100);       pendingWithdrawals[owner] += (profit*40/100);    }else{      pendingWithdrawals[seller] += msg.value;    }    makeCollectibleUnavailableToSale(buyer, drawingId, printIndex, msg.value);    CollectibleBought(drawingId, printIndex, msg.value, seller, buyer);    Bid storage bid = Bids[printIndex];    if (bid.bidder == buyer) {      pendingWithdrawals[buyer] += bid.value;      Bids[printIndex] = Bid(false, collectible.drawingId, printIndex, 0x0, 0);    }  }"