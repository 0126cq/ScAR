"function _transfer(        address from,        address to,        uint256 tokenId    ) private {        TokenOwnership memory prevOwnership = ownershipOf(tokenId);        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||            getApproved(tokenId) == _msgSender() ||            isApprovedForAll(prevOwnership.addr, _msgSender()));        require(isApprovedOrOwner, \"a\");        require(prevOwnership.addr == from, \"o\");        require(to != address(0), \"0\");        _beforeTokenTransfers(from, to, tokenId, 1);        <mask0>;        _addressData[from].balance -= 1;        _addressData[to].balance += 1;        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));        uint256 nextTokenId = tokenId + 1;        if (_ownerships[nextTokenId].addr == address(0)) {            if (_exists(nextTokenId)) {                _ownerships[nextTokenId] = TokenOwnership(prevOwnership.addr, prevOwnership.startTimestamp);            }        }        emit Transfer(from, to, tokenId);        _afterTokenTransfers(from, to, tokenId, 1);    }"