"function submitProposal(        address applicant,        uint256 sharesRequested,        uint256 lootRequested,        uint256 tributeOffered,        address tributeToken,        uint256 paymentRequested,        address paymentToken,        bytes32 details    ) payable external nonReentrant returns (uint256 proposalId) {        require(sharesRequested.add(lootRequested) <= MAX_GUILD_BOUND, \"guild maxed\");        require(tokenWhitelist[tributeToken], \"tributeToken != whitelist\");        require(tokenWhitelist[paymentToken], \"paymentToken != whitelist\");        require(applicant != GUILD && applicant != ESCROW && applicant != TOTAL, \"applicant unreservable\");        require(members[applicant].jailed == 0, \"applicant jailed\");        if (tributeOffered > 0 && userTokenBalances[GUILD][tributeToken] == 0) {            require(totalGuildBankTokens < MAX_TOKEN_GUILDBANK_COUNT, \"guildbank maxed\");        }        if (tributeToken == wETH && msg.value > 0) {            require(msg.value == tributeOffered, \"!ETH\");            IWETH(wETH).deposit();            (bool success, ) = wETH.call.value(msg.value)(\"\");            require(success, \"!transfer\");            IWETH(wETH).transfer(address(this), msg.value);        } else {            IERC20(tributeToken).<mask0>;        }        unsafeAddToBalance(ESCROW, tributeToken, tributeOffered);        uint8[7] memory flags;         _submitProposal(applicant, sharesRequested, lootRequested, tributeOffered, tributeToken, paymentRequested, paymentToken, details, flags, \"\");        return proposalCount - 1;     }"