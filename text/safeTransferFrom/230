"function buyFraktions(    address from,    address tokenAddress,    uint256 _numberOfShares  ) external payable nonReentrant {    Listing storage listing = listings[tokenAddress][from];    require(!FraktalNFT(tokenAddress).sold(), \"item sold\");    require(      listing.numberOfShares >= _numberOfShares    );    uint256 buyPrice = (listing.price * _numberOfShares)/(10**18);    require(buyPrice!=0);    uint256 totalFees = (buyPrice * fee) / 10000;    uint256 totalForSeller = buyPrice - totalFees;    uint256 fraktionsIndex = FraktalNFT(tokenAddress).fraktionsIndex();    require(msg.value >= buyPrice);    listing.numberOfShares = listing.numberOfShares - _numberOfShares;    if (listing.price * 10000 > maxPriceRegistered[tokenAddress]) {      maxPriceRegistered[tokenAddress] = listing.price * 10000;    }    feesAccrued += msg.value - totalForSeller;    sellersBalance[from] += totalForSeller;    FraktalNFT(tokenAddress).<mask0>;    emit Bought(_msgSender(), from, tokenAddress, _numberOfShares);    emit Volume(_msgSender(),msg.value);    emit Volume(from,msg.value);  }"