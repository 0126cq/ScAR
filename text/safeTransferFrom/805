"function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)    external    virtual    override    ensure(deadline)    returns (uint[] memory amounts)    {        require(path.length == 2, \"RARESwapRouter: ONLY_TWO_TOKENS_ALLOWED\");        require(path[path.length - 1] == WETH, 'RARESwapRouter: INVALID_PATH');        uint adminFeeDeduct;        address pair = RARESwapLibrary.pairFor(factory, path[0], path[1]);        if(path[0] == pairFeeAddress[pair]){            amounts = RARESwapLibrary.getAmountsIn(factory, amountOut, path);            require(amounts[0] <= amountInMax, 'RARESwapRouter: EXCESSIVE_INPUT_AMOUNT');            (amounts[0],adminFeeDeduct) = RARESwapLibrary.adminFeeCalculation(amounts[0],adminFee);            TransferHelper.<mask0>;            amounts = RARESwapLibrary.getAmountsOut(factory, amounts[0], path);            TransferHelper.safeTransferFrom(                path[0], msg.sender, pair, amounts[0]            );        } else {            amounts = RARESwapLibrary.getAmountsIn(factory, amountOut, path);            require(amounts[0] <= amountInMax, 'RARESwapRouter: EXCESSIVE_INPUT_AMOUNT');            TransferHelper.safeTransferFrom(                path[0], msg.sender, pair, amounts[0]            );        }        _swap(amounts, path, address(this));        uint amountETHOut = amounts[amounts.length - 1];        if(path[1] == pairFeeAddress[pair]){            (amountETHOut,adminFeeDeduct) = RARESwapLibrary.adminFeeCalculation(amountETHOut,adminFee);        }        IWETH(WETH).withdraw(amountETHOut);        TransferHelper.safeTransferETH(to, amountETHOut);    }"