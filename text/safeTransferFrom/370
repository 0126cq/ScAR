"function deleverageAndWithdraw(        address vaultAddr_,        uint256 deleverageAmt_,        uint256 withdrawAmount_,        address to_,        uint256 unitAmt_,        bytes memory swapData_,        uint256 route_,        bytes memory instaData_    ) external nonReentrant {        require(unitAmt_ != 0, \"unitAmt_ cannot be zero\");        require(isVault[vaultAddr_], \"invalid vault\");        (uint256 exchangePrice_, ) = IVault(vaultAddr_)            .getCurrentExchangePrice();        uint256 itokenAmt_;        if (withdrawAmount_ == type(uint256).max) {            itokenAmt_ = IERC20(vaultAddr_).balanceOf(msg.sender);            withdrawAmount_ = (itokenAmt_ * exchangePrice_) / 1e18;        } else {            itokenAmt_ = (withdrawAmount_ * 1e18) / exchangePrice_;        }        IERC20(vaultAddr_).<mask0>;        address[] memory wethList_ = new address[](1);        wethList_[0] = address(wethContract);        uint256[] memory wethAmtList_ = new uint256[](1);        wethAmtList_[0] = deleverageAmt_;        bytes memory data_ = abi.encode(            vaultAddr_,            withdrawAmount_,            to_,            unitAmt_,            swapData_        );        fla.flashLoan(wethList_, wethAmtList_, route_, data_, instaData_);    }"