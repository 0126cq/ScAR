"function collect(uint256 tokenID, address _mintableToken)        public    {        IMintableToken Token = IMintableToken(_mintableToken);        auction memory _auction = auctions[_mintableToken][tokenID];        TokenDetArrayLib.TokenDet memory _tokenDet = TokenDetArrayLib.TokenDet(_mintableToken,tokenID);        require(            block.timestamp > _auction.closingTime,            \"Auction Not Over!\"        );        address payable lastOwner2 = _auction.lastOwner;        uint256 royalities = Token.royalities(tokenID);        address payable creator = Token.creators(tokenID);        uint256 royality = (royalities * _auction.currentBid) / 10000;        uint256 brokerageAmount = (brokerage * _auction.currentBid) / 10000;        uint256 lastOwner_funds = _auction.currentBid - royality - brokerageAmount;        if (_auction.buyer == true) {            if (_auction.erc20Token == address(0)) {                creator.transfer(royality);                lastOwner2.transfer(lastOwner_funds);            } else {                IERC20 erc20Token = IERC20(_auction.erc20Token);                erc20Token.transfer(creator, royality);                erc20Token.transfer(lastOwner2, lastOwner_funds);            }            brokerageBalance[_auction.erc20Token] += brokerageAmount;            tokenOpenForSale[_mintableToken][tokenID] = false;            Token.<mask0>;            emit Buy(                _tokenDet.NFTAddress,                _tokenDet.tokenID,                lastOwner2,                _auction.highestBidder,                _auction.currentBid,                block.timestamp,                _auction.erc20Token            );        }        emit Collect(            _tokenDet.NFTAddress,            _tokenDet.tokenID,            lastOwner2,            _auction.highestBidder,            msg.sender,            block.timestamp,            _auction.erc20Token        );        tokensForSale.removeTokenDet(_tokenDet);        tokensForSalePerUser[lastOwner2].removeTokenDet(_tokenDet);        auctionTokens.removeTokenDet(_tokenDet);        delete auctions[_mintableToken][tokenID];    }"