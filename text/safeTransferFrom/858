"function _trade(        uint256 _tokenId,        address _seller,        uint256 _amount    ) internal {        address payable contractOwner = payable(_owner);        address payable _buyer = payable(_msgSender());        address payable sellerAddress = payable(_seller);        SaleInfo storage sale = saleMap[_tokenId][_seller];        _safeTransferFrom(_seller, _msgSender(), _tokenId, _amount, \"\");        uint256 _commissionValue = ((_amount * sale.price) * feeRate()) / 1000;        uint256 royaltyValue = calculateRoyaltyValue(            _tokenId,            _seller,            _amount        );        uint256 _sellerValue = (_amount * sale.price) -            _commissionValue -            royaltyValue;        if (sale.tokenAddress == address(0)) {            sellerAddress.transfer(_sellerValue);            contractOwner.transfer(_commissionValue);            if (royaltyValue > 0) {                transferNativeRoyaltyValue(_tokenId, _seller, _amount);            }            if ((_amount * sale.price) > msg.value) {                _buyer.transfer(msg.value - (_amount * sale.price));            }        } else {            TransferHelper.safeTransferFrom(                sale.tokenAddress,                msg.sender,                sellerAddress,                _sellerValue            );            TransferHelper.<mask0>;            if (royaltyValue > 0) {                transferTokenRoyaltyValue(_tokenId, _seller, _amount);            }        }        if ((sale.amount - _amount) <= 0) {            saleMap[_tokenId][_seller].amount = 0;            saleMap[_tokenId][_seller].isForSale = false;        } else {            saleMap[_tokenId][_seller].amount = sale.amount - _amount;         }        emit Buy(_tokenId, _seller, sale.amount);        emit UpdateSale(            _seller,            saleMap[_tokenId][_seller].isForSale,            _tokenId,            saleMap[_tokenId][_seller].amount,            sale.price        );    }"