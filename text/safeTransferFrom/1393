"function swapExactFraxForTemple(        uint amountIn,        uint amountOutMin,        address to,        uint deadline    ) external virtual ensure(deadline) returns (uint amountOut) {        require(allowed[msg.sender] || openAccessEnabled, \"Router isn't open access and caller isn't in the allowed list\");        (uint amountInAMM, uint amountInProtocol, uint amountOutAMM, uint amountOutProtocol) = swapExactFraxForTempleQuote(amountIn);        amountOut = amountOutAMM + amountOutProtocol;        require(amountOut >= amountOutMin, 'TempleFraxAMMRouter: INSUFFICIENT_OUTPUT_AMOUNT');        if (amountInAMM > 0) {            SafeERC20.safeTransferFrom(fraxToken, msg.sender, address(pair), amountInAMM);            pair.swap(amountOutAMM, 0, to, new bytes(0));        }        if (amountInProtocol > 0) {            SafeERC20.<mask0>;            templeToken.mint(to, amountOutAMM);            (uint rt, uint rf,) = pair.getReserves();            uint newDynamicThresholdPriceTemple = (rt * dynamicThresholdPrice.frax * DYNAMIC_THRESHOLD_INCREASE_DENOMINATOR) / (rf * dynamicThresholdIncreasePct);            if (newDynamicThresholdPriceTemple < dynamicThresholdPrice.temple) {                dynamicThresholdPrice.temple = newDynamicThresholdPriceTemple;            }            priceCrossedBelowDynamicThresholdBlock = 0;        }    }"