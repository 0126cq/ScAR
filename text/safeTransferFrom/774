"function requestPrice(        bytes32 identifier,        uint256 timestamp,        bytes memory ancillaryData,        IERC20 currency,        uint256 reward    ) external override nonReentrant() returns (uint256 totalBond) {        require(getState(msg.sender, identifier, timestamp, ancillaryData) == State.Invalid, \"requestPrice: Invalid\");        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \"Unsupported identifier\");        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \"Unsupported currency\");        require(timestamp <= getCurrentTime(), \"Timestamp in future\");        require(ancillaryData.length <= ancillaryBytesLimit, \"Invalid ancillary data\");        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;        requests[_getId(msg.sender, identifier, timestamp, ancillaryData)] = Request({            proposer: address(0),            disputer: address(0),            currency: currency,            settled: false,            refundOnDispute: false,            proposedPrice: 0,            resolvedPrice: 0,            expirationTime: 0,            reward: reward,            finalFee: finalFee,            bond: finalFee,            customLiveness: 0        });        if (reward > 0) {            currency.<mask0>;        }        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, address(currency), reward, finalFee);        return finalFee.mul(2);    }"