"function proposePriceFor(        address proposer,        address requester,        bytes32 identifier,        uint256 timestamp,        bytes memory ancillaryData,        int256 proposedPrice    ) public override nonReentrant() returns (uint256 totalBond) {        require(proposer != address(0), \"proposer address must be non 0\");        require(            getState(requester, identifier, timestamp, ancillaryData) == State.Requested,            \"proposePriceFor: Requested\"        );        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);        request.proposer = proposer;        request.proposedPrice = proposedPrice;        request.expirationTime = getCurrentTime().add(            request.customLiveness != 0 ? request.customLiveness : defaultLiveness        );        totalBond = request.bond.add(request.finalFee);        if (totalBond > 0) {            request.currency.<mask0>;        }        emit ProposePrice(            requester,            proposer,            identifier,            timestamp,            ancillaryData,            proposedPrice,            request.expirationTime,            address(request.currency)        );        if (address(requester).isContract())            try OptimisticRequester(requester).priceProposed(identifier, timestamp, ancillaryData) {} catch {}    }"