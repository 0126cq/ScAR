"function proposeFundingRate(FixedPoint.Signed memory rate, uint256 timestamp)        external        fees()        nonReentrant()        returns (FixedPoint.Unsigned memory totalBond)    {        require(fundingRate.proposalTime == 0, \"Proposal in progress\");        _validateFundingRate(rate);        uint256 currentTime = getCurrentTime();        uint256 updateTime = fundingRate.updateTime;        require(            timestamp > updateTime && timestamp >= currentTime.sub(_getConfig().proposalTimePastLimit),            \"Invalid proposal time\"        );        fundingRate.proposalTime = timestamp;        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();        bytes32 identifier = fundingRate.identifier;        bytes memory ancillaryData = _getAncillaryData();        optimisticOracle.requestPrice(identifier, timestamp, ancillaryData, collateralCurrency, 0);        totalBond = FixedPoint.Unsigned(            optimisticOracle.setBond(                identifier,                timestamp,                ancillaryData,                _pfc().mul(_getConfig().proposerBondPercentage).rawValue            )        );        if (totalBond.isGreaterThan(0)) {            collateralCurrency.<mask0>;            collateralCurrency.safeIncreaseAllowance(address(optimisticOracle), totalBond.rawValue);        }        optimisticOracle.proposePriceFor(            msg.sender,            address(this),            identifier,            timestamp,            ancillaryData,            rate.rawValue        );    }"