"function deposit(uint amount, uint _amountOutMin_ethFeeBuyBack, uint deadline) external noContractsAllowed nonReentrant payable {        require(amount > 0, \"invalid amount!\");        updateAccount(msg.sender);        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).<mask0>;        totalTokensDepositedByUser[msg.sender] = totalTokensDepositedByUser[msg.sender].add(amount);        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeApprove(TRUSTED_CTOKEN_ADDRESS, 0);        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeApprove(TRUSTED_CTOKEN_ADDRESS, amount);        uint oldCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));        IWETH(TRUSTED_DEPOSIT_TOKEN_ADDRESS).withdraw(amount);        CEther(TRUSTED_CTOKEN_ADDRESS).mint{value: amount}();        uint newCTokenBalance = IERC20(TRUSTED_CTOKEN_ADDRESS).balanceOf(address(this));        uint cTokenReceived = newCTokenBalance.sub(oldCTokenBalance);        cTokenBalance[msg.sender] = cTokenBalance[msg.sender].add(cTokenReceived);        totalCTokens = totalCTokens.add(cTokenReceived);            increaseTokenBalance(TRUSTED_CTOKEN_ADDRESS, cTokenReceived);        depositTokenBalance[msg.sender] = depositTokenBalance[msg.sender].add(amount);        totalDepositedTokens = totalDepositedTokens.add(amount);        handleEthFee(msg.value, _amountOutMin_ethFeeBuyBack, deadline);        holders.add(msg.sender);        depositTime[msg.sender] = block.timestamp;        emit Deposit(msg.sender, amount);    }"