"function swapout(        address token,        uint256 amount,        address receiver,        uint256 toChainId,        uint256 flags    ) external payable whenNotPaused(PAUSE_SWAPOUT_ROLE) {        address clientPeer = clientPeers[toChainId];        require(clientPeer != address(0), \"AnycallClient: no dest client\");        address dstToken = tokenPeers[token][toChainId];        require(dstToken != address(0), \"AnycallClient: no dest token\");        uint256 oldCoinBalance;        if (msg.value > 0) {            oldCoinBalance = address(this).balance - msg.value;        }        address _underlying = _getUnderlying(token);        if (_underlying != address(0)) {            uint256 old_balance = IERC20(_underlying).balanceOf(token);            IERC20(_underlying).<mask0>;            uint256 new_balance = IERC20(_underlying).balanceOf(token);            amount = new_balance > old_balance ? new_balance - old_balance : 0;        } else {            assert(IAnyswapToken(token).burn(msg.sender, amount));        }        bytes memory data = abi.encode(            token,            dstToken,            amount,            msg.sender,            receiver,            toChainId        );        IAnycallV6Proxy(callProxy).anyCall{value: msg.value}(            clientPeer,            data,            address(this),            toChainId,            flags        );        if (msg.value > 0) {            uint256 newCoinBalance = address(this).balance;            if (newCoinBalance > oldCoinBalance) {                (bool success,) = msg.sender.call{value: newCoinBalance - oldCoinBalance}(\"\");                require(success);            }        }        emit LogSwapout(token, msg.sender, receiver, amount, toChainId);    }"