"function provideFrom(        address account,        uint256 amount,        bool hedged,        uint256 minShare    ) external override nonReentrant returns (uint256 share) {        uint256 totalShare = hedged ? hedgedShare : unhedgedShare;        uint256 balance = hedged ? hedgedBalance : unhedgedBalance;        share = totalShare > 0 && balance > 0            ? (amount * totalShare) / balance            : amount * INITIAL_RATE;        uint256 limit =            hedged                ? maxHedgedDepositAmount - hedgedBalance                : maxDepositAmount - hedgedBalance - unhedgedBalance;        require(share >= minShare, \"Pool Error: The mint limit is too large\");        require(share > 0, \"Pool Error: The amount is too small\");        require(            amount <= limit,            \"Pool Error: Depositing into the pool is not available\"        );        if (hedged) {            hedgedShare += share;            hedgedBalance += amount;        } else {            unhedgedShare += share;            unhedgedBalance += amount;        }        uint256 trancheID = tranches.length;        tranches.push(            Tranche(TrancheState.Open, share, amount, block.timestamp, hedged)        );        _safeMint(account, trancheID);        token.<mask0>;    }"