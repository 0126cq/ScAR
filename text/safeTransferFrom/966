"function _requestProposeDispute(        address proposer,        address disputer,        uint256 proposerBond,        uint256 finalFee,        bytes memory customAncillaryData    ) private returns (bool) {        uint256 totalBond = finalFee + proposerBond;        l1Token.safeApprove(address(optimisticOracle), totalBond);        try            optimisticOracle.requestAndProposePriceFor(                identifier,                uint32(getCurrentTime()),                customAncillaryData,                IERC20(l1Token),                0,                proposerBond,                optimisticOracleLiveness,                proposer,                int256(1e18)            )        returns (uint256 bondSpent) {            if (bondSpent < totalBond) {                uint256 refund = totalBond - bondSpent;                l1Token.safeTransfer(proposer, refund);                l1Token.safeApprove(address(optimisticOracle), 0);                totalBond = bondSpent;            }        } catch {            l1Token.safeTransfer(proposer, totalBond);            l1Token.safeApprove(address(optimisticOracle), 0);            return false;        }        SkinnyOptimisticOracleInterface.Request memory request =            SkinnyOptimisticOracleInterface.Request({                proposer: proposer,                disputer: address(0),                currency: IERC20(l1Token),                settled: false,                proposedPrice: int256(1e18),                resolvedPrice: 0,                expirationTime: getCurrentTime() + optimisticOracleLiveness,                reward: 0,                finalFee: totalBond - proposerBond,                bond: proposerBond,                customLiveness: uint256(optimisticOracleLiveness)            });        l1Token.<mask0>;        l1Token.safeApprove(address(optimisticOracle), totalBond);        optimisticOracle.disputePriceFor(            identifier,            uint32(getCurrentTime()),            customAncillaryData,            request,            disputer,            address(this)        );        return true;    }"