"function resultAuction(string memory _igUrl, address _seller) external nonReentrant {        require(            accessControls.hasAdminRole(_msgSender()) || accessControls.hasSmartContractRole(_msgSender()),            \"NFTAuction.resultAuction: Sender must be admin or smart contract\"        );        require(_seller != address(0), \"NFTAuction.resultAuction: Seller should not be zero address\");        HighestBid storage highestBid = highestBids[_igUrl];        address winner = highestBid.bidder;        uint256 winningBid = highestBid.bid;        uint256 maxShare = 1000;        require(winner != address(0), \"NFTAuction.resultAuction: no open bids\");        delete highestBids[_igUrl];        AuctionDetail storage auctionDetail = auctionDetails[_igUrl];        uint256 platformFeeInETH;        uint256 creatorFeeInETH;        if (auctionDetail.tokenId == 0)        {            uint256 _tokenId = marketTradingNft.mint(winner, _igUrl, _seller);            auctionDetail.tokenId = _tokenId;            auctionDetail.owner = winner;            platformFeeInETH = winningBid.mul(platformFee).div(maxShare);        }        else {            require(marketTradingNft.ownerOf(auctionDetail.tokenId) == _seller,\"NFTAuction.resultAuction: seller is not owner of NFT\");            marketTradingNft.<mask0>;            auctionDetail.owner = winner;            platformFeeInETH = winningBid.mul(resellFee).div(maxShare);            creatorFeeInETH = winningBid.mul(creatorFee).div(maxShare);        }        marketTradingNft.setPrimarySalePrice(auctionDetail.tokenId, winningBid);        (bool platformTransferSuccess,) = platformFeeRecipient.call{value : platformFeeInETH}(\"\");        require(platformTransferSuccess, \"NFTAuction.resultAuction: Failed to send platform fee\");        (bool sellerTransferSuccess,) = _seller.call{value : winningBid.sub(platformFeeInETH).sub(creatorFeeInETH)}(\"\");        require(sellerTransferSuccess, \"NFTAuction.resultAuction: Failed to send the instagram post creator their royalties\");        if(creatorFeeInETH > 0) {            (bool creatorTransferSuccess,) = marketTradingNft.postCreators(auctionDetail.tokenId).call{value : creatorFeeInETH}(\"\");            require(creatorTransferSuccess, \"NFTAuction.resultAuction: Failed to send creator fee\");        }        emit AuctionResulted(auctionDetail.tokenId, _seller, _igUrl, \"1 of 1\", winner, winningBid.sub(platformFeeInETH));    }"