"function _stake(address _contractAddress, uint16 _id, uint16 _amount, uint32 _index) internal returns (uint32) {        Collection memory collection = contractToCollection[_contractAddress];        ContractApproval approval = collection.approval;        require(_amount > 0, \"Amount must be more than 0\");        require(approval != ContractApproval.NOT_APPROVED, \"This contract hasn't been approved\");        if(approval == ContractApproval.APPROVED_721) {            IERC721(_contractAddress).safeTransferFrom(                msg.sender,                address(this),                _id            );        }        if(approval == ContractApproval.APPROVED_1155) {            IERC1155(_contractAddress).<mask0>;        }        uint16 _value = _calcValueForAsset(_contractAddress, _id, _amount, collection.value);        indexToStake[_index] = Stake({            contractAddress: _contractAddress,            owner: msg.sender,            amount: _amount,            id: _id,            value: _value,            stakedAt: uint32(block.timestamp),            maxGov: uint64(_value * 10)        });        emit Staked(_contractAddress, _index, approval);        return _value;    }"