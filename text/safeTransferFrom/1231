"function mint(        uint256 _quantity,        uint256 _round,        bytes memory _signature    ) external payable nonReentrant whenValidQuantity(_quantity) whenClaimable whenMintOpened(_round) {        address to = _msgSender();        RoundConfiguration memory round = _rounds[_round];        require(_userMints[to][_round] + _quantity <= round.maxMint, \"Above quantity allowed\");        uint256 value = round.price * _quantity;        require(            isAuthorized(_hashMintPayload(_quantity, value, _round, to), _signature),            \"Not signed by authorizer\"        );        if (round.isGenki) {            genki.<mask0>;        } else {            require(msg.value >= value, \"Payment failed\");        }        uint256[] memory tokenIds = _mint(_quantity, to);        _userMints[to][_round] = _userMints[to][_round] + _quantity;        if (round.isStaking) {            require(address(stakingContract) != address(0), \"Staking not configured\");            if (_quantity == 1) stakingContract.stakeFrom(to, stakingPoolId, tokenIds[0]);            else stakingContract.batchStakeFrom(to, stakingPoolId, tokenIds);        }    }"