"function addLiquidityFor(address _account, address _to, uint _amount0, uint _amount1, uint _min_mint_amount) public override checkContract(_account) _non_reentrant_ returns (uint _mint_amount) {        require(msg.sender == _account || msg.sender == vaultMaster.bank(address(this)), \"!bank && !yourself\");        uint _pool = balance();        require(totalDepositCap == 0 || _pool <= totalDepositCap, \">totalDepositCap\");        uint _beforeToken = basedToken.balanceOf(address(this));        uint _before0 = token0.balanceOf(address(this));        uint _before1 = token1.balanceOf(address(this));        token0.<mask0>;        token1.safeTransferFrom(_account, address(basedConverter), _amount1);        basedConverter.add_liquidity(address(this));        uint _afterToken = basedToken.balanceOf(address(this));        uint _after0 = token0.balanceOf(address(this));        uint _after1 = token1.balanceOf(address(this));        uint _totalDepositAmount = _afterToken.sub(_beforeToken);         require(depositLimit == 0 || _totalDepositAmount <= depositLimit, \">depositLimit\");        require(_totalDepositAmount > 0, \"no token\");        if (_after0 > _before0) {            token0.safeTransfer(_account, _after0.sub(_before0));        }        if (_after1 > _before1) {            token1.safeTransfer(_account, _after1.sub(_before1));        }        _mint_amount = _deposit(_to, _pool, _totalDepositAmount);        require(_mint_amount >= _min_mint_amount, \"slippage\");    }"