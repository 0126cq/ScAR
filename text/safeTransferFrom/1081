"function _transfer(address payable sender, address callOrPut, address undOrCur, int vol) internal {        if(vol > 0) {            address from = sender;            uint fee = uint(vol).mul(feeRate).div(1e18);            if(msg.value > 0 && undOrCur == address(config[_WETH_])) {                uint deltaAndFee = uint(vol).add(fee);                require(msg.value >= deltaAndFee, 'msg.value not enough');                IWETH(config[_WETH_]).deposit{value: deltaAndFee}();                if(msg.value > deltaAndFee)                    sender.transfer(msg.value - deltaAndFee);                from = address(this);            }            if(from == address(this)) {                IERC20(undOrCur).safeTransfer(callOrPut, uint(vol));                IERC20(undOrCur).safeTransfer(address(config[_feeTo_]), fee);            } else {                IERC20(undOrCur).<mask0>;                IERC20(undOrCur).safeTransferFrom(from, address(config[_feeTo_]), fee);            }        } else if(vol < 0) {            uint fee = uint(-vol).mul(feeRate).div(1e18);            Call(callOrPut).withdraw_(address(config[_feeTo_]), fee);            address to = sender;            if(undOrCur == address(config[_WETH_]))                to = address(this);            uint v = uint(-vol).sub(fee);            Call(callOrPut).withdraw_(to, v);            if(to == address(this)) {                IWETH(config[_WETH_]).withdraw(v);                sender.transfer(v);            }        }    }"