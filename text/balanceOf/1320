"function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);        if (allowed != 0) {            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);        }        if (accrualBlockNumber != getBlockNumber()) {            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);        }        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);        }        if (borrower == liquidator) {            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);        }        if (repayAmount == 0) {            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);        }        if (repayAmount == uint(-1)) {            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);        }        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);        if (repayBorrowError != uint(Error.NO_ERROR)) {            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);        }        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");        require(cTokenCollateral.<mask0> >= seizeTokens, \"LIQUIDATE_SEIZE_TOO_MUCH\");        uint seizeError;        if (address(cTokenCollateral) == address(this)) {            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);        } else {            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);        }        require(seizeError == uint(Error.NO_ERROR), \"token seizure failed\");        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);        return (uint(Error.NO_ERROR), actualRepayAmount);    }"