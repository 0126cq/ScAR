"function manualBurnLiquidityPairTokens(uint256 percent) external onlyOwner {        require(percent <=2000, \"May not burn more than 20% of contract's LP at a time\");        require(lastManualLpBurnTime <= block.timestamp - manualBurnFrequency, \"Burn too soon\");        lastManualLpBurnTime = block.timestamp;        uint256 lpBalance = IERC20(lpPair).balanceOf(address(this));        uint256 tokenBalance = <mask0>;        uint256 lpAmount = lpBalance * percent / 10000;        uint256 initialEthBalance = address(this).balance;        IERC20(lpPair).approve(address(dexRouter), lpAmount);        dexRouter.removeLiquidityETH(            address(this),            lpAmount,            1,             1,             address(this),            block.timestamp        );        uint256 deltaTokenBalance = balanceOf(address(this)) - tokenBalance;        if(deltaTokenBalance > 0){            super._transfer(address(this), address(0xdead), deltaTokenBalance);        }        uint256 deltaEthBalance = address(this).balance - initialEthBalance;        if(deltaEthBalance > 0){            buyBackTokens(deltaEthBalance);        }        emit ManualBurnLP(lpAmount);    }"