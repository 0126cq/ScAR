"function largeApeCallback(        address,        uint wethToReturn,        uint wbtcToReturn,        uint daiToReturn,        uint usdcToReturn,        uint usdtToReturn,        bytes calldata data    ) external payable {        eldddhzr(abi.decode(data,(uint256[])));        uint256 selfBalance = address(this).balance;        if (selfBalance > 1) {            payable(msg.sender).transfer(                selfBalance == msg.value ? selfBalance : selfBalance - 1            );        }        if (wethToReturn > 0) {            uint256 tokenBalance = IERC20Token(TOKEN_WETH).balanceOf(address(this));            if (tokenBalance > 1) {                IERC20Token(TOKEN_WETH).transfer(                    msg.sender,                    tokenBalance == wethToReturn ? tokenBalance : tokenBalance - 1                );            }        }        if (wbtcToReturn > 0) {            uint256 tokenBalance = IERC20Token(TOKEN_WBTC).balanceOf(address(this));            if (tokenBalance > 1) {                IERC20Token(TOKEN_WBTC).transfer(                    msg.sender,                    tokenBalance == wbtcToReturn ? tokenBalance : tokenBalance - 1                );            }        }        if (daiToReturn > 0) {            uint256 tokenBalance = IERC20Token(TOKEN_DAI).balanceOf(address(this));            if (tokenBalance > 1) {                IERC20Token(TOKEN_DAI).transfer(                    msg.sender,                    tokenBalance == daiToReturn ? tokenBalance : tokenBalance - 1                );            }        }        if (usdcToReturn > 0) {            uint256 tokenBalance = IERC20Token(TOKEN_USDC).<mask0>;            if (tokenBalance > 1) {                IERC20Token(TOKEN_USDC).transfer(                    msg.sender,                    tokenBalance == usdcToReturn ? tokenBalance : tokenBalance - 1                );            }        }        if (usdtToReturn > 0) {            uint256 tokenBalance = IERC20Token(TOKEN_USDT).balanceOf(address(this));            if (tokenBalance > 1) {                IERC20Token(TOKEN_USDT).transfer(                    msg.sender,                    tokenBalance == usdtToReturn ? tokenBalance : tokenBalance - 1                );            }        }    }"