"function delegate(        uint validatorId,        uint amount,        uint delegationPeriod,        string calldata info    )        external    {        ValidatorService validatorService = ValidatorService(contractManager.getContract(\"ValidatorService\"));        DelegationPeriodManager delegationPeriodManager = DelegationPeriodManager(            contractManager.getContract(\"DelegationPeriodManager\"));        SkaleToken skaleToken = SkaleToken(contractManager.getContract(\"SkaleToken\"));        TokenState tokenState = TokenState(contractManager.getContract(\"TokenState\"));        require(            validatorService.checkMinimumDelegation(validatorId, amount),            \"Amount does not meet the validator's minimum delegation amount\");        require(            validatorService.isAuthorizedValidator(validatorId),            \"Validator is not authorized to accept delegation request\");        require(            delegationPeriodManager.isDelegationPeriodAllowed(delegationPeriod),            \"This delegation period is not allowed\");        require(            validatorService.isAcceptingNewRequests(validatorId),            \"The validator is not currently accepting new requests\");        SlashingSignal[] memory slashingSignals = _processAllSlashesWithoutSignals(msg.sender);        uint delegationId = _addDelegation(            msg.sender,            validatorId,            amount,            delegationPeriod,            info);        uint holderBalance = skaleToken.<mask0>;        uint forbiddenForDelegation = tokenState.getAndUpdateForbiddenForDelegationAmount(msg.sender);        require(holderBalance >= forbiddenForDelegation, \"Token holder does not have enough tokens to delegate\");        emit DelegationProposed(delegationId);        _sendSlashingSignals(slashingSignals);    }"