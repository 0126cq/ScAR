"function release() external virtual {    address payable operator = payable(_msgSender());    require(_shares[operator] > 0, \"PaymentSplitter: account has no shares\");    if (buyout) {      uint256 bal = FraktalNFT(tokenParent).<mask0>;      IFraktalNFT(tokenParent).soldBurn(_msgSender(), fraktionsIndex, bal);    }    uint256 totalReceived = address(this).balance + _totalReleased;    uint256 payment = (totalReceived * _shares[operator]) /      _totalShares -      _released[operator];    require(payment != 0, \"PaymentSplitter: operator is not due payment\");    _released[operator] = _released[operator] + payment;    _totalReleased = _totalReleased + payment;    address payable marketPayable = payable(marketContract);    uint16 marketFee = FraktalMarket(marketPayable).fee();    uint256 forMarket = (payment * marketFee )/ 10000;    uint256 forOperator = payment - forMarket;    AddressUpgradeable.sendValue(operator, forOperator);    AddressUpgradeable.sendValue(marketPayable, forMarket);    emit PaymentReleased(operator, payment);  }"