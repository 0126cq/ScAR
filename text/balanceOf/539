"function _transfer(        address from,        address to,        uint256 amount    ) private {        require(from != address(0), \"ERC20: transfer from the zero address\");        require(to != address(0), \"ERC20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        if (            !_isExcludedFromMaxTx[from] &&            !_isExcludedFromMaxTx[to]         ) {            require(                amount <= maxTxAmount,                \"Transfer amount exceeds the maxTxAmount.\"            );        }        uint256 regularDevFee = _devFee;        uint256 regularDevTax = _devTax;        uint256 regularMarketingTax = _marketingTax;        uint256 regularPlatformTax = _platformTax;        uint256 regularLiquidityFee = _liquidityFee;        uint256 regularTaxFee = _taxFee;        bool isSell = to == uniswapV2Pair;        if (isSell) {            _devFee = _sellDevFee;            _devTax = _sellDevTax;            _marketingTax = _sellMarketingTax;            _platformTax = _sellPlatformTax;            _liquidityFee = _sellLiquidityFee;            _taxFee = _sellTaxFee;            if (launchSellFeeDeadline >= now) {                _devFee = _devFee.add(launchSellFee);                _devTax = _devTax.add(launchSellFee);            }            if (_sellPenaltyDeadline[from] >= now && _sellPenaltyDeadline[from] != 1) {                _liquidityFee = _liquidityFee.add(_firstSellLiquidityTax);                _devFee = _devFee.add(_firstSellDevTax);                _devTax = _devTax.add(_firstSellDevTax);                _sellPenaltyDeadline[from] = 1;             }        } else if (_sellPenaltyDeadline[to] == 0) {            _sellPenaltyDeadline[to] = now + 24 hours;        }        uint256 contractTokenBalance = <mask0>;        bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;        if (            overMinTokenBalance &&            !inSwapAndLiquify &&            from != uniswapV2Pair &&            swapAndLiquifyEnabled        ) {            uint256 tokensToSell = maxTxAmount > contractTokenBalance ? contractTokenBalance : maxTxAmount;            swapAndLiquify(tokensToSell);        }        bool takeFee = true;        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){            takeFee = false;        }        _tokenTransfer(from, to, amount, takeFee);        _devFee = regularDevFee;        _devTax = regularDevTax;        _marketingTax = regularMarketingTax;        _platformTax = regularPlatformTax;        _liquidityFee = regularLiquidityFee;        _taxFee = regularTaxFee;    }"