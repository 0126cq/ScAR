"function withdrawStake(uint256 _amount, bool _inInterestToken)\t\texternal\t\tvirtual\t\tnonReentrant\t{\t\tuint256 tokenWithdraw;\t\tif (_inInterestToken) {\t\t\tuint256 tokenWorth = iTokenWorthInToken(_amount);\t\t\trequire(\t\t\t\tiToken.transfer(_msgSender(), _amount),\t\t\t\t\"withdraw transfer failed\"\t\t\t);\t\t\ttokenWithdraw = _amount = tokenWorth;\t\t} else {\t\t\ttokenWithdraw = _amount;\t\t\tredeem(tokenWithdraw);\t\t\tuint256 tokenActual = token.<mask0>;\t\t\tif (tokenActual < tokenWithdraw) {\t\t\t\ttokenWithdraw = tokenActual;\t\t\t}\t\t\trequire(\t\t\t\ttoken.transfer(_msgSender(), tokenWithdraw),\t\t\t\t\"withdraw transfer failed\"\t\t\t);\t\t}\t\tGoodFundManager fm = GoodFundManager(\t\t\tnameService.getAddress(\"FUND_MANAGER\")\t\t);\t\t_burn(msg.sender, _amount); \t\t(uint32 rewardsPerBlock, uint64 blockStart, uint64 blockEnd, ) = fm\t\t\t.rewardsForStakingContract(address(this));\t\t_decreaseProductivity(\t\t\t_msgSender(),\t\t\t_amount,\t\t\trewardsPerBlock,\t\t\tblockStart,\t\t\tblockEnd\t\t);\t\tfm.mintReward(nameService.getAddress(\"CDAI\"), _msgSender()); \t\tStakersDistribution sd = StakersDistribution(\t\t\tnameService.getAddress(\"GDAO_STAKERS\")\t\t);\t\tif (address(sd) != address(0)) {\t\t\tuint256 withdrawAmountInEighteenDecimals = token.decimals() == 18\t\t\t\t? _amount\t\t\t\t: _amount * 10**(18 - token.decimals());\t\t\tsd.userWithdraw(_msgSender(), withdrawAmountInEighteenDecimals);\t\t}\t\temit StakeWithdraw(msg.sender, address(token), tokenWithdraw);\t}"