"function _transfer(address from, address to, uint256 amount) private {        require(from != address(0), \"ERC20: transfer from the zero address\");        require(to != address(0), \"ERC20: transfer to the zero address\");        require(amount > 0, \"Transfer amount must be greater than zero\");        require(<mask0> >= amount,\"Not enough balance for tx\");        if ((to == uniswapV2Pair) && ! _isExcludedFromFee[from]) {            require(tradingOpen,\"trading is not yet open\");            require(!bots[from], \"Stealth is a Bot Free Zone\");            if  (antiBotEnabled) {                uint256 lastBuy = _lastBuy[from];                require(block.timestamp > lastBuy, \"Sorry - no FrontRunning allowed right now\");                require(cooldown[from] < block.timestamp);                cooldown[from] = block.timestamp + sellCoolDownTime;            }            if (!_hasTraded[from]){                _firstBuy[from] = block.timestamp;                _hasTraded[from] = true;            }            if (swapEnabled) {                uint256 contractTokenBalance = balanceOf(address(this));                if (contractTokenBalance >= minTokensToSell) {                    if (!inSwap) {                        swapTokensForEth(contractTokenBalance);                        uint256 contractETHBalance = address(this).balance;                        if(contractETHBalance > 0) {                        sendETHToWallet(address(this).balance);                        }                    }                }            }            bool justTakingProfits = _justTakingProfits(amount, from);            uint256 numHours = _getHours(_lastSell[from], block.timestamp);            uint256 numDays = (numHours / 24);            if (justTakingProfits) {                if (numDays < 7) {                    _firstBuy[from] = block.timestamp;                    _lastBuy[from] = block.timestamp;                }            } else {                if (numDays < 84) {                _firstBuy[from] = block.timestamp;                _lastBuy[from] = block.timestamp;                }            }            _lastSell[from] = block.timestamp;            _tokenTransferTaxed(from,to,amount);        } else if ((from == uniswapV2Pair) && ! _isExcludedFromFee[to]) {            require(tradingOpen,\"trading is not yet open\");            if (!_hasTraded[to]){                _firstBuy[to] = block.timestamp;                _hasTraded[to] = true;            }            _lastBuy[to] = block.timestamp;            _transferFree(from, to, amount);        } else {            require(!bots[from] && !bots[to], \"Stealth is a Bot Free Zone\");            _firstBuy[to] = block.timestamp;            _hasTraded[to] = true;            _transferFree(from, to, amount);        }    }"