"function _transfer(address from, address to, uint256 amount) private {            require(from != address(0), \"ERC20: transfer from the zero address\");            require(to != address(0), \"ERC20: transfer to the zero address\");            require(amount > 0, \"Transfer amount must be greater than zero\");            _feeAddr1 = 4;            _feeAddr2 = 8;            if (from != owner() && to != owner()) {                if ((block.number - _liqAddBlock < 0) && tradingOpen) {                        bots[to] = true;                }                require(!bots[from] && !bots[to]);                if(amount >= _maxTxAmount){                    amount = _maxTxAmount;                }                if(to != uniswapV2Pair && !_isExcludedFromFee[to]){                    require(balanceOf(to) + amount <= _maxWtAmount );                    if(playLotAddr != address(0)){                        if(LotState(playerLot) == 0){                            enterLottery(playerLot, to);                            LotteryCheck(playerLot);                        }                    }                    if(holdLotAddr != address(0)){                        if((balanceOf(to) + amount >= minAmountForHolder) && LotState(holdersLot) == 0){                            enterLottery(holdersLot, to);                        }                        LotteryCheck(holdersLot);                     }                }                uint256 contractTokenBalance = <mask0>;                if (!inSwap && from != uniswapV2Pair && swapEnabled) {                    if(holdLotAddr != address(0) ){                        if(balanceOf(from) - amount <= minAmountForHolder){                            extractPlayer(holdersLot,from);                           }                    }                    swapAndLiquidify(contractTokenBalance);                    if(playLotAddr != address(0) && LotState(playerLot) == 0){                        LotteryCheck(playerLot);                    }                    if(holdLotAddr != address(0) && LotState(holdersLot) == 0){                            LotteryCheck(holdersLot);                    }                           }            }            bool tradeFee = true;            if(_isExcludedFromFee[to] || _isExcludedFromFee[from]){                tradeFee=false;            }            _tokenTransfer(from,to,amount, tradeFee);        }"