"function _rebalance(uint256 totalUnderlying, uint256 allocatedUnderlying)        private        returns (bool)    {        if (!strategyActive) return false;        uint256 targetAllocation = getTargetAllocation();        IStrategy strategy = getStrategy();        uint256 bound = getBound();        uint256 target = totalUnderlying.scaledMul(targetAllocation);        uint256 upperBound = targetAllocation == 0 ? 0 : targetAllocation + bound;        upperBound = upperBound > ScaledMath.ONE ? ScaledMath.ONE : upperBound;        uint256 lowerBound = bound > targetAllocation ? 0 : targetAllocation - bound;        if (allocatedUnderlying > totalUnderlying.scaledMul(upperBound)) {            uint256 withdrawAmount = allocatedUnderlying - target;            strategy.withdraw(withdrawAmount);            currentAllocated = _computeNewAllocated(currentAllocated, withdrawAmount);        } else if (allocatedUnderlying < totalUnderlying.scaledMul(lowerBound)) {            uint256 depositAmount = target - allocatedUnderlying;            <mask0>;            currentAllocated += depositAmount;            strategy.deposit();        }        return true;    }"