"function _downPayWithETH(bytes memory data) internal {        (, address market, bytes memory data_, uint price, uint loanAmt) = abi.decode(data, (bytes4, address, bytes, uint, uint));        uint balOfLoanedToken = IERC20(_WETH_).balanceOf(address(this));        WETH9(_WETH_).<mask0>;        require(address(this).balance >= price, \"Insufficient downPay+flashLoan < price\");        require(IERC721(nft).ownerOf(tokenId) != address(this), \"nbp owned the nft already\");        require(market.isContract(), \"market.isContract == false\");        (bool success, bytes memory result) = market.call{value: price}(data_);        require(success, string(abi.encodePacked(\"call market.buy failure : \", _callRevertMessgae(result))));        require(IERC721(nft).ownerOf(tokenId) == address(this), \"nbp not owned the nft yet\");        IERC721(nft).approve(_bendWETHGateway_, tokenId);        IDebtToken(_bendDebtWETH_).approveDelegation(_bendWETHGateway_, uint(-1));        IWETHGateway(_bendWETHGateway_).borrowETH(loanAmt, nft, tokenId, address(this), 0);        require(address(this).balance >= balOfLoanedToken.add(2), \"Insufficient balance to repay flashLoan\");        WETH9(_WETH_).deposit{value: balOfLoanedToken.add(2)}();    }"