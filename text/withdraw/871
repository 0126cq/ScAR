"function _mintInternal(        uint256 depositAmountExternal,        uint88 fCashAmount,        address receiver,        uint32 minImpliedRate,        bool useUnderlying    ) internal nonReentrant {        require(!hasMatured(), \"fCash matured\");        (IERC20 token, bool isETH) = getToken(useUnderlying);        uint256 balanceBefore = isETH ? address(this).balance : token.balanceOf(address(this));        if (isETH) {            IERC20((address(WETH))).safeTransferFrom(msg.sender, address(this), depositAmountExternal);            WETH.<mask0>;            BalanceActionWithTrades[] memory action = EncodeDecode.encodeLendETHTrade(                getCurrencyId(),                getMarketIndex(),                depositAmountExternal,                fCashAmount,                minImpliedRate            );            NotionalV2.batchBalanceAndTradeAction{value: depositAmountExternal}(address(this), action);        } else {            token.safeTransferFrom(msg.sender, address(this), depositAmountExternal);            BatchLend[] memory action = EncodeDecode.encodeLendTrade(                getCurrencyId(),                getMarketIndex(),                fCashAmount,                minImpliedRate,                useUnderlying            );            NotionalV2.batchLend(address(this), action);        }        _mint(receiver, fCashAmount, \"\", \"\", false);        _sendTokensToReceiver(token, msg.sender, isETH, balanceBefore);    }"