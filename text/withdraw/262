"function prepareReturn(uint256 _debtOutstanding)        internal        override        returns (            uint256 _profit,            uint256 _loss,            uint256 _debtPayment    ){\t\t\t        if (_debtOutstanding > 0) {            (uint256 _amountFreed, uint256 _reportLoss) = liquidatePosition(_debtOutstanding);            _debtPayment = _amountFreed > _debtOutstanding? _debtOutstanding : _amountFreed;            _loss = _reportLoss;        }\t        uint256 debt = vault.strategies(address(this)).totalDebt;        uint256 currentValue = estimatedTotalAssets();        if (currentValue > debt){            uint256 target = currentValue.sub(debt);            uint256 _beforeWant = want.balanceOf(address(this));            uint256 _withdrawMShare = _convertWantToMToken(target);            if (_withdrawMShare > minShareToProfit){                uint256 _mmVault = IERC20(mmVault).balanceOf(address(this));                if (_mmVault < _withdrawMShare){                    _withdrawFromFarming(_withdrawMShare, _mmVault);                }                MMVault(mmVault).withdraw(_withdrawMShare);                uint256 _afterWant = want.balanceOf(address(this));                if (_afterWant > _beforeWant){                    uint256 actual = _afterWant.sub(_beforeWant);                    _profit = _profit.add(actual);                    _loss = _loss.add(actual < target? target.sub(actual) : 0);                }\t\t\t            }        }\t\t        uint256 _pendingMM = MMFarmingPool(mmFarmingPool).pendingMM(mmFarmingPoolId, address(this));        if (_pendingMM > 0){            MMFarmingPool(mmFarmingPool).<mask0>;\t\t        }        _profit = _profit.add(_disposeOfMM());        if (_profit > _loss){            _profit = _profit.sub(_loss);            _loss = 0;        } else{            _loss = _loss.sub(_profit);            _profit = 0;        }        return (_profit, _loss, _debtPayment);    }"