"function _payInterestToFunder(        uint256 fundingID,        uint256 depositID,        uint256 depositAmount,        uint256 depositMaturationTimestamp,        uint256 depositInterestOwed,        bool depositSurplusIsNegative,        uint256 depositSurplus,        uint256 currentMoneyMarketIncomeIndex,        bool early    ) internal {        Funding storage f = _getFunding(fundingID);        require(            depositID > f.fromDepositID && depositID <= f.toDepositID,            \"DInterest: Deposit not funded by fundingID\"        );        uint256 interestAmount =            f                .recordedFundedDepositAmount                .mul(currentMoneyMarketIncomeIndex)                .div(f.recordedMoneyMarketIncomeIndex)                .sub(f.recordedFundedDepositAmount);        sumOfRecordedFundedDepositAndInterestAmountDivRecordedIncomeIndex = sumOfRecordedFundedDepositAndInterestAmountDivRecordedIncomeIndex            .sub(            f.recordedFundedDepositAmount.mul(EXTRA_PRECISION).div(                f.recordedMoneyMarketIncomeIndex            )        );        f.recordedFundedDepositAmount = f.recordedFundedDepositAmount.sub(            depositAmount.add(depositInterestOwed)        );        f.recordedMoneyMarketIncomeIndex = currentMoneyMarketIncomeIndex;        sumOfRecordedFundedDepositAndInterestAmountDivRecordedIncomeIndex = sumOfRecordedFundedDepositAndInterestAmountDivRecordedIncomeIndex            .add(            f.recordedFundedDepositAmount.mul(EXTRA_PRECISION).div(                f.recordedMoneyMarketIncomeIndex            )        );        address funder = fundingNFT.ownerOf(fundingID);        uint256 transferToFunderAmount =            (early && depositSurplusIsNegative)                ? interestAmount.add(depositSurplus)                : interestAmount;        if (transferToFunderAmount > 0) {            transferToFunderAmount = moneyMarket.<mask0>;            if (transferToFunderAmount > 0) {                stablecoin.safeTransfer(funder, transferToFunderAmount);            }        }        mphMinter.mintFunderReward(            funder,            depositAmount,            f.creationTimestamp,            depositMaturationTimestamp,            interestAmount,            early        );    }"