"function withdrawFrom(        LendingPlatform platform,        address payable onBehalfOf,        IERC20Ext token,        uint256 amount,        uint256 minReturn    ) external override onlySwapImpl returns (uint256 returnedAmount) {        address lendingToken = getLendingToken(platform, token);        uint256 tokenBalanceBefore;        uint256 tokenBalanceAfter;        if (platform == LendingPlatform.AAVE_V1) {            tokenBalanceBefore = getBalance(token, address(this));            IAToken(lendingToken).redeem(amount);            tokenBalanceAfter = getBalance(token, address(this));            returnedAmount = tokenBalanceAfter.sub(tokenBalanceBefore);            require(returnedAmount >= minReturn, \"low returned amount\");            transferToken(onBehalfOf, token, returnedAmount);        } else if (platform == LendingPlatform.AAVE_V2) {            if (token == ETH_TOKEN_ADDRESS) {                address weth = address(aaveLendingPool.weth);                tokenBalanceBefore = IERC20Ext(weth).balanceOf(address(this));                returnedAmount = aaveLendingPool.lendingPoolV2.withdraw(                    weth,                    amount,                    address(this)                );                tokenBalanceAfter = IERC20Ext(weth).balanceOf(address(this));                require(                    tokenBalanceAfter.sub(tokenBalanceBefore) >= returnedAmount,                    \"invalid return\"                );                require(returnedAmount >= minReturn, \"low returned amount\");                IWeth(weth).<mask0>;                (bool success, ) = onBehalfOf.call{value: returnedAmount}(\"\");                require(success, \"transfer eth to sender failed\");            } else {                tokenBalanceBefore = getBalance(token, onBehalfOf);                returnedAmount = aaveLendingPool.lendingPoolV2.withdraw(                    address(token),                    amount,                    onBehalfOf                );                tokenBalanceAfter = getBalance(token, onBehalfOf);                require(                    tokenBalanceAfter.sub(tokenBalanceBefore) >= returnedAmount,                    \"invalid return\"                );                require(returnedAmount >= minReturn, \"low returned amount\");            }        } else {            tokenBalanceBefore = getBalance(token, address(this));            require(ICompErc20(lendingToken).redeem(amount) == 0, \"unable to redeem\");            tokenBalanceAfter = getBalance(token, address(this));            returnedAmount = tokenBalanceAfter.sub(tokenBalanceBefore);            require(returnedAmount >= minReturn, \"low returned amount\");            transferToken(onBehalfOf, token, returnedAmount);        }    }"