"function burn(address toToken, uint amount) external discountCHI {        IERC20 _toToken = IERC20(toToken);        ISFToken _SFToken = ISFToken(SFToken);        _rebase(getTotalValue().add(1));         uint senderBalance = _SFToken.balanceOf(msg.sender);        if (senderBalance < amount) {            amount = senderBalance;        }        _SFToken.burn(msg.sender, amount);        require(amount > 0, \"Not enough burn balance\");        amount = fromSFDecimals(amount);        uint feeTaken = getFee(amount);        emit LogFeeTaken(feeTaken);        amount -= feeTaken;        (address pool, PoolType poolType) = pickPoolToExtract(amount);        uint returnAmount;        if (poolType == PoolType.EXT) {            IExternalPool extPool = IExternalPool(pool);            address poolToken = extPool.enterToken();            uint poolTokenWithdraw = reverseQuote(                IERC20(poolToken),                IERC20(denominateTo),                amount            );            require(poolTokenWithdraw > 0, 'Reverse Quote is 0');            extPool.exitPosition(poolTokenWithdraw);            uint returnPoolTokenAmount = extPool.transferTokenTo(                poolToken,                address(this),                poolTokenWithdraw            );            returnPoolTokenAmount = returnPoolTokenAmount.sub(                topUpChi(poolToken)            );            if (toToken == address(0)) {                _toToken = WETH_ADDRESS;            }            returnAmount = swap(                IERC20(poolToken),                _toToken,                returnPoolTokenAmount,                true            );        } else {            (IERC20 token0, IERC20 token1, uint bal0, uint bal1) = burnUniLq(amount, pool);            returnAmount = swap(                token0,                _toToken,                bal0,                true            );            returnAmount += swap(                token1,                _toToken,                bal1,                true            );            returnAmount = returnAmount.sub(topUpChi(address(_toToken)));        }        if (toToken == address(WETH_ADDRESS)) {                IWETH(address(WETH_ADDRESS)).<mask0>;                msg.sender.transfer(returnAmount);            } else {                _toToken.universalTransfer(msg.sender, returnAmount);            }         emit LogBurnGiven(returnAmount);    }"