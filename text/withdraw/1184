"function withdraw(uint256 shares) public returns(bool success){        address token0 = pool.token0();        address token1 = pool.token1();        uint256 total1;        uint256 total0;        (total0, total1) = vault(myVault[msg.sender]).getTotalAmounts();        if(checkShares(msg.sender, address(myVault[msg.sender])) > shares){        if(allowedWealthArchitects[token0] == true){            uint256 amount0 = (((total0 * 1e18) / vault(myVault[msg.sender]).totalSupply()) * shares) / 1e18;            uint256 amount1 = (((total1 * 1e18) / vault(myVault[msg.sender]).totalSupply()) * shares) / 1e18;            vault(myVault[msg.sender]).transferFrom(msg.sender, address(this), shares);            vault(myVault[msg.sender]).<mask0>;        } else if(allowedWealthArchitects[token1] == true){            uint256 amount0 = (((total0 * 1e18) / vault(myVault[msg.sender]).totalSupply()) * shares) / 1e18;            uint256 amount1 = (((total1 * 1e18) / vault(myVault[msg.sender]).totalSupply()) * shares) / 1e18;            vault(myVault[msg.sender]).transferFrom(msg.sender, address(this), shares);            vault(myVault[msg.sender]).withdraw(shares, amount1 + (amount1 / 100), amount0 + (amount0 / 100), msg.sender);        }        } else {            success = false;        }    }"