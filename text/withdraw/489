"function withdrawToVault(uint256 amountUnderlying) external onlyVault override {        ( uint256[] memory coinsAmount,) = this.calculate(amountUnderlying);        uint256 needCrvEurs = coinsAmount[0];        uint256 balance = baseToken.balanceOf(address(this));        if (balance >= needCrvEurs){            baseToken.transfer(address(vault),needCrvEurs);        } else {            uint256 missAmount = needCrvEurs - balance;            uint256 shares = missAmount                                .mul(10 ** IERC20Metadata(fVault).decimals())                                .div(HarvestVault(fVault).getPricePerFullShare());            if (shares > 0){                shares = Math.min(shares,HarvestStakePool(fPool).balanceOf(address(this)));                HarvestStakePool(fPool).<mask0>;                HarvestVault(fVault).withdraw(shares);                uint256 withdrawAmount = baseToken.balanceOf(address(this));                baseToken.safeTransfer(address(vault),withdrawAmount);                dailyWithdrawAmount += withdrawAmount;            }        }    }"