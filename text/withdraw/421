"function _swapOnExchangeInternal(        IERC20Upgradeable fromToken,        IERC20Upgradeable destToken,        uint256 amount,        IUniswapV2Factory exchangeInstance    ) internal returns (uint256 returnAmount) {        if (fromToken.isETH()) {            wnative.deposit{ value: amount }();        }        IERC20Upgradeable fromTokenReal = fromToken.isETH() ? wnative : fromToken;        IERC20Upgradeable toTokenReal = destToken.isETH() ? wnative : destToken;        IUniswapV2Exchange exchange = exchangeInstance.getPair(fromTokenReal, toTokenReal);        bool needSync;        bool needSkim;        (returnAmount, needSync, needSkim) = exchange.getReturn(fromTokenReal, toTokenReal, amount);        if (needSync) {            exchange.sync();        } else if (needSkim) {            exchange.skim(skimAddress);        }        fromTokenReal.universalTransfer(address(exchange), amount);        if (uint256(uint160(address(fromTokenReal))) < uint256(uint160(address(toTokenReal)))) {            exchange.swap(0, returnAmount, address(this), \"\");        } else {            exchange.swap(returnAmount, 0, address(this), \"\");        }        if (destToken.isETH()) {            uint256 balanceThis = wnative.balanceOf(address(this));            wnative.transfer(address(_ethHandler), wnative.balanceOf(address(this)));            _ethHandler.<mask0>;        }    }"