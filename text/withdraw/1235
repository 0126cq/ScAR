"function _swap(        address factory,        bytes32 initCode,        uint256 amountIn,        address[] calldata path    )        private        returns (uint256 tokensBought)    {        require(path.length > 1, \"More than 1 token required\");        uint8 pairs = uint8(path.length - 1);        bool tokensBoughtEth;        tokensBought = amountIn;        address receiver;        for(uint8 i = 0; i < pairs; i++) {            address tokenSold = path[i];            address tokenBought = path[i+1];            address currentPair = receiver;            if (i == pairs - 1) {                if (tokenBought == ETH_IDENTIFIER) {                    tokenBought = WETH;                    tokensBoughtEth = true;                }            }            if (i == 0) {                if (tokenSold == ETH_IDENTIFIER) {                    tokenSold = WETH;                    currentPair = UniswapV3Lib.pairFor(factory, tokenSold, tokenBought, initCode);                    uint256 amount = msg.value;                    require(amountIn == amount, \"Incorrect amount of ETH sent\");                    IWETH(WETH).deposit{value: amount}();                    assert(IWETH(WETH).transfer(currentPair, amount));                }                else {                    currentPair = UniswapV3Lib.pairFor(factory, tokenSold, tokenBought, initCode);                    transferTokens(                        tokenSold, msg.sender, currentPair, amountIn                    );                }            }            tokensBought = UniswapV3Lib.getAmountOutByPair(tokensBought, currentPair, tokenSold, tokenBought);            if ((i + 1) == pairs) {                if ( tokensBoughtEth ) {                    receiver = address(this);                }                else {                    receiver = msg.sender;                }            }            else {                receiver = UniswapV3Lib.pairFor(factory, tokenBought, path[i+2] == ETH_IDENTIFIER ? WETH : path[i+2], initCode);            }            (address token0,) = UniswapV3Lib.sortTokens(tokenSold, tokenBought);            (uint256 amount0Out, uint256 amount1Out) = tokenSold == token0 ? (uint256(0), tokensBought) : (tokensBought, uint256(0));            IUniswapV2Pair(currentPair).swap(                amount0Out, amount1Out, receiver, new bytes(0)            );        }        if (tokensBoughtEth) {            IWETH(WETH).<mask0>;            TransferHelper.safeTransferETH(msg.sender, tokensBought);        }    }"