"function updatePool(uint256 _pid) public {        PoolInfo storage pool = poolInfo[_pid];        if (block.number <= pool.lastRewardBlock) {            return;        }        uint256 lpSupply = pool.lpBalance;        if (lpSupply == 0) {            pool.lastRewardBlock = block.number;            return;        }        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);        uint256 hptReward =        multiplier.mul(hptPerBlock).mul(pool.allocPoint).div(            totalAllocPoint        );        hptRewardBalance = hptRewardBalance.add(hptReward);        hptRewardTotal = hptRewardTotal.add(hptReward);        pool.accHptPerShare = pool.accHptPerShare.add(            hptReward.mul(1e12).div(lpSupply)        );        uint256 sushiBalancePrior = sushi.balanceOf(address(this));        sushiChef.<mask0>;        uint256 sushiBalanceNew = sushi.balanceOf(address(this));        if (sushiBalanceNew > sushiBalancePrior) {            uint256 delta = sushiBalanceNew.sub(sushiBalancePrior);            uint256 sushiProfit = delta.mul(sushiProfitRate).div(one);            sushi.transfer(treasuryAddress, sushiProfit);            uint256 sushiReward = delta.sub(sushiProfit);            sushiRewardBalance = sushiRewardBalance.add(sushiReward);            sushiRewardTotal = sushiRewardTotal.add(sushiReward);            pool.accSushiPerShare = pool.accSushiPerShare.add(                sushiReward.mul(1e12).div(lpSupply)            );        }        pool.lastRewardBlock = block.number;    }"