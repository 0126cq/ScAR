"function _withdraw(address _accountAddr, address _token, uint256 _amount, bool _isCommission) internal returns (uint256, uint256) {        uint256 calcAmount = _amount;        require(calcAmount <= getDepositBalanceCurrent(_token, _accountAddr), \"Insufficient balance\");        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];        uint256 lastBlock = tokenInfo.getLastDepositBlock();        uint256 blockNumber = getBlockNumber();        calculateDepositFIN(lastBlock, _token, _accountAddr, blockNumber);        uint256 principalBeforeWithdraw = tokenInfo.getDepositPrincipal();        if (lastBlock == 0)            tokenInfo.withdraw(calcAmount, INT_UNIT, blockNumber);        else {            uint256 accruedRate = globalConfig.bank().getDepositAccruedRate(_token, lastBlock);            tokenInfo.<mask0>;        }        uint256 principalAfterWithdraw = tokenInfo.getDepositPrincipal();        if(principalAfterWithdraw == 0) {            uint8 tokenIndex = globalConfig.tokenInfoRegistry().getTokenIndex(_token);            unsetFromDepositBitmap(_accountAddr, tokenIndex);        }        uint256 commission = 0;        if (_isCommission && _accountAddr != globalConfig.deFinerCommunityFund()) {            commission = calcAmount.sub(principalBeforeWithdraw.sub(principalAfterWithdraw)).mul(globalConfig.deFinerRate()).div(100);            deposit(globalConfig.deFinerCommunityFund(), _token, commission);            calcAmount = calcAmount.sub(commission);        }        return (calcAmount, commission);    }"