"function deallocate(uint256[] memory amounts) public override onlyGuardian {        uint256 lt = _tokens.length;        uint256 la = amounts.length;        for (uint256 i; i <= lt; i++) {            if (amounts[i] != 0) {                address reactor;                if (i < lt) reactor = reactors[i];                if (lt + 1 < la) {                    if (amounts[i] == nmax)                        amounts[i] = i < lt                            ? reactor.balanceOf(self)                            : staking.balanceOf(self);                    if (0 < amounts[i])                        if (i < lt) reactor.requestWithdrawal(amounts[i]);                        else staking.requestWithdrawal(amounts[i], 0);                } else {                    uint256 cycle = manager.getCurrentCycleIndex();                    (uint256 minCycle, uint256 amount) = i < lt                        ? reactor.requestedWithdrawals()                        : staking.withdrawalRequestsByIndex(self, 0);                    if (amounts[i] == nmax) amounts[i] = amount;                    if (cycle < minCycle)                        revert GeneralizedTokemak_WithdrawalNotReady(i);                    if (0 < amounts[i])                        if (i < lt) reactor.<mask0>;                        else staking.withdraw(amounts[i]);                }            }        }    }"