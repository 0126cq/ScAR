"function liquidate(address[] memory liquidationCandidates)        external        noIntermediary        returns (uint256 maintainerCut)    {        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);        bool canTakeNow = isAuthorized || maintainerIsFailing();        maintainerCut = calcLiquidationAmounts(            liquidationCandidates,            isAuthorized        );        uint256 sale2pegAmount = liquidateToPeg();        uint256 peg2targetCost = liquidateFromPeg();        delete liquidationTokens;        uint256 costWithCut =            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100;        if (costWithCut > sale2pegAmount) {            emit LiquidationShortfall(costWithCut - sale2pegAmount);            canTakeNow =                canTakeNow &&                IERC20(peg).balanceOf(fund()) > costWithCut;        }        address loser = address(0);        if (!canTakeNow) {            loser = Admin(admin()).getUpdatedCurrentStaker();        }        for (            uint256 traderIdx = 0;            tradersToLiquidate.length > traderIdx;            traderIdx++        ) {            address traderAddress = tradersToLiquidate[traderIdx];            CrossMarginAccount storage account = marginAccounts[traderAddress];            uint256 holdingsValue = holdingsInPeg(account);            uint256 borrowValue = loanInPeg(account);            uint256 maintainerCut4Account =                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;            maintainerCut += maintainerCut4Account;            if (!canTakeNow) {                AccountLiqRecord storage liqAttackRecord =                    stakeAttackRecords[traderAddress];                liqAttackRecord.amount = maintainerCut4Account;                liqAttackRecord.stakeAttacker = msg.sender;                liqAttackRecord.blockNum = block.number;                liqAttackRecord.loser = loser;            }            uint256 forfeited =                maintainerCut4Account + (borrowValue * 101) / 100;            if (holdingsValue > forfeited) {                Fund(fund()).<mask0>;            }            emit AccountLiquidated(traderAddress);            deleteAccount(account);        }        avgLiquidationPerCall =            (avgLiquidationPerCall * 99 + maintainerCut) /            100;        if (canTakeNow) {            Fund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);        }        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();        if (isAuthorized) {            if (maintenanceFailures[currentMaintainer] > maintainerCut) {                maintenanceFailures[currentMaintainer] -= maintainerCut;            } else {                maintenanceFailures[currentMaintainer] = 0;            }        } else {            maintenanceFailures[currentMaintainer] += maintainerCut;        }    }"