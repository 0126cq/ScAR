"function _withdrawCollateral(uint256 _amount) internal virtual {        uint256 _debt;        uint256 _balanceAfter;        uint256 _balanceBefore;        uint256 _amountWithdrawn;        uint256 _amountNeeded = _amount;        uint256 _totalAmountWithdrawn;        for (uint256 i; i < withdrawQueue.length; i++) {            _debt = strategy[withdrawQueue[i]].totalDebt;            if (_debt == 0) {                continue;            }            if (_amountNeeded > _debt) {                _amountNeeded = _debt;            }            _balanceBefore = tokensHere();            try IStrategy(withdrawQueue[i]).<mask0> {} catch {                continue;            }            _balanceAfter = tokensHere();            _amountWithdrawn = _balanceAfter - _balanceBefore;            strategy[withdrawQueue[i]].totalDebt -= _amountWithdrawn;            totalDebt -= _amountWithdrawn;            _totalAmountWithdrawn += _amountWithdrawn;            if (_totalAmountWithdrawn >= _amount) {                break;            }            _amountNeeded = _amount - _totalAmountWithdrawn;        }    }"