"function withdraw(address _token, uint256 _amount) external override onlyGovernor {        stakingTokenData memory stakingToken = stakingTokenInfo[_token];        address dividendToken = dividendTokenMapping[_token];        require(stakingToken.exists, \"Unsupported staking token\");        require(dividendToken != address(0), \"Unsupported dividend token\");        treasury.allocatorManage(dividendToken, _amount);        uint256 valueWithdrawn = treasury.tokenValue(dividendToken, _amount);        emit TreasuryAssetDeployed(dividendToken, _amount, valueWithdrawn);        if (stakingToken.isLiquidityPool) {            IERC20(dividendToken).safeApprove(address(liquidityStaking), _amount);            liquidityStaking.<mask0>;        } else {            IERC20(dividendToken).safeApprove(address(inventoryStaking), _amount);            inventoryStaking.withdraw(stakingToken.vaultId, _amount);         }        uint256 balance = IERC20(_token).balanceOf(address(this));        uint256 value = treasury.tokenValue(_token, balance);        IERC20(_token).safeApprove(address(treasury), balance);        treasury.deposit(balance, _token, value);        emit TreasuryAssetReturned(_token, balance, value);    }"