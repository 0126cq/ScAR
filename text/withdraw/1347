"function withdraw(uint256 _pid, uint256 _amount) public {        PoolInfo storage pool = poolInfo[_pid];        UserInfo storage user = userInfo[_pid][msg.sender];        updatePool(_pid);        uint256 pending = user.amount.mul(pool.accHolyPerShare).div(1e12).sub(user.rewardDebt);        safeTokenTransfer(msg.sender, pending);        if (pool.stakeable) {            Stakeable(pool.stakeableContract).<mask0>;            totalStaked[address(pool.stakedHoldableToken)] = totalStaked[address(pool.stakedHoldableToken)].sub(user.stakedLPAmount);            user.stakedLPAmount = 0;            uint256 balance = pool.lpToken.balanceOf(address(this));            if (user.amount < balance) {                pool.lpToken.safeTransfer(address(msg.sender), user.amount);            } else {                pool.lpToken.safeTransfer(address(msg.sender), balance);            }            user.amount = 0;            user.rewardDebt = 0;        } else {            require(user.amount >= _amount, \"withdraw: not good\");            pool.lpToken.safeTransfer(address(msg.sender), _amount);            totalStaked[address(pool.lpToken)] = totalStaked[address(pool.lpToken)].sub(_amount);            user.amount = user.amount.sub(_amount);            user.rewardDebt = user.amount.mul(pool.accHolyPerShare).div(1e12);        }        emit Withdraw(msg.sender, _pid, _amount);    }"