"function repay(uint amountCollateral, address from) public onlyPlatform returns(uint repayAmount, uint repayInterest)    {        require(amountCollateral <= borrows[from].amountCollateral, \"AAAA: NOT ENOUGH COLLATERAL\");        require(amountCollateral > 0, \"AAAA: INVALID AMOUNT\");        uint amountIn = IERC20(supplyToken).balanceOf(address(this)).sub(remainSupply);        updateInterests();        borrows[from].interests = borrows[from].interests.add(interestPerBorrow.mul(borrows[from].amountBorrow).div(1e18).sub(borrows[from].interestSettled));        repayAmount = borrows[from].amountBorrow.mul(amountCollateral).div(borrows[from].amountCollateral);        repayInterest = borrows[from].interests.mul(amountCollateral).div(borrows[from].amountCollateral);        totalPledge = totalPledge.sub(amountCollateral);        totalBorrow = totalBorrow.sub(repayAmount);        borrows[from].amountCollateral = borrows[from].amountCollateral.sub(amountCollateral);        borrows[from].amountBorrow = borrows[from].amountBorrow.sub(repayAmount);        borrows[from].interests = borrows[from].interests.sub(repayInterest);        borrows[from].interestSettled = borrows[from].amountBorrow == 0 ? 0 : interestPerBorrow.mul(borrows[from].amountBorrow).div(1e18);        remainSupply = remainSupply.add(repayAmount.add(repayInterest));        if(collateralStrategy != address(0))        {            ICollateralStrategy(collateralStrategy).<mask0>;        }        TransferHelper.safeTransfer(collateralToken, msg.sender, amountCollateral);        require(amountIn >= repayAmount.add(repayInterest), \"AAAA: INVALID AMOUNT\");        _mintToPool();        if(repayAmount > 0) {            _decreaseBorrowerProductivity(from, repayAmount);        }        emit Repay(from, repayAmount, amountCollateral, repayInterest);    }"