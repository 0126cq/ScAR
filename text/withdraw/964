"function harvest() public override onlyBenevolent {        gauge.claim_rewards();        ICurveMintr(mintr).mint(address(gauge));        uint256 _ldo = ldo.balanceOf(address(this));        uint256 _crv = crv.balanceOf(address(this));        if (_crv > 0) {            _swapToNeurAndDistributePerformanceFees(address(crv), sushiRouter);        }        if (_ldo > 0) {            _swapToNeurAndDistributePerformanceFees(address(ldo), sushiRouter);        }        _ldo = ldo.balanceOf(address(this));        _crv = crv.balanceOf(address(this));        if (_crv > 0) {            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);            if (_keepCRV > 0) {                IERC20(crv).safeTransfer(                    IController(controller).treasury(),                    _keepCRV                );            }            _crv = _crv.sub(_keepCRV);            _swapUniswap(address(crv), weth, _crv);        }        if (_ldo > 0) {            _swapUniswap(address(ldo), weth, _ldo);        }        IWETH(weth).<mask0>;        uint256 _eth = address(this).balance;        stEth.submit{value: _eth / 2}(strategist);        _eth = address(this).balance;        uint256 _stEth = stEth.balanceOf(address(this));        uint256[2] memory liquidity;        liquidity[0] = _eth;        liquidity[1] = _stEth;        curve.add_liquidity{value: _eth}(liquidity, 0);        deposit();    }"