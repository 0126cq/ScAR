"function transfer(address contractAddress, address toAddress, uint256 amountOfCollate) public returns(bool)    {        address _customerAddress = msg.sender;        require(contractAddressRecord[contractAddress] == true);        require(walletAddressRecord[_customerAddress] == true);        require(amountOfCollate <= balanceLedger[_customerAddress][contractAddress].tokenBalance);        if(walletAddressRecord[toAddress] == false){            walletAddressRecord[toAddress] = true;        }        if(myDividends(contractAddress, true) > 0) <mask0>;        uint256 _tokenFee = SafeMath.div(amountOfCollate, dividendFee);        uint256 _taxedTokens = SafeMath.sub(amountOfCollate, _tokenFee);        uint256 _dividends = collateralToToken_(contractAddress, _tokenFee);        tokenLedger[contractAddress].supply = SafeMath.sub(tokenLedger[contractAddress].supply, _tokenFee);        balanceLedger[_customerAddress][contractAddress].tokenBalance = SafeMath.sub(balanceLedger[_customerAddress][contractAddress].tokenBalance, amountOfCollate);        balanceLedger[toAddress][contractAddress].tokenBalance = SafeMath.add(balanceLedger[toAddress][contractAddress].tokenBalance, _taxedTokens);        balanceLedger[_customerAddress][contractAddress].payOut -= (int256) (tokenLedger[contractAddress].dividend * amountOfCollate);        balanceLedger[toAddress][contractAddress].payOut += (int256) (tokenLedger[contractAddress].dividend * _taxedTokens);        tokenLedger[contractAddress].dividend = SafeMath.add(tokenLedger[contractAddress].dividend, (_dividends * magnitude) / tokenLedger[contractAddress].supply);        emit onTransfer(contractAddress, _customerAddress, toAddress, _taxedTokens);        return true;    }"