"function withdraw(uint256 _shares) public notContract {    UserInfo storage user = userInfo[msg.sender];    require(_shares > 0, \"Nothing to withdraw\");    require(_shares <= user.shares, \"Withdraw amount exceeds balance\");    uint256 currentAmount = (balanceOf().mul(_shares)).div(totalShares);    user.shares = user.shares.sub(_shares);    totalShares = totalShares.sub(_shares);    uint256 bal = available();    if (bal < currentAmount) {      uint256 balWithdraw = currentAmount.sub(bal);      IMasterChef(masterchef).<mask0>;      uint256 balAfter = available();      uint256 diff = balAfter.sub(bal);      if (diff < balWithdraw) {        currentAmount = bal.add(diff);      }    }    if (block.timestamp < user.lastDepositedTime.add(withdrawFeePeriod)) {      uint256 currentWithdrawFee = currentAmount.mul(withdrawFee).div(10000);      token.safeTransfer(treasury, currentWithdrawFee);      currentAmount = currentAmount.sub(currentWithdrawFee);    }    if (user.shares > 0) {      user.cakeAtLastUserAction = user.shares.mul(balanceOf()).div(totalShares);    } else {      user.cakeAtLastUserAction = 0;    }    user.lastUserActionTime = block.timestamp;    token.safeTransfer(msg.sender, currentAmount);    emit Withdraw(msg.sender, currentAmount, _shares);  }"