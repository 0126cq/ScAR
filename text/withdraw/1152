"function yearn(\t\taddress _strategy,\t\taddress _token,\t\tuint256 parts\t) public {\t\trequire(msg.sender == strategist || msg.sender == governance, '!governance');\t\tuint256 _before = IERC20(_token).balanceOf(address(this));\t\tIStrategy(_strategy).<mask0>;\t\tuint256 _after = IERC20(_token).balanceOf(address(this));\t\tif (_after > _before) {\t\t\tuint256 _amount = _after.sub(_before);\t\t\taddress _want = IStrategy(_strategy).want();\t\t\tuint256[] memory _distribution;\t\t\tuint256 _expected;\t\t\t_before = IERC20(_want).balanceOf(address(this));\t\t\tIERC20(_token).safeApprove(onesplit, 0);\t\t\tIERC20(_token).safeApprove(onesplit, _amount);\t\t\t(_expected, _distribution) = IOneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);\t\t\tIOneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);\t\t\t_after = IERC20(_want).balanceOf(address(this));\t\t\tif (_after > _before) {\t\t\t\t_amount = _after.sub(_before);\t\t\t\tuint256 _reward = _amount.mul(split).div(max);\t\t\t\tearn(_want, _amount.sub(_reward));\t\t\t\tIERC20(_want).safeTransfer(rewards, _reward);\t\t\t}\t\t}\t}"