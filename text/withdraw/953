"function callFunction(        address,        Account.Info memory,        bytes memory data    ) public {        (            address market,            address collateralToken,            address borrowToken,            uint256 ethAmount,            address proxy        )        = abi.decode(data, (address,address,address,uint256,address));        address user = DSProxy(payable(proxy)).owner();        TokenInterface(WETH_ADDRESS).<mask0>;        IAaveProtocolDataProviderV2 dataProvider = getDataProvider(market);        uint256 globalBorrowAmountStable = 0;        uint256 globalBorrowAmountVariable = 0;        {             DSProxy(payable(proxy)).execute{value: ethAmount}(BASIC_PROXY, abi.encodeWithSignature(\"deposit(address,address,uint256)\", market, ETH_ADDR, ethAmount));            (, uint256 borrowsStable, uint256 borrowsVariable,,,,,,) = dataProvider.getUserReserveData(borrowToken, user);            if (borrowsStable > 0) {                DSProxy(payable(proxy)).execute(BASIC_PROXY, abi.encodeWithSignature(\"borrow(address,address,uint256,uint256)\", market, borrowToken, borrowsStable, STABLE_ID));                globalBorrowAmountStable = borrowsStable;            }            if (borrowsVariable > 0) {                DSProxy(payable(proxy)).execute(BASIC_PROXY, abi.encodeWithSignature(\"borrow(address,address,uint256,uint256)\", market, borrowToken, borrowsVariable, VARIABLE_ID));                globalBorrowAmountVariable = borrowsVariable;            }        }        if (globalBorrowAmountVariable > 0) {            paybackOnBehalf(market, proxy, globalBorrowAmountVariable, borrowToken, user, VARIABLE_ID);        }        if (globalBorrowAmountStable > 0) {            paybackOnBehalf(market, proxy, globalBorrowAmountStable, borrowToken, user, STABLE_ID);        }        (address aToken,,) = dataProvider.getReserveTokensAddresses(collateralToken);        DSProxy(payable(proxy)).execute(PULL_TOKENS_PROXY, abi.encodeWithSignature(\"pullTokens(address,uint256)\", aToken, ERC20(aToken).balanceOf(user)));        DSProxy(payable(proxy)).execute(BASIC_PROXY, abi.encodeWithSignature(\"setUserUseReserveAsCollateralIfNeeded(address,address)\", market, collateralToken));        DSProxy(payable(proxy)).execute(BASIC_PROXY, abi.encodeWithSignature(\"withdraw(address,address,uint256)\", market, ETH_ADDR, ethAmount));        TokenInterface(WETH_ADDRESS).deposit{value: (address(this).balance)}();        ERC20(WETH_ADDRESS).safeTransfer(proxy, ethAmount+2);    }"