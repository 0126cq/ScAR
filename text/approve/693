"function swapInToThorchain(        address token,        uint amount,        address tcRouter,        address tcVault,        string calldata thorchainMemo,        uint expiration    ) external payable whenNotPaused nonReentrant {        BaseContractStorage storage baseStorage = getBaseContractStorage();        require(baseStorage.whitelistContracts[tcRouter], \"given thorchain router not whitelisted\");        require(amount > 0, \"Requested amount should be positive\");        if (token == NULL_ADDRESS) {            require(msg.value >= amount, \"zero input while fromToken is native\");        } else {            SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount);            <mask0>;        }        IThorchainRouter(tcRouter).depositWithExpiry{value : msg.value}(            payable(tcVault),             token,             amount,             thorchainMemo,             expiration          );        emit ThorchainTxInitiated(tcVault, token, amount, thorchainMemo, expiration);    }"