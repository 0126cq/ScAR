"function flashMultiPayback(address[] calldata tokens, uint[] calldata getId, uint[] calldata setId) external payable {        LiqudityInterface liquidityContract = LiqudityInterface(getLiquidityAddress());        uint _length = tokens.length;        for (uint i = 0; i < _length; i++) {            for (uint j = 0; j < _length; j++) {                if (tokens[i] == tokens[j] && i != j) require(false, \"tkn-repeated\");            }            uint _amt;            if (tokens[i] == getAddressETH()) {                CETHInterface cethContract = CETHInterface(liquidityContract.tknToCTkn(tokens[i]));                _amt = cethContract.borrowBalanceCurrent(address(liquidityContract));                cethContract.repayBorrowBehalf.value(_amt)(address(liquidityContract));            } else {                CTokenInterface ctokenContract = CTokenInterface(liquidityContract.tknToCTkn(tokens[i]));                _amt = ctokenContract.borrowBalanceCurrent(address(liquidityContract));                TokenInterface(tokens[i]).<mask0>;                require(ctokenContract.repayBorrowBehalf(address(liquidityContract), _amt) == 0, \"repay-failed\");            }            setUint(setId[i], _amt);            emit LogFlashPayback(tokens[i], _amt, getId[i], setId[i]);            bytes32 _eventCode = keccak256(\"LogFlashPayback(address,uint256,uint256,uint256)\");            bytes memory _eventParam = abi.encode(tokens[i], _amt, getId[i], setId[i]);            (uint _type, uint _id) = connectorID();            EventInterface(getEventAddr()).emitEvent(_type, _id, _eventCode, _eventParam);        }    }"