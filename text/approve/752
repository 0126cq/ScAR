"function burnToEther(        address payable receiver,        uint256 burnAmount,        uint256 minPriceAllowed)        external        nonReentrant        returns (uint256)    {        uint256 loanAmountOwed = _burnToken(burnAmount, minPriceAllowed);        if (loanAmountOwed > 0) {            if (wethContract != loanTokenAddress) {                address oracle = IBZx(bZxContract).oracleAddresses(bZxOracle);                uint256 tempAllowance = ERC20(loanTokenAddress).allowance(address(this), oracle);                if (tempAllowance < loanAmountOwed) {                    if (tempAllowance > 0) {                        require(ERC20(loanTokenAddress).approve(oracle, 0), \"token approval reset failed\");                    }                    require(ERC20(loanTokenAddress).<mask0>, \"token approval failed\");                }                (uint256 destTokenAmountReceived,) = IBZxOracle(oracle).tradeUserAsset(                    loanTokenAddress,                    address(0),                     receiver,                     receiver,                     loanAmountOwed,                    MAX_UINT,                    0                 );                loanAmountOwed = destTokenAmountReceived;            } else {                WETHInterface(wethContract).withdraw(loanAmountOwed);                require(receiver.send(loanAmountOwed), \"transfer of ETH failed\");            }        }        return loanAmountOwed;    }"