"function executeOperation(        address[] calldata assets,        uint[] calldata amounts,        uint[] calldata premiums,        address initiator,        bytes calldata params    ) external returns (bool) {        if (msg.sender != address(flashLender)) revert Unauthorized(msg.sender);        if (initiator != address(this)) revert IllegalArgument(\"flashloan initiator must be self\");        Details memory details = abi.decode(params, (Details));        uint256 repayAmount = amounts[0] + premiums[0];        uint256 collateralBalance = IERC20(assets[0]).balanceOf(address(this));        <mask0>;        IAlchemistV2(details.alchemist).depositUnderlying(details.yieldToken, collateralBalance, details.recipient, 0);        try IAlchemistV2(details.alchemist).mintFrom(details.recipient, details.targetDebt, address(this)) {        } catch {            revert MintFailure();        }        {            address debtToken = IAlchemistV2(details.alchemist).debtToken();            uint256 amountOut = _curveSwap(                details.pool,                 debtToken,                 details.poolInputIndex,                 details.poolOutputIndex,                 repayAmount            );            _maybeConvertCurveOutput(amountOut);            uint256 excessCollateral = amountOut - repayAmount;            if (excessCollateral > 0) {                IAlchemistV2(details.alchemist).depositUnderlying(details.yieldToken, excessCollateral, details.recipient, 0);            }        }        approve(assets[0], address(flashLender));        uint256 balance = IERC20(assets[0]).balanceOf(address(this));        if (balance != repayAmount) {            revert InexactTokens(balance, repayAmount);        }        return true;    }"