"function deposit(         uint _amount,         uint _maxPrice,        address _depositor    ) external returns ( uint ) {        require( _depositor != address(0), \"Invalid address\" );        decayDebt();        require( totalDebt <= terms.maxDebt, \"Max capacity reached\" );        uint priceInUSD = bondPriceInUSD();         uint nativePrice = _bondPrice();        require( _maxPrice >= nativePrice, \"Slippage limit: more than max price\" );         uint value = ITreasury( treasury ).valueOf( principle, _amount );        uint payout = payoutFor( value );         require( payout >= 10000000, \"Bond too small\" );         require( payout <= maxPayout(), \"Bond too large\");         uint fee = payout.mul( terms.fee ).div( 10000 );        uint profit = value.sub( payout ).sub( fee );        IERC20( principle ).safeTransferFrom( msg.sender, address(this), _amount );        IERC20( principle ).<mask0>;        ITreasury( treasury ).deposit( _amount, principle, profit );        if ( fee != 0 ) {             IERC20( Dawgsta ).safeTransfer( DAO, fee );         }        totalDebt = totalDebt.add( value );         bondInfo[ _depositor ] = Bond({             payout: bondInfo[ _depositor ].payout.add( payout ),            vesting: terms.vestingTerm,            lastTime: uint32(block.timestamp),            pricePaid: priceInUSD        });        emit BondCreated( _amount, payout, block.timestamp.add( terms.vestingTerm ), priceInUSD );        emit BondPriceChanged( bondPriceInUSD(), _bondPrice(), debtRatio() );        adjust();         return payout;     }"