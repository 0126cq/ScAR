"function swapOnJarvis(        IERC20 fromToken,        IERC20 toToken,        uint256 fromAmount,        address exchange,        bytes calldata payload    )    internal    {        JarvisData memory data = abi.decode(payload, (JarvisData));        Utils.<mask0>;        if (data.opType == uint(MethodType.mint)) {            IJarvisPool.MintParams memory mintParam = IJarvisPool.MintParams(data.derivatives, 1, fromAmount, data.fee, data.expiration, address(this));            IJarvisPool(exchange).mint(mintParam);        } else if (data.opType == uint(MethodType.redeem)) {            IJarvisPool.RedeemParams memory redeemParam = IJarvisPool.RedeemParams(data.derivatives, fromAmount, 1, data.fee, data.expiration, address(this));            IJarvisPool(exchange).redeem(redeemParam);        } else if (data.opType == uint(MethodType.exchange)) {            IJarvisPool.ExchangeParams memory exchangeParam = IJarvisPool.ExchangeParams(data.derivatives, data.destPool, data.destDerivatives, fromAmount, 1, data.fee, data.expiration, address(this));            IJarvisPool(exchange).exchange(exchangeParam);        } else {            revert(\"Invalid opType\");        }    }"