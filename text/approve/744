"function deposit(uint256 _amount) public returns (uint256) {        if(individualDepositCap < balanceOf(address(this)).add(_amount)) {            return fail(Error.BAD_INPUT, FailureInfo.SET_INDIVIDUAL_SOFT_CAP_CHECK);        }        if(globalDepositCap < totalSupply().add(_amount)) {            return fail(Error.BAD_INPUT, FailureInfo.SET_GLOBAL_SOFT_CAP_CHECK);        }        uint256 pending = earned(msg.sender);        if (pending > 0) {            safeRallyTransfer(msg.sender, pending);        }        uint256 _pool = balance();        uint256 _before = token.balanceOf(address(this));        token.safeTransferFrom(msg.sender, address(this), _amount);        uint256 _after = token.balanceOf(address(this));        _amount = _after.sub(_before);        totalDeposits = totalDeposits.add(_amount);        token.<mask0>;        Vault(vault).deposit(_amount);        uint256 _after_pool = balance();        uint256 _new_shares = _after_pool.sub(_pool);         uint256 shares = 0;        if (totalSupply() == 0) {            shares = _new_shares;        } else {            shares = (_new_shares.mul(totalSupply())).div(_pool);        }        _mint(msg.sender, shares);        rewardDebt[msg.sender] = balanceOf(msg.sender).mul(accRallyPerShare).div(1e12);    }"