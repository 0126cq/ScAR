"function initialize(        uint256 _poolID,        address _owner,        uint256 _releasePeriod,        CurveArgs memory _curveArgs,        Reward[] memory _rewards,        Weth2Deposit memory _weth2Deposit    ) public initializer {        require(curveLpToken == address(0), \"Initialized\");        require(_curveArgs.depositPosition < _curveUnderlyingsSize(), \"Deposit token position invalid\");        OwnableUpgradeable.__Ownable_init();        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();        (address _crvLp, , , address _rewardPool, , bool shutdown) = IBooster(BOOSTER).poolInfo(_poolID);        curveLpToken = _crvLp;        address _deposit = _curveArgs.deposit == WETH ? ETH : _curveArgs.deposit;        require(!shutdown, \"Convex Pool is not active\");        require(_deposit == _curveUnderlyingCoins(_crvLp, _curveArgs.depositPosition), \"Deposit token invalid\");        ERC20Upgradeable.__ERC20_init(            string(abi.encodePacked(\"Idle \", IERC20Detailed(_crvLp).name(), \" Convex Strategy\")),            string(abi.encodePacked(\"idleCvx\", IERC20Detailed(_crvLp).symbol()))        );        poolID = _poolID;        rewardPool = _rewardPool;        curveLpDecimals = IERC20Detailed(_crvLp).decimals();        ONE_CURVE_LP_TOKEN = 10**(curveLpDecimals);        curveDeposit = _curveArgs.deposit;        depositor = _curveArgs.depositor;        depositPosition = _curveArgs.depositPosition;        releaseBlocksPeriod = _releasePeriod;        setBlocksPerYear(2465437);         IERC20Detailed(_crvLp).<mask0>;        for (uint256 i = 0; i < _rewards.length; i++) {            addReward(_rewards[i].reward, _rewards[i].router, _rewards[i].path);        }        if (_curveArgs.deposit != WETH) setWeth2Deposit(_weth2Deposit.router, _weth2Deposit.path);        transferOwnership(_owner);    }"