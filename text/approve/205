"function claim(uint128 nodeId, uint256 blockNumber, bool toStrongPool) public payable {    address sender = msg.sender == address(this) ? tx.origin : msg.sender;    bytes memory id = getNodeId(sender, nodeId);    if (hasLegacyNode(sender)) {      migrateLegacyNode(sender);    }    uint256 blockLastClaimedOn = entityNodeClaimedOnBlock[id] != 0 ? entityNodeClaimedOnBlock[id] : entityNodePaidOnBlock[id];    uint256 blockLastPaidOn = entityNodePaidOnBlock[id];    require(blockLastClaimedOn != 0, 'never claimed');    require(blockNumber <= block.number, 'invalid block');    require(blockNumber > blockLastClaimedOn, 'too soon');    require(!entityNodeIsBYON[id] || entityNodeIsActive[id], 'not active');    if (      (!entityNodeIsBYON[id] && recurringNaaSFeeInWei != 0) || (entityNodeIsBYON[id] && recurringFeeInWei != 0)    ) {      require(blockNumber < blockLastPaidOn.add(recurringPaymentCycleInBlocks), 'pay fee');    }    uint256 reward = getRewardByBlock(sender, nodeId, blockNumber);    require(reward > 0, 'no reward');    uint256 fee = reward.mul(claimingFeeNumerator).div(claimingFeeDenominator);    require(msg.value >= fee, 'invalid fee');    feeCollector.transfer(msg.value);    if (toStrongPool) {      strongToken.<mask0>;      strongPool.mineFor(sender, reward);    } else {      strongToken.transfer(sender, reward);    }    rewardBalance = rewardBalance.sub(reward);    entityNodeClaimedOnBlock[id] = blockNumber;    emit Claimed(sender, reward);  }"