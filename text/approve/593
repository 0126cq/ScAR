"function borrow(uint amountCollateral, uint repayAmount, uint expectBorrow, address from) public onlyPlatform    {        uint amountIn = IERC20(collateralToken).balanceOf(address(this));        if(collateralStrategy == address(0))            amountIn = amountIn.sub(totalPledge);        require(amountIn == amountCollateral, \"AAAA: INVALID AMOUNT\");        updateInterests();        uint pledgeRate = IConfig(config).getPoolValue(address(this), ConfigNames.POOL_PLEDGE_RATE);        uint maxAmount = IConfig(config).convertTokenAmount(collateralToken, supplyToken, borrows[from].amountCollateral.add(amountCollateral));        uint maximumBorrow = maxAmount.mul(pledgeRate).div(1e18);        require(repayAmount + expectBorrow <= maximumBorrow, \"AAAA: EXCEED MAX ALLOWED\");        require(expectBorrow <= remainSupply, \"AAAA: INVALID BORROW\");        totalBorrow = totalBorrow.add(expectBorrow);        totalPledge = totalPledge.add(amountCollateral);        remainSupply = remainSupply.sub(expectBorrow);        if(collateralStrategy != address(0) && amountCollateral > 0)        {            IERC20(ICollateralStrategy(collateralStrategy).collateralToken()).<mask0>;            ICollateralStrategy(collateralStrategy).invest(from, amountCollateral);         }        if(borrows[from].index == 0)        {            borrowerList.push(from);            borrows[from].index = borrowerList.length;            numberBorrowers ++;        }        borrows[from].interests = borrows[from].interests.add(interestPerBorrow.mul(borrows[from].amountBorrow).div(1e18).sub(borrows[from].interestSettled));        borrows[from].amountCollateral = borrows[from].amountCollateral.add(amountCollateral);        borrows[from].amountBorrow = borrows[from].amountBorrow.add(expectBorrow);        borrows[from].interestSettled = interestPerBorrow.mul(borrows[from].amountBorrow).div(1e18);        _mintToPool();        if(expectBorrow > 0) {            TransferHelper.safeTransfer(supplyToken, msg.sender, expectBorrow);            _increaseBorrowerProductivity(from, expectBorrow);        }         emit Borrow(from, expectBorrow, amountCollateral);    }"