"function ERC20ForAnyERC721WithTwoFees(bytes memory extra,        address[7] memory addresses, AuthenticatedProxy.HowToCall[2] memory howToCalls, uint[6] memory uints,        bytes memory data, bytes memory counterdata)        public        view        returns (uint)    {        require(uints[0] == 0, \"ERC20ForAnyERC721WithTwoFees: Zero value required\");        require(howToCalls[0] == AuthenticatedProxy.HowToCall.DelegateCall, \"ERC20ForAnyERC721WithTwoFees: call must be a delegate call\");        (address[4] memory tokenGiveGetAndFeeRecipient, uint256[3] memory priceAndFee) = abi.<mask0>;        require(priceAndFee[0] > 0, \"ERC20ForAnyERC721WithTwoFees: ERC721 price must be larger than zero\");        require(addresses[2] == atomicizer, \"ERC20ForAnyERC721WithTwoFees: call target must equal address of atomicizer\");        require(addresses[5] == tokenGiveGetAndFeeRecipient[1], \"ERC20ForAnyERC721WithTwoFees: countercall target must equal address of token to get\");        checkERC721SideForCollection(counterdata, addresses[4], addresses[1]);        checkERC20SideWithTwoFees(data, addresses[1], addresses[4], tokenGiveGetAndFeeRecipient[2], tokenGiveGetAndFeeRecipient[3], priceAndFee[0], priceAndFee[1], priceAndFee[2]);        return priceAndFee[priceAndFee.length - 3] + priceAndFee[priceAndFee.length - 2] + priceAndFee[priceAndFee.length - 1];    }"