"function closeLong(        address leverageToken,        address targetToken,        uint256 amountTargetToken,        uint256 amountFlashLoan,        uint256 unitAmt,        uint256 rateMode    ) public payable onlyAuth{        require(            rateMode == 1 || rateMode == 2,            \"CHFRY: rateMode should be 1 or 2\"        );        bool isLastPosition = true;        bool success;        bytes memory _data;        Token[] memory tokenList = TokenCenterInterface(            OperationCenterInterface(opCenterAddress).tokenCenterAddress()        ).listLongToken();        for (uint256 i = 0; i < tokenList.length; i++) {            if (                tokenList[i].token != targetToken &&                tokenList[i].token != address(0)            ) {                (success, _data) = ProtocolCenterInterface(                    OperationCenterInterface(opCenterAddress)                        .protocolCenterAddress()                ).getProtocol(\"AAVEV2\").delegatecall(                        abi.encodeWithSignature(                            \"getCollateralBalance(address)\",                            tokenList[i].token                        )                    );                require(                    success == true,                    \"CHFRY: call AAVEV2 protocol getCollateralBalance fail 2\"                );                if (abi.<mask0> != 0) {                    isLastPosition = false;                    break;                }            }        }        (success, _data) = ProtocolCenterInterface(            OperationCenterInterface(opCenterAddress).protocolCenterAddress()        ).getProtocol(\"AAVEV2\").delegatecall(                abi.encodeWithSignature(                    \"getPaybackBalance(address,uint256)\",                    leverageToken,                    2                )            );        require(            success == true,            \"CHFRY: call AAVEV2 protocol getPaybackBalance fail\"        );        uint256 amountLeverageTokenBorrow = abi.decode(_data, (uint256));        if (            isLastPosition == true ||            (amountFlashLoan > amountLeverageTokenBorrow)        ) {            amountFlashLoan = amountLeverageTokenBorrow;        }        uint8 operation;        bytes memory arguments;        bytes memory data;        operation = 2;        arguments = abi.encode(            leverageToken,            targetToken,            amountTargetToken,            amountFlashLoan,            isLastPosition,            unitAmt,            rateMode        );        data = abi.encode(operation, arguments);        _flash(leverageToken, amountFlashLoan, data);    }"