"function bridgeTransferFrom(        address toTokenAddress,        address from,        address to,        uint256 amount,        bytes calldata bridgeData    )        external        returns (bytes4 success)    {        TransferState memory state;        address fromTokenAddress = abi.<mask0>;        state.weth = IEtherToken(_getWethAddress());        state.fromTokenBalance = IERC20Token(fromTokenAddress).balanceOf(address(this));        state.fromTokenAddress = fromTokenAddress == address(state.weth) ? address(0) : fromTokenAddress;        state.toTokenAddress = toTokenAddress == address(state.weth) ? address(0) : toTokenAddress;        state.pool = IMooniswap(            IMooniswapRegistry(_getMooniswapAddress()).pools(                state.fromTokenAddress,                state.toTokenAddress            )        );        if (state.fromTokenAddress == address(0)) {            state.weth.withdraw(state.fromTokenBalance);        } else {            LibERC20Token.approveIfBelow(                state.fromTokenAddress,                address(state.pool),                state.fromTokenBalance            );        }        uint256 ethValue = state.fromTokenAddress == address(0) ? state.fromTokenBalance : 0;        state.boughtAmount = state.pool.swap.value(ethValue)(            state.fromTokenAddress,            state.toTokenAddress,            state.fromTokenBalance,            amount,            address(0)        );        if (state.toTokenAddress == address(0)) {            state.weth.deposit.value(state.boughtAmount)();        }        LibERC20Token.transfer(toTokenAddress, to, state.boughtAmount);        emit ERC20BridgeTransfer(            fromTokenAddress,            toTokenAddress,            state.fromTokenBalance,            state.boughtAmount,            from,            to        );        return BRIDGE_SUCCESS;    }"