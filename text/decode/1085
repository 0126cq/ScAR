"function startNewVotingForProposal(        DaoRegistry dao,        bytes32 proposalId,        bytes memory data    ) public override onlyAdapter(dao) {        SnapshotProposalContract.ProposalMessage memory proposal =            abi.<mask0>;        (bool success, uint256 blockNumber) =            _stringToUint(proposal.payload.snapshot);        require(success, \"snapshot conversion error\");        BankExtension bank = BankExtension(dao.getExtensionAddress(BANK));        bytes32 proposalHash =            _snapshotContract.hashMessage(dao, msg.sender, proposal);        address addr = ECDSA.recover(proposalHash, proposal.sig);        address memberAddr = dao.getAddressIfDelegated(addr);        require(bank.balanceOf(memberAddr, UNITS) > 0, \"noActiveMember\");        require(            blockNumber <= block.number,            \"snapshot block number should not be in the future\"        );        require(blockNumber > 0, \"block number cannot be 0\");        votes[address(dao)][proposalId].startingTime = block.timestamp;        votes[address(dao)][proposalId].snapshot = blockNumber;    }"