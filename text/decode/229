"function callUniswapObserve(AssetCache memory assetCache, address pool, uint ago) private returns (uint, uint) {        uint32[] memory secondsAgos = new uint32[](2);        secondsAgos[0] = uint32(ago);        secondsAgos[1] = 0;        (bool success, bytes memory data) = pool.staticcall(abi.encodeWithSelector(IUniswapV3Pool.observe.selector, secondsAgos));        if (!success) {            if (keccak256(data) != keccak256(abi.encodeWithSignature(\"Error(string)\", \"OLD\"))) revertBytes(data);            (,, uint16 index, uint16 cardinality, uint16 cardinalityNext,,) = IUniswapV3Pool(pool).slot0();            (uint32 oldestAvailableAge,,,bool initialized) = IUniswapV3Pool(pool).observations((index + 1) % cardinality);            if (!initialized) (oldestAvailableAge,,,) = IUniswapV3Pool(pool).observations(0);            if (cardinality == cardinalityNext && cardinality < 65535) {                IUniswapV3Pool(pool).increaseObservationCardinalityNext(cardinality + 1);            }            ago = block.timestamp - oldestAvailableAge;            secondsAgos[0] = uint32(ago);            (success, data) = pool.staticcall(abi.encodeWithSelector(IUniswapV3Pool.observe.selector, secondsAgos));            if (!success) revertBytes(data);        }        int56[] memory tickCumulatives = abi.<mask0>;         int24 tick = int24((tickCumulatives[1] - tickCumulatives[0]) / int56(int(ago)));        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);        return (decodeSqrtPriceX96(assetCache, sqrtPriceX96), ago);    }"