"function _getPastAccumulator(        IPriceOracle.Variable variable,        uint256 latestIndex,        uint256 ago    ) internal view returns (int256) {        _require(block.timestamp >= ago, Errors.ORACLE_INVALID_SECONDS_QUERY);        uint256 lookUpTime = block.timestamp - ago;        bytes32 latestSample = _getSample(latestIndex);        uint256 latestTimestamp = latestSample.timestamp();        <mask0>;        if (latestTimestamp <= lookUpTime) {            uint256 elapsed = lookUpTime - latestTimestamp;            return latestSample.accumulator(variable) + (latestSample.instant(variable) * int256(elapsed));        } else {            uint256 oldestIndex = latestIndex.next();            {                bytes32 oldestSample = _getSample(oldestIndex);                uint256 oldestTimestamp = oldestSample.timestamp();                _require(oldestTimestamp > 0, Errors.ORACLE_NOT_INITIALIZED);                _require(oldestTimestamp <= lookUpTime, Errors.ORACLE_QUERY_TOO_OLD);            }            (bytes32 prev, bytes32 next) = _findNearestSample(lookUpTime, oldestIndex);            uint256 samplesTimeDiff = next.timestamp() - prev.timestamp();            if (samplesTimeDiff > 0) {                int256 samplesAccDiff = next.accumulator(variable) - prev.accumulator(variable);                uint256 elapsed = lookUpTime - prev.timestamp();                return prev.accumulator(variable) + ((samplesAccDiff * int256(elapsed)) / int256(samplesTimeDiff));            } else {                return prev.accumulator(variable);            }        }    }"