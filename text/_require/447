"function ln(int256 a) internal pure returns (int256) {        <mask0>;        if (a < ONE_18) {            return (-ln((ONE_18 * ONE_18) / a));        }        int256 sum = 0;        if (a >= a0 * ONE_18) {            a /= a0;             sum += x0;        }        if (a >= a1 * ONE_18) {            a /= a1;             sum += x1;        }        sum *= 100;        a *= 100;        if (a >= a2) {            a = (a * ONE_20) / a2;            sum += x2;        }        if (a >= a3) {            a = (a * ONE_20) / a3;            sum += x3;        }        if (a >= a4) {            a = (a * ONE_20) / a4;            sum += x4;        }        if (a >= a5) {            a = (a * ONE_20) / a5;            sum += x5;        }        if (a >= a6) {            a = (a * ONE_20) / a6;            sum += x6;        }        if (a >= a7) {            a = (a * ONE_20) / a7;            sum += x7;        }        if (a >= a8) {            a = (a * ONE_20) / a8;            sum += x8;        }        if (a >= a9) {            a = (a * ONE_20) / a9;            sum += x9;        }        if (a >= a10) {            a = (a * ONE_20) / a10;            sum += x10;        }        if (a >= a11) {            a = (a * ONE_20) / a11;            sum += x11;        }        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);        int256 z_squared = (z * z) / ONE_20;        int256 num = z;        int256 seriesSum = num;        num = (num * z_squared) / ONE_20;        seriesSum += num / 3;        num = (num * z_squared) / ONE_20;        seriesSum += num / 5;        num = (num * z_squared) / ONE_20;        seriesSum += num / 7;        num = (num * z_squared) / ONE_20;        seriesSum += num / 9;        num = (num * z_squared) / ONE_20;        seriesSum += num / 11;        seriesSum *= 2;        return (sum + seriesSum) / 100;    }"