"function claim() external isPool returns (uint256[7] memory) {        uint256 newDefaultSuffered   = uint256(0);        uint256 loan_defaultSuffered = loan.defaultSuffered();        if (lastDefaultSuffered == uint256(0) && loan_defaultSuffered > uint256(0)) {            newDefaultSuffered = lastDefaultSuffered = _calcAllotment(loan.balanceOf(address(this)), loan_defaultSuffered, loan.totalSupply());        }        loan.updateFundsReceived();        if (loan.withdrawableFundsOf(address(this)) == uint256(0)) return([0, 0, 0, 0, 0, 0, newDefaultSuffered]);        uint256 newInterest  = loan.interestPaid() - lastInterestPaid;            uint256 newPrincipal = loan.principalPaid() - lastPrincipalPaid;          lastInterestPaid  = loan.interestPaid();        lastPrincipalPaid = loan.principalPaid();        uint256 newFee             = lastFeePaid         == uint256(0) ? loan.feePaid()         : uint256(0);          uint256 newExcess          = lastExcessReturned  == uint256(0) ? loan.excessReturned()  : uint256(0);          uint256 newAmountRecovered = lastAmountRecovered == uint256(0) ? loan.amountRecovered() : uint256(0);          if (newFee > 0)             lastFeePaid         = newFee;        if (newExcess > 0)          lastExcessReturned  = newExcess;        if (newAmountRecovered > 0) lastAmountRecovered = newAmountRecovered;        uint256 beforeBal = liquidityAsset.balanceOf(address(this));                         loan.withdrawFunds();                                                                uint256 claimBal  = liquidityAsset.balanceOf(address(this)).sub(beforeBal);          uint256 sum = newInterest.add(newPrincipal).<mask0>.add(newExcess).add(newAmountRecovered);        newInterest  = _calcAllotment(newInterest,  claimBal, sum);        newPrincipal = _calcAllotment(newPrincipal, claimBal, sum);        newFee             = _calcAllotment(newFee,             claimBal, sum);        newExcess          = _calcAllotment(newExcess,          claimBal, sum);        newAmountRecovered = _calcAllotment(newAmountRecovered, claimBal, sum);        liquidityAsset.safeTransfer(pool, claimBal);          return([claimBal, newInterest, newPrincipal, newFee, newExcess, newAmountRecovered, newDefaultSuffered]);    }"