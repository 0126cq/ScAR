"function moveFromPlaceToPlace(        Tree storage self,        uint fromPlace,        uint toPlace,        uint delta    )        external    {        require(_correctPlace(self, fromPlace) && _correctPlace(self, toPlace), \"Incorrect place\");        uint leftBound = 1;        uint rightBound = getSize(self);        uint step = 1;        uint middle = leftBound.add(rightBound).div(2);        uint fromPlaceMove = fromPlace > toPlace ? toPlace : fromPlace;        uint toPlaceMove = fromPlace > toPlace ? fromPlace : toPlace;        while (toPlaceMove <= middle || middle < fromPlaceMove) {            if (middle < fromPlaceMove) {                leftBound = middle.add(1);                step = step.add(step).add(1);            } else {                rightBound = middle;                step = step.add(step);            }            middle = leftBound.add(rightBound).div(2);        }        uint leftBoundMove = leftBound;        uint rightBoundMove = rightBound;        uint stepMove = step;        while(leftBoundMove < rightBoundMove && leftBound < rightBound) {            uint middleMove = leftBoundMove.add(rightBoundMove).div(2);            if (fromPlace > middleMove) {                leftBoundMove = middleMove.add(1);                stepMove = stepMove.add(stepMove).<mask0>;            } else {                rightBoundMove = middleMove;                stepMove = stepMove.add(stepMove);            }            self.tree[stepMove.sub(1)] = self.tree[stepMove.sub(1)].sub(delta);            middle = leftBound.add(rightBound).div(2);            if (toPlace > middle) {                leftBound = middle.add(1);                step = step.add(step).add(1);            } else {                rightBound = middle;                step = step.add(step);            }            self.tree[step.sub(1)] = self.tree[step.sub(1)].add(delta);        }    }"