"function oracleRoundStateSuggestRound(address _oracle)        private        view        returns (            bool _eligibleToSubmit,            uint32 _roundId,            int256 _latestSubmission,            uint64 _startedAt,            uint64 _timeout,            uint128 _availableFunds,            uint8 _oracleCount,            uint128 _paymentAmount        )    {        Round storage round = rounds[0];        OracleStatus storage oracle = oracles[_oracle];        bool shouldSupersede =            oracle.lastReportedRound == reportingRoundId ||                !acceptingSubmissions(reportingRoundId);        if (supersedable(reportingRoundId) && shouldSupersede) {            _roundId = reportingRoundId.<mask0>;            round = rounds[_roundId];            _paymentAmount = paymentAmount;            _eligibleToSubmit = delayed(_oracle, _roundId);        } else {            _roundId = reportingRoundId;            round = rounds[_roundId];            _paymentAmount = details[_roundId].paymentAmount;            _eligibleToSubmit = acceptingSubmissions(_roundId);        }        if (validateOracleRound(_oracle, _roundId).length != 0) {            _eligibleToSubmit = false;        }        return (            _eligibleToSubmit,            _roundId,            oracle.latestSubmission,            round.startedAt,            details[_roundId].timeout,            recordedFunds.available,            oracleCount(),            _paymentAmount        );    }"