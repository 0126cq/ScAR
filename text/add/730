"function calculateBounty(uint nodeIndex)        external        allow(\"SkaleManager\")        returns (uint)    {        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\"ConstantsHolder\"));        Nodes nodes = Nodes(contractManager.getContract(\"Nodes\"));        TimeHelpers timeHelpers = TimeHelpers(contractManager.getContract(\"TimeHelpers\"));        DelegationController delegationController = DelegationController(            contractManager.getContract(\"DelegationController\")        );        require(            _getNextRewardTimestamp(nodeIndex, nodes, timeHelpers) <= now,            \"Transaction is sent too early\"        );        uint validatorId = nodes.getValidatorId(nodeIndex);        if (nodesByValidator[validatorId] > 0) {            delete nodesByValidator[validatorId];        }        uint currentMonth = timeHelpers.getCurrentMonth();        _refillEpochPool(currentMonth, timeHelpers, constantsHolder);        _prepareBountyHistory(validatorId, currentMonth);        uint bounty = _calculateMaximumBountyAmount(            _epochPool,            _effectiveDelegatedSum.getAndUpdateValue(currentMonth),            _bountyWasPaidInCurrentEpoch,            nodeIndex,            _bountyHistory[validatorId].bountyPaid,            delegationController.getAndUpdateEffectiveDelegatedToValidator(validatorId, currentMonth),            delegationController.getAndUpdateDelegatedToValidatorNow(validatorId),            constantsHolder,            nodes        );        _bountyHistory[validatorId].bountyPaid = _bountyHistory[validatorId].bountyPaid.<mask0>;        bounty = _reduceBounty(            bounty,            nodeIndex,            nodes,            constantsHolder        );        _epochPool = _epochPool.sub(bounty);        _bountyWasPaidInCurrentEpoch = _bountyWasPaidInCurrentEpoch.add(bounty);        return bounty;    }"