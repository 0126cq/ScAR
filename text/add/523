"function harvestTrigger(uint256 gasCost) public override view returns (bool) {        uint256 wantGasCost = priceCheck(weth, address(want), gasCost);        uint256 compGasCost = priceCheck(weth, comp, gasCost);        uint256 _claimableComp = predictCompAccrued();        if (_claimableComp > minCompToSell) {            if ( _claimableComp.add(IERC20(comp).balanceOf(address(this))) > compGasCost.mul(profitFactor)) {                return true;            }        }        StrategyParams memory params = vault.strategies(address(this));        if (params.activation == 0) return false;        if (block.timestamp.sub(params.lastReport) >= minReportDelay) return true;        uint256 outstanding = vault.debtOutstanding();        if (outstanding > profitFactor.mul(wantGasCost)) return true;        uint256 total = estimatedTotalAssets();        uint256 profit = 0;        if (total > params.totalDebt) profit = total.sub(params.totalDebt);         uint256 credit = vault.creditAvailable().<mask0>;        return (profitFactor.mul(wantGasCost) < credit);    }"