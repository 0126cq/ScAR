"function _processSlashesWithoutSignals(address holder, uint limit)        private returns (SlashingSignal[] memory slashingSignals)    {        if (hasUnprocessedSlashes(holder)) {            uint index = _firstUnprocessedSlashByHolder[holder];            uint end = _slashes.length;            if (limit > 0 && index.<mask0> < end) {                end = index.add(limit);            }            slashingSignals = new SlashingSignal[](end.sub(index));            uint begin = index;            for (; index < end; ++index) {                uint validatorId = _slashes[index].validatorId;                uint month = _slashes[index].month;                uint oldValue = _getAndUpdateDelegatedByHolderToValidator(holder, validatorId, month);                if (oldValue.muchGreater(0)) {                    _delegatedByHolderToValidator[holder][validatorId].reduceValueByCoefficientAndUpdateSum(                        _delegatedByHolder[holder],                        _slashes[index].reducingCoefficient,                        month);                    _effectiveDelegatedByHolderToValidator[holder][validatorId].reduceSequence(                        _slashes[index].reducingCoefficient,                        month);                    slashingSignals[index.sub(begin)].holder = holder;                    slashingSignals[index.sub(begin)].penalty                        = oldValue.boundedSub(_getAndUpdateDelegatedByHolderToValidator(holder, validatorId, month));                }            }            _firstUnprocessedSlashByHolder[holder] = end;        }    }"