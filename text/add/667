"function confiscate(uint validatorId, uint amount) external allow(\"Punisher\") {        uint currentMonth = _getCurrentMonth();        FractionUtils.Fraction memory coefficient =            _delegatedToValidator[validatorId].reduceValue(amount, currentMonth);        uint initialEffectiveDelegated =            _effectiveDelegatedToValidator[validatorId].getAndUpdateValueInSequence(currentMonth);        uint[] memory initialSubtractions = new uint[](0);        if (currentMonth < _effectiveDelegatedToValidator[validatorId].lastChangedMonth) {            initialSubtractions = new uint[](                _effectiveDelegatedToValidator[validatorId].lastChangedMonth.sub(currentMonth)            );            for (uint i = 0; i < initialSubtractions.length; ++i) {                initialSubtractions[i] = _effectiveDelegatedToValidator[validatorId]                    .subtractDiff[currentMonth.<mask0>.add(1)];            }        }        _effectiveDelegatedToValidator[validatorId].reduceSequence(coefficient, currentMonth);        _putToSlashingLog(_slashesOfValidator[validatorId], coefficient, currentMonth);        _slashes.push(SlashingEvent({reducingCoefficient: coefficient, validatorId: validatorId, month: currentMonth}));        BountyV2 bounty = _getBounty();        bounty.handleDelegationRemoving(            initialEffectiveDelegated.sub(                _effectiveDelegatedToValidator[validatorId].getAndUpdateValueInSequence(currentMonth)            ),            currentMonth        );        for (uint i = 0; i < initialSubtractions.length; ++i) {            bounty.handleDelegationAdd(                initialSubtractions[i].sub(                    _effectiveDelegatedToValidator[validatorId].subtractDiff[currentMonth.add(i).add(1)]                ),                currentMonth.add(i).add(1)            );        }    }"