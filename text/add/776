"function reduceValueByCoefficientAndUpdateSumIfNeeded(        Value storage sequence,        Value storage sumSequence,        FractionUtils.Fraction memory reducingCoefficient,        uint month,        bool hasSumSequence) internal    {        require(month.add(1) >= sequence.firstUnprocessedMonth, \"Cannot reduce value in the past\");        if (hasSumSequence) {            require(month.add(1) >= sumSequence.firstUnprocessedMonth, \"Cannot reduce value in the past\");        }        require(            reducingCoefficient.numerator <= reducingCoefficient.denominator,            \"Increasing of values is not implemented\");        if (sequence.firstUnprocessedMonth == 0) {            return;        }        uint value = getAndUpdateValue(sequence, month);        if (value.approximatelyEqual(0)) {            return;        }        uint newValue = sequence.value.mul(reducingCoefficient.numerator).div(reducingCoefficient.denominator);        if (hasSumSequence) {            subtractFromValue(sumSequence, sequence.value.boundedSub(newValue), month);        }        sequence.value = newValue;        for (uint i = month.<mask0>; i <= sequence.lastChangedMonth; ++i) {            uint newDiff = sequence.subtractDiff[i]                .mul(reducingCoefficient.numerator)                .div(reducingCoefficient.denominator);            if (hasSumSequence) {                sumSequence.subtractDiff[i] = sumSequence.subtractDiff[i]                    .boundedSub(sequence.subtractDiff[i].boundedSub(newDiff));            }            sequence.subtractDiff[i] = newDiff;        }    }"