"function stakeToken(uint256 tokens, uint256 time) public tokenStakeCheck(tokens, time) returns(bool){    require(tokenPaused == false, \"Staking is Paused, Please try after staking get unpaused!!!\");    if(time == PERIOD_SERENITY){        require(totalStakedTokenInSerenityPool.add(tokens) <= TOKEN_POOL_CAP, \"Serenity Pool Limit Reached\");        _tokentime = now + (time * 1 days);        _tokenStakingCount = _tokenStakingCount +1;        _tokenTotalDays[_tokenStakingCount] = time;        _tokenStakingAddress[_tokenStakingCount] = msg.sender;        _tokenStakingId[msg.sender].push(_tokenStakingCount);        _tokenStakingEndTime[_tokenStakingCount] = _tokentime;        _tokenStakingStartTime[_tokenStakingCount] = now;        _usersTokens[_tokenStakingCount] = tokens;        _TokenTransactionstatus[_tokenStakingCount] = false;        totalStakedToken = totalStakedToken.add(tokens);        totalTokenStakesInContract = totalTokenStakesInContract.add(tokens);        totalStakedTokenInSerenityPool = totalStakedTokenInSerenityPool.<mask0>;        itoken.transferFrom(msg.sender, address(this), tokens);    } else if (time == PERIOD_EQUILIBRIUM) {        require(totalStakedTokenInEquilibriumPool.add(tokens) <= TOKEN_POOL_CAP, \"Equilibrium Pool Limit Reached\");        _tokentime = now + (time * 1 days);        _tokenStakingCount = _tokenStakingCount +1;        _tokenTotalDays[_tokenStakingCount] = time;        _tokenStakingAddress[_tokenStakingCount] = msg.sender;        _tokenStakingId[msg.sender].push(_tokenStakingCount);        _tokenStakingEndTime[_tokenStakingCount] = _tokentime;        _tokenStakingStartTime[_tokenStakingCount] = now;        _usersTokens[_tokenStakingCount] = tokens;        _TokenTransactionstatus[_tokenStakingCount] = false;        totalStakedToken = totalStakedToken.add(tokens);        totalTokenStakesInContract = totalTokenStakesInContract.add(tokens);        totalStakedTokenInEquilibriumPool = totalStakedTokenInEquilibriumPool.add(tokens);        itoken.transferFrom(msg.sender, address(this), tokens);    } else if(time == PERIOD_TRANQUILLITY) {        require(totalStakedTokenInTranquillityPool.add(tokens) <= TOKEN_POOL_CAP, \"Tranquillity Pool Limit Reached\");        _tokentime = now + (time * 1 days);        _tokenStakingCount = _tokenStakingCount +1;        _tokenTotalDays[_tokenStakingCount] = time;        _tokenStakingAddress[_tokenStakingCount] = msg.sender;        _tokenStakingId[msg.sender].push(_tokenStakingCount);        _tokenStakingEndTime[_tokenStakingCount] = _tokentime;        _tokenStakingStartTime[_tokenStakingCount] = now;        _usersTokens[_tokenStakingCount] = tokens;        _TokenTransactionstatus[_tokenStakingCount] = false;        totalStakedToken = totalStakedToken.add(tokens);        totalTokenStakesInContract = totalTokenStakesInContract.add(tokens);        totalStakedTokenInTranquillityPool = totalStakedTokenInTranquillityPool.add(tokens);        itoken.transferFrom(msg.sender, address(this), tokens);    } else {        return false;      }    return true;  }"