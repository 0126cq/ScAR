"function buy(address target) external lock payable{        require(!_isContract(msg.sender), '2034');        if(target == address(0)){            require(minerPrice > 0 && msg.value == minerPrice, '2012');            if(miners[msg.sender].id == 0){                _miner_add(msg.sender,0, minerQuota, 0);            }else{                miners[msg.sender].quota = miners[msg.sender].quota.<mask0>;                _update_lessthan(msg.sender);                require(miners[msg.sender].quota <= QUOTA_LIMIT * 100, '2016');            }            address(uint160(owner)).transfer(msg.value);            emit Buy(msg.sender,target,msg.value);        }else{            require(miners[msg.sender].id == 0,'2013');            require(minerid >= MINER_LIMIT, '2005');            require(msg.value >= 0.2 ether && msg.value <= 1 ether, '2014');            MinerStruct memory miner = miners[target];            require(_allowTransfer(target,miner),'2015');            uint to_target_value = msg.value / 2;            uint to_owner_value = msg.value - to_target_value;            if(miner.tokens > 0){                to_owner_value += miner.tokens.div(RATIO);                totalSupply = totalSupply.sub(miner.tokens);            }            _miner_clear(target);            _update_lessthan(target);            _miner_add(msg.sender, miner.id, msg.value * RATIO * 5, 0);            if(auctions[target].id>0){                delete auctionOf[auctions[target].id];                delete auctions[target];            }            address(uint160(target)).transfer(to_target_value);            address(uint160(owner)).transfer(to_owner_value);            emit Buy(msg.sender,target,msg.value);        }    }"