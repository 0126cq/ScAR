"function _verifyMint(        uint256 quantity,        uint256 freeAllowance,        uint256 paidAllowance,        bytes32[] memory proof    ) private {        if (mintPhase == MintPhase.CLOSED) revert MintingClosed();        if (quantity == 0) revert ZeroQuantity();        quantity = MathUpgradeable.min(quantity, maxSupply - totalSupply());        if (quantity == 0) revert SoldOut();        if (mintPhase == MintPhase.PUBLIC) {            _mint(quantity, quantity);        } else {            bytes32 root = mintPhase == MintPhase.ALLOWLIST                ? allowlistRoot                : waitlistRoot;            if (                !_verifyProof(                    proof,                    root,                    _getLeaf(_msgSenderERC721A(), freeAllowance, paidAllowance)                )            ) revert InvalidProof();            uint256 claimed = uint256(_getAux(_msgSenderERC721A()));            quantity = MathUpgradeable.min(                quantity,                freeAllowance + paidAllowance - claimed            );            if (quantity == 0) revert InsufficientAllowance();            uint256 freeSurplus = freeAllowance > claimed                ? freeAllowance - claimed                : 0;            uint256 costQuantity = quantity < freeSurplus                ? 0                : quantity - freeSurplus;            claimed = claimed + quantity;            _setAux(<mask0>, uint64(claimed));            _mint(quantity, costQuantity);            assert(uint256(claimed) <= freeAllowance + paidAllowance);        }    }"