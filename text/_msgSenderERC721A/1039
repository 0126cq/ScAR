"function _transfer(        address from,        address to,        uint256 tokenId    ) private {        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();        address approvedAddress = _tokenApprovals[tokenId];        bool isApprovedOrOwner = (<mask0> == from ||            isApprovedForAll(from, _msgSenderERC721A()) ||            approvedAddress == _msgSenderERC721A());        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();        if (to == address(0)) revert TransferToZeroAddress();        _beforeTokenTransfers(from, to, tokenId, 1);        if (approvedAddress != address(0)) {            _removeTokenApproval(tokenId);        }        unchecked {            --_packedAddressData[from];             ++_packedAddressData[to];             _packedOwnerships[tokenId] = _packOwnershipData(                to,                BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)            );            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {                uint256 nextTokenId = tokenId + 1;                if (_packedOwnerships[nextTokenId] == 0) {                    if (nextTokenId != _currentIndex) {                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;                    }                }            }        }        emit Transfer(from, to, tokenId);        _afterTokenTransfers(from, to, tokenId, 1);    }"