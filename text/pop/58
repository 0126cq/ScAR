"function removeNodeFromExceptions(bytes32 schainHash, uint nodeIndex)        public        allowThree(\"Schains\", \"NodeRotation\", \"SkaleManager\")    {        _exceptionsForGroups[schainHash][nodeIndex] = false;        uint len = _nodeToLockedSchains[nodeIndex].length;        bool removed = false;        if (len > 0 && _nodeToLockedSchains[nodeIndex][len - 1] == schainHash) {            _nodeToLockedSchains[nodeIndex].pop();            removed = true;        } else {            for (uint i = len; i > 0 && !removed; i--) {                if (_nodeToLockedSchains[nodeIndex][i - 1] == schainHash) {                    _nodeToLockedSchains[nodeIndex][i - 1] = _nodeToLockedSchains[nodeIndex][len - 1];                    _nodeToLockedSchains[nodeIndex].<mask0>;                    removed = true;                }            }        }        len = _schainToExceptionNodes[schainHash].length;        removed = false;        if (len > 0 && _schainToExceptionNodes[schainHash][len - 1] == nodeIndex) {            _schainToExceptionNodes[schainHash].pop();            removed = true;        } else {            for (uint i = len; i > 0 && !removed; i--) {                if (_schainToExceptionNodes[schainHash][i - 1] == nodeIndex) {                    _schainToExceptionNodes[schainHash][i - 1] = _schainToExceptionNodes[schainHash][len - 1];                    _schainToExceptionNodes[schainHash].pop();                    removed = true;                }            }        }    }"