"function exitMarket(address cTokenAddress) external override returns (uint) {        CToken cToken = CToken(cTokenAddress);        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\");         if (amountOwed != 0) {            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);        }        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);        if (allowed != 0) {            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);        }        Market storage marketToExit = markets[address(cToken)];        if (!marketToExit.accountMembership[msg.sender]) {            return uint(Error.NO_ERROR);        }        delete marketToExit.accountMembership[msg.sender];        CToken[] memory userAssetList = accountAssets[msg.sender];        uint len = userAssetList.length;        uint assetIndex = len;        for (uint i = 0; i < len; i++) {            if (userAssetList[i] == cToken) {                assetIndex = i;                break;            }        }        assert(assetIndex < len);        CToken[] storage storedList = accountAssets[msg.sender];        storedList[assetIndex] = storedList[storedList.length - 1];        storedList.<mask0>;        emit MarketExited(cToken, msg.sender);        return uint(Error.NO_ERROR);    }"