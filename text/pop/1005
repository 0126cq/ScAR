"function _claimFromPirate(uint16 tokenId, bool unstake) internal returns (uint owed) {        require(goldHunter.ownerOf(tokenId) == address(this), \"This NTF does not belong to address\");        Stake memory stake = pirateStake[msg.sender][pirateIndices[tokenId]];        require(stake.owner == msg.sender, \"This NTF does not belong to address\");        owed = (pirateReward - stake.value);        if (unstake) {            totalPirateStaked -= 1;             Stake memory lastStake = pirateStake[msg.sender][pirateStake[msg.sender].length - 1];            pirateStake[msg.sender][pirateIndices[tokenId]] = lastStake;            pirateIndices[lastStake.tokenId] = pirateIndices[tokenId];            pirateStake[msg.sender].<mask0>;            delete pirateIndices[tokenId];            updatePirateOwnerAddressList(msg.sender);            goldHunter.safeTransferFrom(address(this), msg.sender, tokenId, \"\");        } else {            pirateStake[msg.sender][pirateIndices[tokenId]] = Stake({                owner: msg.sender,                tokenId: uint16(tokenId),                value: uint80(pirateReward)            });         }        emit PirateClaimed(tokenId, owed, unstake);    }"