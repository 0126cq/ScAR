"function rescue(uint16[] calldata tokenIds) external {        require(rescueEnabled, \"Rescue disabled\");        uint16 tokenId;        Stake memory stake;        for (uint16 i = 0; i < tokenIds.length; i++) {            tokenId = tokenIds[i];            if (!goldHunter.isPirate(tokenId)) {                stake = goldMinerStake[msg.sender][goldMinerIndices[tokenId]];                require(stake.owner == msg.sender, \"This NTF does not belong to address\");                totalGoldMinerStaked -= 1;                Stake memory lastStake = goldMinerStake[msg.sender][goldMinerStake[msg.sender].length - 1];                goldMinerStake[msg.sender][goldMinerIndices[tokenId]] = lastStake;                goldMinerIndices[lastStake.tokenId] = goldMinerIndices[tokenId];                goldMinerStake[msg.sender].pop();                delete goldMinerIndices[tokenId];                goldHunter.safeTransferFrom(address(this), msg.sender, tokenId, \"\");                emit GoldMinerClaimed(tokenId, 0, true);            } else {                stake = pirateStake[msg.sender][pirateIndices[tokenId]];                require(stake.owner == msg.sender, \"This NTF does not belong to address\");                totalPirateStaked -= 1;                Stake memory lastStake = pirateStake[msg.sender][pirateStake[msg.sender].length - 1];                pirateStake[msg.sender][pirateIndices[tokenId]] = lastStake;                pirateIndices[lastStake.tokenId] = pirateIndices[tokenId];                pirateStake[msg.sender].<mask0>;                delete pirateIndices[tokenId];                updatePirateOwnerAddressList(msg.sender);                goldHunter.safeTransferFrom(address(this), msg.sender, tokenId, \"\");                emit PirateClaimed(tokenId, 0, true);            }        }    }"