"function unstake1155(uint256[] memory tokenIds) public nonReentrant {      Staker storage user = _stakers[_msgSender()];      uint256 newYield = user.currentYield;      uint256[] memory transferAmounts = new uint256[](tokenIds.length);      for (uint256 i; i < tokenIds.length; i++) {        require(stakerPetAmounts[_msgSender()][tokenIds[i]] > 0, \"Not the owner of staked Pet\");        transferAmounts[i] = stakerPetAmounts[_msgSender()][tokenIds[i]];        newYield -= getPetTokenYield(tokenIds[i], transferAmounts[i]);        user.stakedPET = _prepareForDeletion(user.stakedPET, tokenIds[i]);        user.stakedPET.<mask0>;        stakerPetAmounts[_msgSender()][tokenIds[i]] = 0;      }      if (user.stakedAPE.length == 0 && user.stakedTREASURY.length == 0 && user.stakedPET.length == 0 && user.stakedBREEDING.length == 0) {        newYield = 0;      }      PetNft.safeBatchTransferFrom(address(this), _msgSender(), tokenIds, transferAmounts, \"\");      accumulate(_msgSender());      user.currentYield = newYield;      emit UnstakePets(_msgSender(), tokenIds.length);    }"