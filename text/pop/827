"function removeFunction(address _facetAddress, bytes4 _selector) internal {        DiamondStorage storage ds = diamondStorage();        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;        if (selectorPosition != lastSelectorPosition) {            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);        }        ds.facetFunctionSelectors[_facetAddress].functionSelectors.<mask0>;        delete ds.selectorToFacetAndPosition[_selector];        if (lastSelectorPosition == 0) {            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;            if (facetAddressPosition != lastFacetAddressPosition) {                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);            }            ds.facetAddresses.pop();            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;        }        delete ds.selectorToAccessControl[_selector];    }"