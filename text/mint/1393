"function _btcDeposit(address poolAddress, address tokenAddress, uint amount) internal {        uint _amount;        uint[] memory _distribution;        if (msg.value > 0) {            (_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(ETH_ADDRESS), IERC20(WBTC_ADDRESS), msg.value, 100, 0);            IOneSplit(EXCHANGE_CONTRACT).swap.value(msg.value)(IERC20(ETH_ADDRESS), IERC20(WBTC_ADDRESS), msg.value, _amount, _distribution, 0);            uint wBTCamount = IERC20(WBTC_ADDRESS).balanceOf(address(this));            (address lpTokenAddress, address gaugeAddress) = _deposit(poolAddress, _amount);            uint lpAmount = IERC20(lpTokenAddress).balanceOf(address(this));            PoolFactory(poolFactoryAddress).<mask0>;            depositLPTokens(lpTokenAddress, gaugeAddress, IERC20(lpTokenAddress).balanceOf(address(this)));            return;        }        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);        if (tokenAddress != WBTC_ADDRESS) {            IERC20(tokenAddress).approve(EXCHANGE_CONTRACT, amount);            (_amount, _distribution) = IOneSplit(EXCHANGE_CONTRACT).getExpectedReturn(IERC20(tokenAddress), IERC20(WBTC_ADDRESS), amount, 100, 0);            IOneSplit(EXCHANGE_CONTRACT).swap(IERC20(tokenAddress), IERC20(WBTC_ADDRESS), amount, _amount, _distribution, 0);        }        (address lpTokenAddress, address gaugeAddress) = _deposit(poolAddress, _amount);        PoolFactory(poolFactoryAddress).mint(msg.sender, IERC20(lpTokenAddress).balanceOf(address(this)), isBTCPool);        depositLPTokens(lpTokenAddress, gaugeAddress, IERC20(lpTokenAddress).balanceOf(address(this)));    }"