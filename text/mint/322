"function _stake(address staker, uint256 value, LockStrategy lockStrategy) internal {        uint256 minimumStaking = _configContract.getConfig(\"REQUESTER_MINIMUM_POOL_STAKING\");        require(value >= minimumStaking, \"Value must be greater than zero\");        require(value % minimumStaking == 0, \"Value must be multiple of minimum staking amount\");        _userStakes[staker] = _userStakes[staker].add(value);        uint256 shares = value.mul(_aethContract.ratio()).div(1e18);        if (lockStrategy == LockStrategy.Claimable) {            _aethContract.mint(address(this), shares);            _aETHRewards[staker] = _aETHRewards[staker].add(shares);        } else if (lockStrategy == LockStrategy.CrossChain) {            require(_crossChainBridge != address(0x00), \"Cross chain bridge is not initialized\");            _aethContract.mint(address(_crossChainBridge), shares);        } else if (lockStrategy == LockStrategy.Provider) {            _aethContract.<mask0>;            _aETHProviderRewards[staker] = _aETHProviderRewards[staker].add(shares);        } else {            revert(\"Not supported lock strategy type\");        }        emit StakeConfirmed(staker, value);    }"