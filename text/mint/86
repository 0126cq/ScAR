"function _getLPToken()        internal    {        require(!complete, \"Action complete\");        uint256 amount_;        if (isSale) {          amount_ = sell_amount;        } else {          amount_ = purchase_amount;        }        if (amount_ == 0) {          complete = true;          return;        }        require(recencyCheck(), \"TWAP needs updating\");        uint256 bal_of_a = IERC20(sell_token).balanceOf(reserves);        if (amount_ > bal_of_a) {            amount_ = bal_of_a;        }        (uint256 reserve0, uint256 reserve1, ) = UniswapPair(uniswap_pair1).getReserves();        uint256 quoted;        if (saleTokenIs0) {            quoted = quote(reserve1, reserve0);            require(withinBoundsWithQuote(quoted), \"!in_bounds, uni reserve manipulation\");        } else {            quoted = quote(reserve0, reserve1);            require(withinBoundsWithQuote(quoted), \"!in_bounds, uni reserve manipulation\");        }        uint256 amount_b;        {          uint256 decs = uint256(ExpandedERC20(sell_token).decimals());          uint256 one = 10**decs;          amount_b = quoted.mul(amount_).div(one);        }        uint256 bal_of_b = IERC20(purchase_token).balanceOf(reserves);        if (amount_b > bal_of_b) {            amount_b = bal_of_b;            if (!saleTokenIs0) {                quoted = quote(reserve1, reserve0);            } else {                quoted = quote(reserve0, reserve1);            }            uint256 decs = uint256(ExpandedERC20(purchase_token).decimals());            uint256 one = 10**decs;            amount_ = quoted.mul(amount_b).div(one);        }        IERC20(sell_token).transferFrom(reserves, uniswap_pair1, amount_);        IERC20(purchase_token).transferFrom(reserves, uniswap_pair1, amount_b);        UniswapPair(uniswap_pair1).<mask0>;        complete = true;    }"