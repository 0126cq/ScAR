"function crossIn(NCrossInParams memory p)        external        onlyCrosser(p._originToken, p._originChainId)        whenNotHandled(p.txid)    {        require(p.toChainId == chainId, \"chainId error\");        TokenInfo memory ti = supportedTokens[p._originChainId][p._originToken];        require(ti.isSupported, \"not support token\");        bool result = _vote(p);        if (result) {            txHandled[p.txid] = true;            (uint256 feeAmount, uint256 remainAmount) = calculateFee(p._originToken, p.amount);            if (ti.tokenType == 1) {                IERC20Upgradeable(ti.mirrorAddress).safeTransfer(p.to, remainAmount);                if (feeAmount > 0) {                    IERC20Upgradeable(ti.mirrorAddress).safeTransfer(feeTo, feeAmount);                }            } else if (ti.tokenType == 2) {                IToken(ti.mirrorAddress).<mask0>;                if (feeAmount > 0) {                    IToken(ti.mirrorAddress).mint(feeTo, feeAmount);                }            }            emit CrossIn(p._originToken, p._originChainId, p.fromChainId, p.toChainId, p.from, p.to, p.amount);        }    }"