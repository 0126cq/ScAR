"function harvest() external whenNotPaused returns (HarvestData memory) {        _onlyAuthorizedActors();        HarvestData memory harvestData;        uint256 _before = IERC20Upgradeable(want).balanceOf(address(this));        uint256 _beforeCrv = IERC20Upgradeable(crv).balanceOf(address(this));        IMintr(mintr).<mask0>;        uint256 _afterCrv = IERC20Upgradeable(crv).balanceOf(address(this));        harvestData.crvHarvested = _afterCrv.sub(_beforeCrv);        uint256 _crv = _afterCrv;        harvestData.keepCrv = _crv.mul(keepCRV).div(MAX_FEE);        if (harvestData.keepCrv > 0) {            IERC20Upgradeable(crv).safeTransfer(IController(controller).rewards(), harvestData.keepCrv);        }        harvestData.crvRecycled = _crv.sub(harvestData.keepCrv);        if (harvestData.crvRecycled > 0) {            address[] memory path = new address[](3);            path[0] = crv;            path[1] = weth;            path[2] = lpComponent;            _swap(crv, harvestData.crvRecycled, path);        }        harvestData.lpComponentDeposited = IERC20Upgradeable(lpComponent).balanceOf(address(this));        if (harvestData.lpComponentDeposited > 0) {            _safeApproveHelper(lpComponent, curveSwap, harvestData.lpComponentDeposited);            _add_liquidity_curve(harvestData.lpComponentDeposited);        }        harvestData.wantProcessed = (IERC20Upgradeable(want).balanceOf(address(this))).sub(_before);        if (harvestData.wantProcessed > 0) {            harvestData.governancePerformanceFee = _processFee(                want,                harvestData.wantProcessed,                performanceFeeGovernance,                IController(controller).rewards()            );            harvestData.strategistPerformanceFee = _processFee(want, harvestData.wantProcessed, performanceFeeStrategist, strategist);            harvestData.wantDeposited = IERC20Upgradeable(want).balanceOf(address(this));            if (harvestData.wantDeposited > 0) {                _deposit(harvestData.wantDeposited);            }        }        emit CurveHarvest(            harvestData.crvHarvested,            harvestData.keepCrv,            harvestData.crvRecycled,            harvestData.lpComponentDeposited,            harvestData.wantProcessed,            harvestData.wantDeposited,            harvestData.governancePerformanceFee,            harvestData.strategistPerformanceFee        );        emit Harvest(harvestData.wantProcessed, block.number);    }"