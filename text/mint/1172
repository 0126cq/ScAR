"function mintPreSale(uint16 silverCardsAmount, uint16 blackCardsAmount, uint16 nounce, bytes calldata signature) external payable {        require(preSaleIsActive, 'Pre sale must be active to mint pre sale');        require(!saleIsActive, 'Regular sale is already active');        require(            silverCardsAmount + blackCardsAmount > 0,            'No amounts provided'        );        require(            silverCardsAmount <= maxPreSaleSilverCardsPerTransaction,            'Can not mint that many silver tokens in a single transaction during the pre sale'        );        require(            blackCardsAmount <= maxPreSaleBlackCardsPerTransaction,            'Can not mint that many black tokens in a single transaction during the pre sale'        );        require(            silverCardsAmount <= nftContract.silverCardsLeft() - reservedSilverCards,            'Sold Out'        );        require(            blackCardsAmount <= nftContract.blackCardsLeft() - reservedBlackCards,            'Sold Out'        );        require(            preSaleSilverCardPurchases[msg.sender] + silverCardsAmount <= maxPreSaleSilverCardsPerAddress,            'Can only mint so many silver cards during the presale'        );        require(            preSaleBlackCardPurchases[msg.sender] + blackCardsAmount <= maxPreSaleBlackCardsPerAddress,            'Can only mint so many black cards during the presale'        );        require(            msg.value >= (preSaleSilverCardPrice * silverCardsAmount) + (preSaleBlackCardPrice * blackCardsAmount),            'Ether value sent is not correct'        );        require(preSaleListedAddresses[_msgSender()] || signature.length > 0, 'Signature required for pre sale');        require(nounce == 0 || preSaleListSignatureUsedNounces[nounce] == address(0) || preSaleListSignatureUsedNounces[nounce] == _msgSender(), 'Invalid or used nounce');        if (!preSaleListedAddresses[_msgSender()] && preSaleListSignatureUsedNounces[nounce] != _msgSender()) {            bytes32 message = getPreSaleListMessage(nounce, _msgSender());            bytes32 messageHash = message.toEthSignedMessageHash();            address signer = messageHash.recover(signature);            require(preSaleListSignatureAddresses[signer], 'Signature invalid');            if (nounce > 0) {                preSaleListSignatureUsedNounces[nounce] = _msgSender();            }        }        preSaleSilverCardPurchases[msg.sender] += silverCardsAmount;        preSaleBlackCardPurchases[msg.sender] += blackCardsAmount;        nftContract.<mask0>;    }"