"function _mintToken(        Token memory _newToken,        uint16 _royaltyPoints,        string calldata _tokenSellingType    ) private returns (bool) {        require(            !(_newToken._totalSupply > 1 && !_newToken._isFungible),            \"Media: Multiple Copies Cannot Be Non Fungible!\"        );        require(            !(_newToken._totalSupply > 1 &&                keccak256(abi.encodePacked(_tokenSellingType)) ==                keccak256(abi.encodePacked(\"Auction\"))),            \"Media: Multiple Copies Cannot Be On Auction\"        );        require(            keccak256(abi.encodePacked(_tokenSellingType)) ==                keccak256(abi.encodePacked(\"Auction\")) ||                keccak256(abi.encodePacked(_tokenSellingType)) ==                keccak256(abi.encodePacked(\"Fixed Sale\")) ||                keccak256(abi.encodePacked(_tokenSellingType)) ==                keccak256(abi.encodePacked(\"Unlockable\")),            \"Media: Invalid Selling Type Provided!\"        );        bytes32 tokenHash = getTokenHash(            _newToken._uri,            _newToken._title,            _newToken._totalSupply        );        require(            _tokenHashToTokenID[tokenHash] == 0,            \"Media: Token With Same Data Already Exist!\"        );        _tokenCounter++;        _tokenHashToTokenID[tokenHash] = _tokenCounter;        _tokenIDToToken[_tokenCounter] = _newToken;        if (_newToken._isFungible) {            ERC1155Minter(_ERC1155Address).<mask0>;        } else {            ERC721Minter(_ERC721Address).mintToken(                _tokenCounter,                _newToken._artist,                _royaltyPoints,                _newToken._uri            );        }        _tokenSellingTypes[_newToken._artist][_tokenCounter][            _tokenSellingType        ] = _newToken._totalSupply;        emit MintToken(            _newToken._totalSupply,            _royaltyPoints,            _newToken._uri,            _newToken._title,            _newToken._artist        );        emit TokenCounter(_tokenCounter);        return true;    }"