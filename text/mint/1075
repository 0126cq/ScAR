"function purchaseLPFor(address beneficiary) public payable lock {      config.feeDistributor.distributeFees();      require(msg.value > 0, \"PowerLiquidVault: ETH required to mint INFINITY LP\");      uint feeValue = (config.purchaseFee * msg.value) / 100;      uint exchangeValue = msg.value - feeValue;      (uint reserve1, uint reserve2, ) = config.tokenPair.getReserves();      uint infinityRequired;      if (address(config.infinityToken) < address(config.weth)) {          infinityRequired = config.uniswapRouter.quote(              exchangeValue,              reserve2,              reserve1          );      } else {          infinityRequired = config.uniswapRouter.quote(              exchangeValue,              reserve1,              reserve2          );      }      uint balance = IERC20(config.infinityToken).balanceOf(address(this));      require(          balance >= infinityRequired,          \"PowerLiquidVault: insufficient INFINITY tokens in PowerLiquidVault\"      );      IWETH(config.weth).deposit{ value: exchangeValue }();      address tokenPairAddress = address(config.tokenPair);      IWETH(config.weth).transfer(tokenPairAddress, exchangeValue);      IERC20(config.infinityToken).transfer(          tokenPairAddress,          infinityRequired      );      uint liquidityCreated = config.tokenPair.<mask0>;      lockedLP[beneficiary].push(          LPbatch({              holder: beneficiary,              amount: liquidityCreated,              timestamp: block.timestamp,              claimed: false          })      );      emit LPQueued(          beneficiary,          liquidityCreated,          exchangeValue,          infinityRequired,          block.timestamp      );      emit EthTransferred(msg.sender, exchangeValue, feeValue);  }"