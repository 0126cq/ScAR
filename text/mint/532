"function stakeTokens(uint256 _amount, address _token) external payable override whenNotPaused nonReentrant onlyAllowedToken(_token) {        require(minStakeAmtPT[_token] <= _amount, \"ST:1\");        address lpToken = tokenToLPTokenMap[_token];        IStakersPoolV2(stakersPoolV2).reCalcPoolPT(lpToken);        IStakersPoolV2(stakersPoolV2).settlePendingRewards(_msgSender(), lpToken);        if (_token == Constant.BCNATIVETOKENADDRESS) {            require(_amount <= msg.value, \"ST:2\");        } else {            require(IERC20Upgradeable(_token).balanceOf(_msgSender()) >= _amount, \"ST:3\");            uint256 allowanceAmt = IERC20Upgradeable(_token).allowance(_msgSender(), address(this));            require(allowanceAmt >= _amount, \"ST:4\");            IERC20Upgradeable(_token).safeTransferFrom(_msgSender(), address(this), _amount);        }        uint256 lpTokenAmount = _amount;        uint256 stakedTokenAmt = IStakersPoolV2(stakersPoolV2).getStakedAmountPT(_token);        if (stakedTokenAmt > 0) {            lpTokenAmount = _amount.mul(IERC20Upgradeable(lpToken).totalSupply()).div(stakedTokenAmt);            require(lpTokenAmount != 0, \"ST:5\");        }        if (_token == Constant.BCNATIVETOKENADDRESS) {            IStakersPoolV2(stakersPoolV2).addStkAmount{value: _amount}(_token, _amount);        } else {            IERC20Upgradeable(_token).safeTransfer(stakersPoolV2, _amount);            IStakersPoolV2(stakersPoolV2).addStkAmount(_token, _amount);        }        uint256 poolRewardPerLPToken = IStakersPoolV2(stakersPoolV2).getPoolRewardPerLPToken(lpToken);        ILPToken(lpToken).<mask0>;        uint256 lpTokenAmtAfterStaked = IERC20Upgradeable(lpToken).balanceOf(_msgSender());        require(stakedTokenAmt.add(_amount) <= totalStakedCapPT[_token], \"ST:6\");        uint256 tokenAmtAfterStaked = lpTokenAmtAfterStaked.mul(stakedTokenAmt.add(_amount)).div(IERC20Upgradeable(lpToken).totalSupply());        require(tokenAmtAfterStaked <= perAccountCapPT[_token], \"ST:7\");        emit StakeTokensEvent(_msgSender(), lpToken, lpTokenAmount, IERC20Upgradeable(lpToken).balanceOf(_msgSender()));    }"