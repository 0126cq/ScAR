"function claimBeesHoney(uint16[] calldata _beesIds) external nonReentrant {        require(STARTING_POINT < block.timestamp, \"Rewards didn't start\");        require(paused.pauseBee == 0, \"Paused\");        uint256 amount = 0;        for (uint16 i = 0; i < _beesIds.length; i++) {            uint16 id = _beesIds[i];            if (!bees.exists(id)) continue;            if (bees.ownerOf(id) != msg.sender) continue;            Bee storage bee = idsAndBees[id];            if (bee.id == 0 || bee.active == 0) continue;            uint256 lastReward = bee.lastRewardTime;            uint256 epochsToReward = 0;            uint256 currentAmount = 0;            uint256 multiplier = 10;            if (bee.staked == 0) {                if (bee.lastTimeFed == 0) {                    bee.lastTimeFed = lastReward;                }                uint256 cutoff = lastReward + (bee.epochsLeft * EPOCH_LENGTH);                if (block.timestamp >= cutoff) {                    uint256 _e = cutoff - lastReward;                    epochsToReward = _e / EPOCH_LENGTH;                    currentAmount = HONEY_UNSTAKED_BEE_REWARDS_PER_EPOCH * epochsToReward;                    bee.active = 0;                    bee.epochsLeft = 0;                    bee.becameInactiveTime = block.timestamp;                } else {                    epochsToReward = ((block.timestamp - lastReward) / EPOCH_LENGTH);                    currentAmount = HONEY_UNSTAKED_BEE_REWARDS_PER_EPOCH * epochsToReward;                    bee.epochsLeft -= uint16(epochsToReward);                }                if (beeLevels[id] > 0) {                    multiplier = rewardsPerBeeLevel[BEE_LEVEL(beeLevels[id] * 2 - 1)];                }            } else if (bee.staked == 1) {                currentAmount += HONEY_STAKED_BEE_REWARDS_PER_EPOCH * ((block.timestamp - lastReward) / EPOCH_LENGTH);                if (beeLevels[id] > 0) multiplier = rewardsPerBeeLevel[BEE_LEVEL(beeLevels[id] * 2)];             }            amount += currentAmount * multiplier;            bee.lastRewardTime = block.timestamp;        }        require(amount > 0, \"Nothing to claim\");        amount = amount * 1e15;        if (honey.totalSupply() + amount > honey.maxSupply()) {            amount = (honey.maxSupply() - honey.totalSupply());        }        honey.<mask0>;        emit HoneyClaimed(msg.sender, amount);    }"