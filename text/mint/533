"function _unlockRewardsFromPools(        address staker,        address _to,        address[] memory _tokenList    ) private returns (uint256) {        require(_to != address(0), \"_URFP:1\");        require(_tokenList.length <= mapCounter, \"_URFP:2\");        uint256 totalHarvestedAmt = 0;        for (uint256 i = 0; i < _tokenList.length; i++) {            address token = _tokenList[i];            address lpToken = tokenToLPTokenMap[token];            require(lpToken != address(0), \"_URFP:3\");            if (IERC20Upgradeable(lpToken).balanceOf(staker) != 0) {                IStakersPoolV2(stakersPoolV2).reCalcPoolPT(lpToken);                IStakersPoolV2(stakersPoolV2).settlePendingRewards(staker, lpToken);            }            uint256 harvestedAmt = IStakersPoolV2(stakersPoolV2).harvestRewards(staker, lpToken, _to);            totalHarvestedAmt = totalHarvestedAmt.add(harvestedAmt);            if (IERC20Upgradeable(lpToken).balanceOf(staker) != 0) {                uint256 poolRewardPerLPToken = IStakersPoolV2(stakersPoolV2).getPoolRewardPerLPToken(lpToken);                ILPToken(lpToken).<mask0>;            }            emit UnlockRewardsFromPoolsEvent(staker, token, harvestedAmt);        }        return totalHarvestedAmt;    }"