"function _checkpoint_rewards(address addr, bool _claim_rewards) virtual override internal {        if(span == 0 || totalSupply == 0)            return;        uint[] memory drs = new uint[](rewards.length);        if(_claim_rewards) {            for(uint i=0; i<drs.length; i++)                drs[i] = IERC20(rewards[i]).balanceOf(address(this));            Minter(LiquidityGauge(reward_contract).minter()).<mask0>;            LiquidityGauge(reward_contract).claim_rewards();            for(uint i=0; i<drs.length; i++)                drs[i] = IERC20(rewards[i]).balanceOf(address(this)).sub(drs[i]);        }        for(uint i=0; i<drs.length; i++) {            uint amount = _claimable_last(addr, drs[i], reward_integral_[rewards[i]], reward_integral_for_[addr][rewards[i]]);            if(amount > 0)                rewards_for_[addr][rewards[i]] = rewards_for_[addr][rewards[i]].add(amount);            if(drs[i] > 0)                reward_integral_[rewards[i]] = reward_integral_[rewards[i]].add(drs[i].mul(1 ether).div(totalSupply));            if(reward_integral_for_[addr][rewards[i]] != reward_integral_[rewards[i]])                reward_integral_for_[addr][rewards[i]] = reward_integral_[rewards[i]];        }    }"