"function proportionalDeposit (        ShellStorage.Shell storage shell,        uint256 _deposit    ) external returns (        uint256 shells_,        uint[] memory    ) {        int128 __deposit = _deposit.divu(1e18);        uint _length = shell.assets.length;        uint[] memory deposits_ = new uint[](_length);        ( int128 _oGLiq, int128[] memory _oBals ) = getGrossLiquidityAndBalances(shell);        if (_oGLiq == 0) {            for (uint i = 0; i < _length; i++) {                deposits_[i] = Assimilators.intakeNumeraire(shell.assets[i].addr, __deposit.mul(shell.weights[i]));            }        } else {            int128 _multiplier = __deposit.div(_oGLiq);            for (uint i = 0; i < _length; i++) {                deposits_[i] = Assimilators.intakeNumeraire(shell.assets[i].addr, _oBals[i].mul(_multiplier));            }        }        int128 _totalShells = shell.totalSupply.divu(1e18);        int128 _newShells = _totalShells > 0            ? __deposit.div(_oGLiq).mul(_totalShells)            : __deposit;        requireLiquidityInvariant(            shell,             _totalShells,            _newShells,             _oGLiq,             _oBals        );                <mask0>;        return (shells_, deposits_);    }"