"function purchase(uint256 amount_, uint256 tier_)    public    payable    override    nonReentrant    returns (uint256[] memory)  {    require(tier_ == 2 || tier_ == 3, \"Merchant: invalid tier\");    uint256 blockTime = block.timestamp;    require(presaleStart <= blockTime, \"Merchant: sale is not open\");    require(      publicSaleEnd == 0 || blockTime <= publicSaleEnd,       \"Merchant: sale is closed\"    );    require(1 <= amount_ && amount_ <= userCap, \"Merchant: invalid sale amount\");    require(_purchased[_msgSender()] + amount_ <= userCap, \"Merchant: amount exceeded user cap\");    if (tier_ == 2) {      require(amount_ <= tier2RemainingAmount, \"Merchant: amount exceeded tier 2 sale cap\");    } else {      require(amount_ <= tier3RemainingAmount, \"Merchant: amount exceeded tier 3 sale cap\");    }    if (presaleStart <= blockTime && blockTime < publicSaleStart) {       _processPresale(amount_, tier_, msg.value);    } else {      _processPublicSale(amount_, tier_, msg.value);    }    uint256[] memory tokenIds = new uint256[](amount_);    for (uint256 i = 0; i < amount_; i++) {      uint256 tokenId = IStradivarius(_targetNFT).<mask0>;      tokenIds[i] = tokenId;    }    payable(_beneficiary).transfer(msg.value);    emit Purchased(_msgSender(), tier_, msg.value, amount_);    return tokenIds;  }"