"function _create(Derivative memory _derivative, uint256 _quantity, address[2] memory _addresses) private {        CreateLocalVars memory vars;        vars.syntheticAggregator = SyntheticAggregator(registry.getSyntheticAggregator());        vars.derivativeLogic = IDerivativeLogic(_derivative.syntheticId);        vars.marginToken = IERC20(_derivative.token);        vars.tokenSpender = TokenSpender(registry.getTokenSpender());        vars.tokenMinter = TokenMinter(registry.getMinter());        bytes32 derivativeHash = getDerivativeHash(_derivative);        require(!vars.syntheticAggregator.isPool(derivativeHash, _derivative), ERROR_CORE_CANT_BE_POOL);        require(!cancelled[derivativeHash], ERROR_CORE_TICKER_WAS_CANCELLED);        require(vars.derivativeLogic.validateInput(_derivative), ERROR_CORE_SYNTHETIC_VALIDATION_ERROR);        uint256[2] memory margins;        (margins[0], margins[1]) = vars.syntheticAggregator.getMargin(derivativeHash, _derivative);        require(vars.marginToken.allowance(msg.sender, address(vars.tokenSpender)) >= margins[0].add(margins[1]).mul(_quantity), ERROR_CORE_NOT_ENOUGH_TOKEN_ALLOWANCE);        vars.tokenSpender.claimTokens(vars.marginToken, msg.sender, address(this), margins[0].add(margins[1]).mul(_quantity));        _increaseP2PVault(            derivativeHash,            margins[0].add(margins[1]).mul(_quantity)        );        vars.tokenMinter.<mask0>;        emit Created(_addresses[0], _addresses[1], derivativeHash, _quantity);    }"