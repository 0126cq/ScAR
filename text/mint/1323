"function processClaim(        address _claimer,        uint256 _totalLockedForSP    ) external returns (uint256)    {        _requireIsInitialized();        _requireStakingAddressIsSet();        _requireDelegateManagerAddressIsSet();        _requireServiceProviderFactoryAddressIsSet();        require(            msg.sender == delegateManagerAddress,            \"ClaimsManager: ProcessClaim only accessible to DelegateManager\"        );        Staking stakingContract = Staking(stakingAddress);        uint256 lastUserClaimBlock = stakingContract.lastClaimedFor(_claimer);        require(            lastUserClaimBlock <= currentRound.fundedBlock,            \"ClaimsManager: Claim already processed for user\"        );        uint256 totalStakedAtFundBlockForClaimer = stakingContract.totalStakedForAt(            _claimer,            currentRound.fundedBlock);        (,,bool withinBounds,,,) = (            ServiceProviderFactory(serviceProviderFactoryAddress).getServiceProviderDetails(_claimer)        );        uint256 totalActiveClaimerStake = totalStakedAtFundBlockForClaimer.sub(_totalLockedForSP);        uint256 totalStakedAtFundBlock = stakingContract.totalStakedAt(currentRound.fundedBlock);        uint256 rewardsForClaimer = (          totalActiveClaimerStake.mul(fundingAmount)        ).div(totalStakedAtFundBlock);        if (!withinBounds || rewardsForClaimer == 0) {            stakingContract.updateClaimHistory(0, _claimer);            emit ClaimProcessed(                _claimer,                0,                totalStakedAtFundBlockForClaimer,                totalActiveClaimerStake            );            return 0;        }        audiusToken.<mask0>;        audiusToken.approve(stakingAddress, rewardsForClaimer);        stakingContract.stakeRewards(rewardsForClaimer, _claimer);        currentRound.totalClaimedInRound = currentRound.totalClaimedInRound.add(rewardsForClaimer);        uint256 newTotal = stakingContract.totalStakedFor(_claimer);        emit ClaimProcessed(            _claimer,            rewardsForClaimer,            totalStakedAtFundBlockForClaimer,            newTotal        );        return rewardsForClaimer;    }"