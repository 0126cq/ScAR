"function _executeWithdrawal(        bytes32 contextId,        address provider,        Token pool,        Pool storage data,        InternalWithdrawalAmounts memory amounts    ) private {        PoolLiquidity storage liquidity = data.liquidity;        PoolLiquidity memory prevLiquidity = liquidity;        AverageRates memory averageRates = data.averageRates;        if (_poolRateState(prevLiquidity, averageRates) == PoolRateState.Unstable) {            revert RateUnstable();        }        data.poolToken.burn(amounts.poolTokenAmount);        uint256 newPoolTokenTotalSupply = amounts.poolTokenTotalSupply - amounts.poolTokenAmount;        liquidity.stakedBalance = MathEx.mulDivF(            liquidity.stakedBalance,            newPoolTokenTotalSupply,            amounts.poolTokenTotalSupply        );        liquidity.baseTokenTradingLiquidity = amounts.newBaseTokenTradingLiquidity.toUint128();        liquidity.bntTradingLiquidity = amounts.newBNTTradingLiquidity.toUint128();        if (amounts.bntProtocolHoldingsDelta.value > 0) {            assert(amounts.bntProtocolHoldingsDelta.isNeg);             _bntPool.renounceFunding(contextId, pool, amounts.bntProtocolHoldingsDelta.value);        } else if (amounts.bntTradingLiquidityDelta.value > 0) {            if (amounts.bntTradingLiquidityDelta.isNeg) {                _bntPool.burnFromVault(amounts.bntTradingLiquidityDelta.value);            } else {                _bntPool.mint(address(_masterVault), amounts.bntTradingLiquidityDelta.value);            }        }        bool isProtectionEnabled = _protectionEnabled;        if (amounts.bntToMintForProvider > 0 && isProtectionEnabled) {            _bntPool.<mask0>;        }        if (amounts.baseTokensToTransferFromEPV > 0) {            _externalProtectionVault.withdrawFunds(                pool,                payable(address(_masterVault)),                amounts.baseTokensToTransferFromEPV            );            amounts.baseTokensToTransferFromMasterVault += amounts.baseTokensToTransferFromEPV;        }        if (amounts.baseTokensToTransferFromMasterVault > 0) {            _masterVault.withdrawFunds(pool, payable(provider), amounts.baseTokensToTransferFromMasterVault);        }        if (amounts.newBaseTokenTradingLiquidity == 0) {            data.averageRates.rate = zeroFraction112();            data.averageRates.invRate = zeroFraction112();        }        if (amounts.newBNTTradingLiquidity < _networkSettings.minLiquidityForTrading()) {            _resetTradingLiquidity(                contextId,                pool,                data,                amounts.newBNTTradingLiquidity,                TRADING_STATUS_UPDATE_MIN_LIQUIDITY            );        }        emit TokensWithdrawn({            contextId: contextId,            provider: provider,            token: pool,            baseTokenAmount: amounts.baseTokensToTransferFromMasterVault,            poolTokenAmount: amounts.poolTokenAmount,            externalProtectionBaseTokenAmount: amounts.baseTokensToTransferFromEPV,            bntAmount: isProtectionEnabled ? amounts.bntToMintForProvider : 0,            withdrawalFeeAmount: amounts.baseTokensWithdrawalFee        });        _dispatchTradingLiquidityEvents(contextId, pool, newPoolTokenTotalSupply, prevLiquidity, data.liquidity);    }"