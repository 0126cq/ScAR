"function _executeBorrow(ExecuteBorrowParams memory vars) internal {    DataTypes.ReserveData storage reserve = _reserves[vars.asset];    DataTypes.UserConfigurationMap storage userConfig = _usersConfig[vars.onBehalfOf];    address oracle = _addressesProvider.getPriceOracle();    uint256 amountInETH =      IPriceOracleGetter(oracle).getAssetPrice(vars.asset).mul(vars.amount).div(        10**reserve.configuration.getDecimals()      );    ValidationLogic.validateBorrow(      vars.asset,      reserve,      vars.onBehalfOf,      vars.amount,      amountInETH,      vars.interestRateMode,      _maxStableRateBorrowSizePercent,      _reserves,      userConfig,      _reservesList,      _reservesCount,      oracle    );    reserve.updateState();    uint256 currentStableRate = 0;    bool isFirstBorrowing = false;    if (DataTypes.InterestRateMode(vars.interestRateMode) == DataTypes.InterestRateMode.STABLE) {      currentStableRate = reserve.currentStableBorrowRate;      isFirstBorrowing = IStableDebtToken(reserve.stableDebtTokenAddress).mint(        vars.user,        vars.onBehalfOf,        vars.amount,        currentStableRate      );    } else {      isFirstBorrowing = IVariableDebtToken(reserve.variableDebtTokenAddress).<mask0>;    }    if (isFirstBorrowing) {      userConfig.setBorrowing(reserve.id, true);    }    reserve.updateInterestRates(      vars.asset,      vars.aTokenAddress,      0,      vars.releaseUnderlying ? vars.amount : 0    );    if (vars.releaseUnderlying) {      IEToken(vars.aTokenAddress).transferUnderlyingTo(vars.user, vars.amount);    }    emit Borrow(      vars.asset,      vars.user,      vars.onBehalfOf,      vars.amount,      vars.interestRateMode,      DataTypes.InterestRateMode(vars.interestRateMode) == DataTypes.InterestRateMode.STABLE        ? currentStableRate        : reserve.currentVariableBorrowRate,      vars.referralCode    );  }"