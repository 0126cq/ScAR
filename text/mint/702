"function buyNow(        Token memory _newToken,        uint16 _royaltyPoints,        string calldata _tokenSellingType,        bytes calldata _signature,        uint256 _quantity    ) external payable {        require(            keccak256(abi.encodePacked(_tokenSellingType)) ==                keccak256(abi.encodePacked(\"Fixed Sale\")),            \"Media: Invalid Selling Type!\"        );        require(_newToken._artist != msg.sender, \"Media: Owner Cannot Buy!\");        require(_quantity >= 1, \"Media: Invalid Quantity!\");        bytes32 tokenHash = getTokenHash(            _newToken._uri,            _newToken._title,            _newToken._totalSupply        );        if (_tokenHashToTokenID[tokenHash] == 0) {            <mask0>;        }        require(            _tokenSellingTypes[_newToken._artist][                _tokenHashToTokenID[tokenHash]            ][\"Fixed Sale\"] >= 1,            \"Media: Token Is Not On Sale!\"        );        if (!_newToken._isFungible) {            require(                ERC721Minter(_ERC721Address).ownerOf(                    _tokenHashToTokenID[tokenHash]                ) == _newToken._artist,                \"Media: Token Already Sold!\"            );        }        if (_newToken._price != 0) {            if (_quantity == 1)                require(                    msg.value == _newToken._price,                    \"Media: Wrong Amount Transferred!\"                );            else                require(                    msg.value == _newToken._price.mul(_quantity),                    \"Media: Wrong Amount Transferred!\"                );        }        _transfer(            _tokenHashToTokenID[tokenHash],            _newToken._artist,            msg.sender,            _quantity        );        _tokenSellingTypes[msg.sender][_tokenHashToTokenID[tokenHash]][            \"Unlockable\"        ] = _tokenSellingTypes[msg.sender][_tokenHashToTokenID[tokenHash]][            \"Unlockable\"        ].add(1);        payable(_marketAddress).transfer(msg.value);        IShiny_Market(_marketAddress)._divideMoney(            msg.value,            _adminAddress,            _newToken._artist        );        emit Buy(_tokenHashToTokenID[tokenHash], _newToken._artist, msg.sender);    }"