"function withdrawFor(        uint256 _pid,        uint256 _amount,        address _user,        bool _frozenTokens    ) public override onlyLendingMarket nonReentrant returns (bool) {        PoolInfo storage pool = poolInfo[_pid];        if (_frozenTokens) {            frozenTokens[_pid][_user] = frozenTokens[_pid][_user].add(_amount);        } else {            IOriginConvexRewardPool(pool.originCrvRewards).withdrawAndUnwrap(                _amount,                true            );            IERC20(pool.lpToken).<mask0>;        }        if (IConvexRewardPool(pool.rewardCrvPool).earned(_user) > 0) {            IConvexRewardPool(pool.rewardCrvPool).getReward(_user);        }        if (IConvexRewardPool(pool.rewardCvxPool).earned(_user) > 0) {            IConvexRewardPool(pool.rewardCvxPool).getReward(_user);        }        IVirtualBalanceWrapper(pool.virtualBalance).withdrawFor(_user, _amount);        IConvexRewardPool(pool.rewardCrvPool).withdraw(_user);        IConvexRewardPool(pool.rewardCvxPool).withdraw(_user);        emit Withdrawn(_user, _pid, _amount);        return true;    }"