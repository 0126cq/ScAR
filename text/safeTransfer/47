"function userWithDrawn(uint256 _roundId) isValidRound(_roundId) external whenNotPaused()  nonReentrant() {        RoundInfo memory round = rounds[_roundId];        uint256 fundOfUser = userFund[msg.sender][_roundId];        require(fundOfUser > 0, \"Invalid fund\");        require((block.timestamp <= round.startTime + round.depositDuration &&  round.totalWithdrawn == 0) ||                (block.timestamp >= (round.startTime + round.depositDuration + round.stakeDuration) && round.totalWithdrawn > 0), \"Can-not-withdrawn-now\");        uint256 amountToWithdrawn;        uint rewardToUser;        if (round.totalWithdrawn == 0) {            amountToWithdrawn = fundOfUser;            round.totalDeposit = round.totalDeposit - amountToWithdrawn;            rounds[_roundId] = round;        } else {            amountToWithdrawn = fundOfUser * round.totalWithdrawn / round.totalDeposit;            rewardToUser = fundOfUser * round.totalReward / round.totalDeposit;            userWithdrawnFund[msg.sender][_roundId] = amountToWithdrawn;            userReward[msg.sender][_roundId] = rewardToUser;        }        if(round.depositToken == address(0)) {            payable(msg.sender).sendValue(amountToWithdrawn);        } else {             IERC20(round.depositToken).<mask0>;         }        IERC20(round.rewardToken).safeTransfer(msg.sender, rewardToUser);         emit UserWithdrawn(msg.sender, _roundId, amountToWithdrawn);        delete userFund[msg.sender][_roundId];    }"