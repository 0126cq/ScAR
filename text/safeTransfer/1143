"function liquidate(address _user, uint256 _swapNumber) external override returns (bool) {        bytes32 swapKey = keccak256(abi.encode(_user, _swapNumber));        require(swaps[swapKey].user == _user, '11');        Swap memory swap = swaps[swapKey];        require(!swap.isClosed, '12');        uint256 expirationBlock = swap.openBlock.add(durationInDays.mul(BLOCKS_PER_DAY));        require(block.number >= expirationBlock, '17');        IERC20(underlier).safeTransferFrom(            msg.sender,            address(this),            _convertToUnderlierDecimal(swap.activeLiquidity)        );        (uint256 userToPay, uint256 ammToPay) =_calculateInterestAccrued(swap);        uint256 payout = userToPay > ammToPay ? userToPay.sub(ammToPay) : ammToPay.sub(userToPay);        uint256 supplementaryCollateral = swap.activeLiquidity;        uint256 activeLiquidityRecovered;        uint256 liquidatorReward;        if (ammToPay > userToPay) {            payout = Math.min(payout, swap.activeLiquidity);            activeLiquidityRecovered = swap.activeLiquidity.add(payout);            liquidatorReward = supplementaryCollateral.add(swap.swapCollateral).sub(payout);        }        else if (ammToPay < userToPay) {            payout = Math.min(payout, swap.swapCollateral);            activeLiquidityRecovered = swap.activeLiquidity.add(swap.swapCollateral);            liquidatorReward = supplementaryCollateral;        }        else {            activeLiquidityRecovered = swap.activeLiquidity;            liquidatorReward = supplementaryCollateral.add(swap.swapCollateral);        }        totalActiveLiquidity = totalActiveLiquidity.sub(swap.activeLiquidity);        totalSwapCollateral = totalSwapCollateral.sub(swap.swapCollateral);        totalSupplementaryCollateral = totalSupplementaryCollateral.sub(supplementaryCollateral);        totalAvailableLiquidity = totalAvailableLiquidity.add(activeLiquidityRecovered);        swaps[swapKey].isClosed = true;        utilization = _calculateUtilization();        fee = _calculateFee();        IERC20(underlier).<mask0>;        emit Liquidate(msg.sender, _user, _swapNumber, liquidatorReward);        return true;    }"