"function _burn(        uint256 tokenId_,        bool onlyIfExpired_,        address _account    ) private {        LockPosition memory _position = positions[tokenId_];        uint256 _unlockTime = _position.unlockTime;        bool _isExpired = block.timestamp > _unlockTime;        if (onlyIfExpired_) {            require(_isExpired, \"not-unlocked-yet\");        }        uint256 _locked = _position.lockedAmount;        uint256 _boosted = _position.boostedAmount;        esVSP721.burn(tokenId_);        delete positions[tokenId_];        locked[_account] -= _locked;        totalLocked -= _locked;        boosted[_account] -= _boosted;        totalBoosted -= _boosted;        uint256 _toTransfer = _locked;        if (!_isExpired && exitPenalty > 0) {            uint256 _lockPeriod = (_boosted * MAXIMUM_LOCK_PERIOD) / MAXIMUM_BOOST / _locked;            uint256 _progress = ((_unlockTime - block.timestamp) * 1e18) / _lockPeriod;            uint256 _penalty = (((_locked * exitPenalty) / 1e18) * _progress) / 1e18;            if (_penalty > 0) {                VSP.safeTransfer(treasury, _penalty);                _toTransfer -= _penalty;            }        }        VSP.<mask0>;        emit VspUnlocked(tokenId_, _locked, _toTransfer, _locked - _toTransfer);    }"