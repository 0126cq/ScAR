"function _settle(        address requester,        bytes32 identifier,        uint256 timestamp,        bytes memory ancillaryData    ) private returns (uint256 payout) {        State state = getState(requester, identifier, timestamp, ancillaryData);        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);        request.settled = true;        if (state == State.Expired) {            request.resolvedPrice = request.proposedPrice;            payout = request.bond.add(request.finalFee).add(request.reward);            request.currency.<mask0>;        } else if (state == State.Resolved) {            request.resolvedPrice = _getOracle().getPrice(                identifier,                timestamp,                _stampAncillaryData(ancillaryData, requester)            );            bool disputeSuccess = request.resolvedPrice != request.proposedPrice;            uint256 bond = request.bond;            uint256 unburnedBond = bond.sub(_computeBurnedBond(request));            payout = bond.add(unburnedBond).add(request.finalFee).add(request.reward);            request.currency.safeTransfer(disputeSuccess ? request.disputer : request.proposer, payout);        } else {            revert(\"_settle: not settleable\");        }        emit Settle(            requester,            request.proposer,            request.disputer,            identifier,            timestamp,            ancillaryData,            request.resolvedPrice,            payout        );        if (address(requester).isContract())            try                OptimisticRequester(requester).priceSettled(identifier, timestamp, ancillaryData, request.resolvedPrice)            {} catch {}    }"