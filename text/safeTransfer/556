"function _endAuction(uint256 _tokenId) internal virtual {        Offer storage offer = offers[_tokenId];        require(block.timestamp >= offer.endTime);        require(offer.isForSale == true);        address payable seller = payable(_ownerOf(_tokenId));        Bid storage bid = bids[_tokenId];        _transfer(offer.seller, bid.bidder, _tokenId);        uint256 _commissionValue = (bid.value * feeRate()) / 1000;        uint256 royaltyValue = calculateRoyaltyValue(_tokenId);        uint256 _sellerValue = bid.value - _commissionValue - royaltyValue;        if (offer.tokenAddress == address(0)) {            seller.transfer(_sellerValue);            address payable contractOwner = payable(_owner);            contractOwner.transfer(_commissionValue);            if (royaltyValue > 0) {                transferNativeRoyaltyValue(_tokenId);            }        } else {            TransferHelper.<mask0>;            TransferHelper.safeTransfer(                offer.tokenAddress,                _owner,                _commissionValue            );            if (royaltyValue > 0) {                transferTokenRoyaltyValue(_tokenId);            }        }        emit EndAuction(_tokenId, bid.value, block.timestamp);        _resetAuction(_tokenId);    }"