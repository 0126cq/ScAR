"function claimTokens() external whenNotPaused {        require(block.timestamp >= claimStartTime && block.timestamp < claimStartTime + claimDuration, \"Claimable period is finished\");        require((beta.balanceOf(msg.sender) > 0 || alpha.balanceOf(msg.sender) > 0), \"Nothing to claim\");        uint256 tokensToClaim;        uint256 gammaToBeClaim;        (tokensToClaim, gammaToBeClaim) = getClaimableTokenAmountAndGammaToClaim(msg.sender);        for(uint256 i; i < alpha.balanceOf(msg.sender); ++i) {            uint256 tokenId = alpha.tokenOfOwnerByIndex(msg.sender, i);            if(!alphaClaimed[tokenId]) {                alphaClaimed[tokenId] = true;                emit AlphaClaimed(tokenId, msg.sender, block.timestamp);            }        }        for(uint256 i; i < beta.balanceOf(msg.sender); ++i) {            uint256 tokenId = beta.tokenOfOwnerByIndex(msg.sender, i);            if(!betaClaimed[tokenId]) {                betaClaimed[tokenId] = true;                emit BetaClaimed(tokenId, msg.sender, block.timestamp);            }        }        uint256 currentGammaClaimed;        for(uint256 i; i < gamma.balanceOf(msg.sender); ++i) {            uint256 tokenId = gamma.tokenOfOwnerByIndex(msg.sender, i);            if(!gammaClaimed[tokenId] && currentGammaClaimed < gammaToBeClaim) {                gammaClaimed[tokenId] = true;                emit GammaClaimed(tokenId, msg.sender, block.timestamp);                currentGammaClaimed++;            }        }        grapesToken.<mask0>;        totalClaimed += tokensToClaim;        emit AirDrop(msg.sender, tokensToClaim, block.timestamp);    }"