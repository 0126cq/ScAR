"function skimExcessBalances(address token) external {        require(msg.sender == treasury);        uint256 minBalanceToKeep = totalDeposits[token] + 1;        Types.BankState memory cachedBankState = state;        uint256 availableBalance;        if (token == TOKEN_ETH) {            availableBalance = address(this).balance;            require(availableBalance > minBalanceToKeep);            TransferHelper.safeTransferETH(                msg.sender,                availableBalance - minBalanceToKeep            );        } else {            availableBalance = IERC20Token(token).balanceOf(address(this));            require(availableBalance > minBalanceToKeep);            TransferHelper.<mask0>;            if (token == TOKEN_WETH) {                cachedBankState.wethBalance = uint32(minBalanceToKeep / TOKEN_WETH_MULTIPLIER);            } else if (token == TOKEN_WBTC) {                cachedBankState.wbtcBalance = uint32(minBalanceToKeep / TOKEN_WBTC_MULTIPLIER);            } else if (token == TOKEN_DAI) {                cachedBankState.daiBalance  = uint32(minBalanceToKeep / TOKEN_DAI_MULTIPLIER );            } else if (token == TOKEN_USDC) {                cachedBankState.usdcBalance = uint32(minBalanceToKeep / TOKEN_USDC_MULTIPLIER);            } else if (token == TOKEN_USDT) {                cachedBankState.usdtBalance = uint32(minBalanceToKeep / TOKEN_USDT_MULTIPLIER);            }        }        require(cachedBankState.numCalls == state.numCalls);        cachedBankState.numCalls += 1;        state = cachedBankState;        emit SkimmedBalance(msg.sender, token, availableBalance - minBalanceToKeep);    }"