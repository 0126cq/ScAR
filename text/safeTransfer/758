"function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) public override checkContract(_account) _non_reentrant_ returns (uint _mint_amount) {        uint _pool = balance();        require(totalDepositCap == 0 || _pool <= totalDepositCap, \">totalDepositCap\");        uint _before = basedToken.balanceOf(address(this));        if (_input == address(basedToken)) {            basedToken.safeTransferFrom(_account, address(this), _amount);        } else {            uint _before0 = token0.balanceOf(address(this));            uint _before1 = token1.balanceOf(address(this));            IERC20(_input).safeTransferFrom(_account, address(basedConverter), _amount);            basedConverter.convert(_input, address(basedToken), address(this));            uint _after0 = token0.balanceOf(address(this));            uint _after1 = token1.balanceOf(address(this));            if (_after0 > _before0) {                token0.<mask0>;            }            if (_after1 > _before1) {                token1.safeTransfer(_account, _after1.sub(_before1));            }        }        uint _after = basedToken.balanceOf(address(this));        _amount = _after.sub(_before);         require(depositLimit == 0 || _amount <= depositLimit, \">depositLimit\");        require(_amount > 0, \"no token\");        _mint_amount = _deposit(_to, _pool, _amount);        require(_mint_amount >= _min_mint_amount, \"slippage\");    }"