"function processFees() internal {        uint256 profitToFund = 0;        for (uint256 i; i < getStrategyCount(); i++) {            address strategy = strategyList[i];            uint256 profit = 0;            uint256 strategyCreatorFee = 0;            if (                IStrategy(strategy).investedUnderlyingBalance() >                strategies[strategy].lastBalance            ) {                profit =                    IStrategy(strategy).investedUnderlyingBalance() -                    strategies[strategy].lastBalance;                strategyCreatorFee = profit                    .mul(strategies[strategy].performanceFeeStrategy)                    .div(MAX_BPS);                if (                    strategyCreatorFee > 0 &&                    strategyCreatorFee < underlyingBalanceInFund()                ) {                    IERC20(_underlying()).safeTransfer(                        IStrategy(strategy).creator(),                        strategyCreatorFee                    );                }                profitToFund = profitToFund.add(profit).sub(strategyCreatorFee);            }            emit StrategyRewards(strategy, profit, strategyCreatorFee);        }        uint256 fundManagerFee =            profitToFund.mul(_performanceFeeFund()).div(MAX_BPS);        if (fundManagerFee > 0 && fundManagerFee < underlyingBalanceInFund()) {            address fundManagerRewards =                (_fundManager() == _governance())                    ? _platformRewards()                    : _fundManager();            IERC20(_underlying()).safeTransfer(                fundManagerRewards,                fundManagerFee            );            emit FundManagerRewards(profitToFund, fundManagerFee);        }        uint256 platformFee =            (_totalInvested() * (block.timestamp - _lastHardworkTimestamp()))                .mul(_platformFee())                .div(MAX_BPS)                .div(SECS_PER_YEAR);        if (platformFee > 0 && platformFee < underlyingBalanceInFund()) {            IERC20(_underlying()).<mask0>;            emit PlatformRewards(                _totalInvested(),                block.timestamp - _lastHardworkTimestamp(),                platformFee            );        }    }"