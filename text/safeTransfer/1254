"function ZapOut2PairToken(        address _FromUniPoolAddress,        uint256 _IncomingLP,        address affiliate    )        public        nonReentrant        stopInEmergency        returns (uint256 amountA, uint256 amountB)    {        IUniswapV2Pair pair = IUniswapV2Pair(_FromUniPoolAddress);        require(address(pair) != address(0), \"Error: Invalid Unipool Address\");        address token0 = pair.token0();        address token1 = pair.token1();        IERC20(_FromUniPoolAddress).safeTransferFrom(            msg.sender,            address(this),            _IncomingLP        );        IERC20(_FromUniPoolAddress).safeApprove(            address(uniswapV2Router),            _IncomingLP        );        if (token0 == wethTokenAddress || token1 == wethTokenAddress) {            address _token = token0 == wethTokenAddress ? token1 : token0;            (amountA, amountB) = uniswapV2Router.removeLiquidityETH(                _token,                _IncomingLP,                1,                1,                address(this),                deadline            );            uint256 tokenGoodwill = _subtractGoodwill(                _token,                amountA,                affiliate            );            uint256 ethGoodwill = _subtractGoodwill(                ETHAddress,                amountB,                affiliate            );            IERC20(_token).<mask0>;            Address.sendValue(msg.sender, amountB.sub(ethGoodwill));        } else {            (amountA, amountB) = uniswapV2Router.removeLiquidity(                token0,                token1,                _IncomingLP,                1,                1,                address(this),                deadline            );            uint256 tokenAGoodwill = _subtractGoodwill(                token0,                amountA,                affiliate            );            uint256 tokenBGoodwill = _subtractGoodwill(                token1,                amountB,                affiliate            );            IERC20(token0).safeTransfer(                msg.sender,                amountA.sub(tokenAGoodwill)            );            IERC20(token1).safeTransfer(                msg.sender,                amountB.sub(tokenBGoodwill)            );        }        emit zapOut(msg.sender, _FromUniPoolAddress, token0, amountA);        emit zapOut(msg.sender, _FromUniPoolAddress, token1, amountB);    }"