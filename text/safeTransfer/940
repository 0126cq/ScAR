"function claimRewardToken(uint256 _pid) public {        PoolInfo storage pool = poolInfo[_pid];        IOriginConvexRewardPool(pool.originCrvRewards).getReward(            address(this),            true        );        address rewardUnderlyToken = IOriginConvexRewardPool(            pool.originCrvRewards        ).rewardToken();        uint256 crvBalance = IERC20(rewardUnderlyToken).balanceOf(            address(this)        );        if (crvBalance > 0) {            IERC20(rewardUnderlyToken).safeTransfer(                pool.rewardCrvPool,                crvBalance            );            IConvexRewardPool(pool.rewardCrvPool).notifyRewardAmount(                crvBalance            );        }        uint256 extraRewardsLength = IConvexRewardPool(pool.rewardCrvPool)            .extraRewardsLength();        for (uint256 i = 0; i < extraRewardsLength; i++) {            address currentExtraReward = IConvexRewardPool(pool.rewardCrvPool)                .extraRewards(i);            address originExtraRewardToken = IOriginConvexRewardPool(                pool.originCrvRewards            ).extraRewards(i);            address extraRewardUnderlyToken = IOriginConvexVirtualBalanceRewardPool(                    originExtraRewardToken                ).rewardToken();            IOriginConvexVirtualBalanceRewardPool(originExtraRewardToken)                .getReward(address(this));            uint256 extraBalance = IERC20(extraRewardUnderlyToken).balanceOf(                address(this)            );            if (extraBalance > 0) {                IERC20(extraRewardUnderlyToken).<mask0>;                IConvexRewardPool(currentExtraReward).notifyRewardAmount(                    extraBalance                );            }        }        uint256 cvxBal = IERC20(rewardCvxToken).balanceOf(address(this));        if (cvxBal > 0) {            IERC20(rewardCvxToken).safeTransfer(pool.rewardCvxPool, cvxBal);            IConvexRewardPool(pool.rewardCvxPool).notifyRewardAmount(cvxBal);        }    }"