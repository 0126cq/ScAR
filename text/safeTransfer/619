"function withdrawLiquidation(uint256 liquidationId, address sponsor)        public        withdrawable(liquidationId, sponsor)        fees()        nonReentrant()        returns (RewardsData memory)    {        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);        _settle(liquidationId, sponsor);        FixedPoint.Unsigned memory feeAttenuation = _getFeeAdjustedCollateral(liquidation.rawUnitCollateral);        FixedPoint.Unsigned memory settlementPrice = liquidation.settlementPrice;        FixedPoint.Unsigned memory tokenRedemptionValue =            liquidation.tokensOutstanding.mul(settlementPrice).mul(feeAttenuation);        FixedPoint.Unsigned memory collateral = liquidation.lockedCollateral.mul(feeAttenuation);        FixedPoint.Unsigned memory disputerDisputeReward = disputerDisputeRewardPercentage.mul(tokenRedemptionValue);        FixedPoint.Unsigned memory sponsorDisputeReward = sponsorDisputeRewardPercentage.mul(tokenRedemptionValue);        FixedPoint.Unsigned memory disputeBondAmount = collateral.mul(disputeBondPercentage);        FixedPoint.Unsigned memory finalFee = liquidation.finalFee.mul(feeAttenuation);        RewardsData memory rewards;        if (liquidation.state == Status.DisputeSucceeded) {            rewards.payToDisputer = disputerDisputeReward.add(disputeBondAmount).add(finalFee);            rewards.payToSponsor = sponsorDisputeReward.add(collateral.sub(tokenRedemptionValue));            rewards.payToLiquidator = tokenRedemptionValue.sub(sponsorDisputeReward).sub(disputerDisputeReward);            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);            rewards.paidToSponsor = _removeCollateral(rawLiquidationCollateral, rewards.payToSponsor);            rewards.paidToDisputer = _removeCollateral(rawLiquidationCollateral, rewards.payToDisputer);            collateralCurrency.safeTransfer(liquidation.disputer, rewards.paidToDisputer.rawValue);            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);            collateralCurrency.<mask0>;        } else if (liquidation.state == Status.DisputeFailed) {            rewards.payToLiquidator = collateral.add(disputeBondAmount).add(finalFee);            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);        } else if (liquidation.state == Status.NotDisputed) {            rewards.payToLiquidator = collateral.add(finalFee);            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);        }        emit LiquidationWithdrawn(            msg.sender,            rewards.paidToLiquidator.rawValue,            rewards.paidToDisputer.rawValue,            rewards.paidToSponsor.rawValue,            liquidation.state,            settlementPrice.rawValue        );        delete liquidations[sponsor][liquidationId];        return rewards;    }"