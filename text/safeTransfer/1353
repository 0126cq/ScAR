"function _swap(        uint256 fromAmount,        address[] memory path    )        private        returns(uint256 tokensBought)    {        require(path.length > 1, \"More than 1 token required\");        uint8 pairs = uint8(path.length - 1);        bool tokensBoughtEth;        tokensBought = fromAmount;        address receiver;        bytes memory localData = adapterVsData[key];        LocalData memory data = abi.decode(localData, (LocalData));        for(uint8 i = 0; i < pairs; i++) {            address tokenSold = path[i];            address tokenBought = path[i+1];            address currentPair = receiver;            if (i == pairs - 1) {                if (tokenBought == Utils.ethAddress()) {                    tokenBought = Utils.wethAddress();                    tokensBoughtEth = true;                }            }            if (i == 0) {                if (tokenSold == Utils.ethAddress()) {                    tokenSold = Utils.wethAddress();                    currentPair = UniswapV3LibFork.pairFor(data.factory, tokenSold, tokenBought, data.initCode);                    IWETH(Utils.wethAddress()).deposit{value: fromAmount}();                    assert(IWETH(Utils.wethAddress()).transfer(currentPair, fromAmount));                }                else {                    currentPair = UniswapV3LibFork.pairFor(data.factory, tokenSold, tokenBought, data.initCode);                    TransferHelper.<mask0>;                }            }            tokensBought = UniswapV3LibFork.getAmountOutByPair(tokensBought, currentPair, tokenSold, tokenBought, data.feeMultiplicationFactor);            if ((i + 1) == pairs) {                receiver = address(this);            }            else {                receiver = UniswapV3LibFork.pairFor(data.factory, tokenBought, path[i+2] == Utils.ethAddress() ? Utils.wethAddress() : path[i+2], data.initCode);            }            (address token0,) = UniswapV3LibFork.sortTokens(tokenSold, tokenBought);            (uint256 amount0Out, uint256 amount1Out) = tokenSold == token0 ? (uint256(0), tokensBought) : (tokensBought, uint256(0));            IUniswapV2Pair(currentPair).swap(                amount0Out, amount1Out, receiver, new bytes(0)            );        }        if (tokensBoughtEth) {            IWETH(Utils.wethAddress()).withdraw(tokensBought);        }    }"