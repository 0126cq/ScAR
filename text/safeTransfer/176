"function _withdraw(uint256 amount) internal returns (uint256) {        uint256 balanceUnderlying = aToken.balanceOf(address(this));        uint256 looseBalance = want.balanceOf(address(this));        uint256 total = balanceUnderlying + looseBalance;        if (amount > total) {            amount = total;        }        if (looseBalance >= amount) {            want.safeTransfer(address(strategy), amount);            return amount;        }        uint256 liquidity = want.balanceOf(address(aToken));        if (liquidity > 1) {            uint256 toWithdraw = amount - looseBalance;            if (toWithdraw <= liquidity) {                _lendingPool().withdraw(address(want), toWithdraw, address(this));            } else {                _lendingPool().withdraw(address(want), liquidity, address(this));            }        }        looseBalance = want.balanceOf(address(this));        want.<mask0>;        return looseBalance;    }"