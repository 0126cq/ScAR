"function sellOption(        address holder,        uint256 period,        uint256 amount,        uint256 strike    ) external override returns (uint256 id) {        if (strike == 0) strike = _currentPrice();        uint256 balance = totalBalance();        uint256 amountToBeLocked = _calculateLockedAmount(amount);        require(period >= 1 days, \"Pool Error: The period is too short\");        require(period <= 90 days, \"Pool Error: The period is too long\");        require(            (lockedAmount + amountToBeLocked) * 100 <=                balance * maxUtilizationRate,            \"Pool Error: The amount is too large\"        );        (uint256 settlementFee, uint256 premium) =            _calculateTotalPremium(period, amount, strike);        uint256 hedgedPremiumTotal = (premium * hedgedBalance) / balance;        uint256 hedgeFee = (hedgedPremiumTotal * hedgeFeeRate) / 100;        uint256 hedgePremium = hedgedPremiumTotal - hedgeFee;        uint256 unhedgePremium = premium - hedgedPremiumTotal;        lockedAmount += amountToBeLocked;        id = optionsManager.createOptionFor(holder);        options[id] = Option(            OptionState.Active,            strike,            amount,            amountToBeLocked,            block.timestamp + period,            hedgePremium,            unhedgePremium        );        token.safeTransferFrom(            _msgSender(),            address(this),            premium + settlementFee        );        token.<mask0>;        settlementFeeRecipient.distributeUnrealizedRewards();        if (hedgeFee > 0) token.safeTransfer(hedgePool, hedgeFee);        emit Acquired(id, settlementFee, premium);    }"