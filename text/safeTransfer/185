"function flashLoan(        Token token,        uint256 amount,        IFlashLoanRecipient recipient,        bytes calldata data    )        external        validAddress(address(token))        greaterThanZero(amount)        validAddress(address(recipient))        whenNotPaused        nonReentrant    {        if (!token.isEqual(_bnt) && !_networkSettings.isTokenWhitelisted(token)) {            revert NotWhitelisted();        }        uint256 feeAmount = MathEx.mulDivF(amount, _networkSettings.flashLoanFeePPM(token), PPM_RESOLUTION);        uint256 prevBalance = token.balanceOf(address(this));        _masterVault.withdrawFunds(token, payable(address(recipient)), amount);        recipient.onFlashLoan(msg.sender, token.toIERC20(), amount, feeAmount, data);        uint256 returnedAmount = token.balanceOf(address(this)) - prevBalance;        if (returnedAmount < amount + feeAmount) {            revert InsufficientFlashLoanReturn();        }        if (token.isNative()) {            payable(address(_masterVault)).sendValue(returnedAmount);        } else {            token.<mask0>;        }        if (token.isEqual(_bnt)) {            IBNTPool cachedBNTPool = _bntPool;            cachedBNTPool.onFeesCollected(token, feeAmount, false);        } else {            IPoolCollection poolCollection = _poolCollection(token);            poolCollection.onFeesCollected(token, feeAmount);        }        emit FlashLoanCompleted({ token: token, borrower: msg.sender, amount: amount, feeAmount: feeAmount });    }"