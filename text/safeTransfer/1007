"function claim()        public        onlyInitialized        onlyOwner        nonReentrant        returns (uint256)    {        ICompoundComptroller(compoundComptroller).claimComp(address(this));        uint256 balanceOfComp = IERC20(compAddress).balanceOf(address(this));        if (balanceOfComp > 0) {            IERC20(compAddress).safeTransfer(rewardCompPool, balanceOfComp);            IBaseReward(rewardCompPool).notifyRewardAmount(balanceOfComp);        }        uint256 bal;        uint256 cTokens = IERC20(lpToken).balanceOf(address(this));        if (totalUnderlyToken == 0 && frozenUnderlyToken == 0) {            if (cTokens > 0) {                uint256 redeemState = ICompound(lpToken).redeem(cTokens);                require(                    redeemState == 0,                    \"SupplyTreasuryFundForCompound: !redeemState\"                );                if (isErc20) {                    bal = IERC20(underlyToken).balanceOf(address(this));                    IERC20(underlyToken).safeTransfer(owner, bal);                } else {                    bal = address(this).balance;                    if (bal > 0) {                        payable(owner).sendValue(bal);                    }                }                return bal;            }        }        uint256 exchangeRateStored = ICompound(lpToken).exchangeRateCurrent();        uint256 cTokenPrice = cTokens.mul(exchangeRateStored).div(1e18);        if (cTokenPrice > totalUnderlyToken.add(frozenUnderlyToken)) {            uint256 interestCToken = cTokenPrice                .sub(totalUnderlyToken.add(frozenUnderlyToken))                .mul(1e18)                .div(exchangeRateStored);            uint256 redeemState = ICompound(lpToken).redeem(interestCToken);            require(                redeemState == 0,                \"SupplyTreasuryFundForCompound: !redeemState\"            );            if (isErc20) {                bal = IERC20(underlyToken).balanceOf(address(this));                IERC20(underlyToken).<mask0>;            } else {                bal = address(this).balance;                if (bal > 0) {                    payable(owner).sendValue(bal);                }            }        }        return bal;    }"