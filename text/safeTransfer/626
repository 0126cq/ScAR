"function _updateFundingRate() internal {        uint256 proposalTime = fundingRate.proposalTime;        if (proposalTime != 0) {            OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();            bytes32 identifier = fundingRate.identifier;            bytes memory ancillaryData = _getAncillaryData();            try optimisticOracle.settleAndGetPrice(identifier, proposalTime, ancillaryData) returns (int256 price) {                uint256 lastUpdateTime = fundingRate.updateTime;                if (proposalTime >= lastUpdateTime) {                    fundingRate.rate = FixedPoint.Signed(price);                    fundingRate.updateTime = proposalTime;                    FixedPoint.Unsigned memory reward = FixedPoint.fromUnscaledUint(0);                    OptimisticOracleInterface.Request memory request =                        optimisticOracle.getRequest(address(this), identifier, proposalTime, ancillaryData);                    if (request.disputer == address(0)) {                        reward = _pfc().mul(_getConfig().rewardRatePerSecond).mul(proposalTime.sub(lastUpdateTime));                        if (reward.isGreaterThan(0)) {                            _adjustCumulativeFeeMultiplier(reward, _pfc());                            collateralCurrency.<mask0>;                        }                    }                    emit FundingRateUpdated(fundingRate.rate.rawValue, fundingRate.updateTime, reward.rawValue);                }                fundingRate.proposalTime = 0;            } catch {                OptimisticOracleInterface.Request memory request =                    optimisticOracle.getRequest(address(this), identifier, proposalTime, ancillaryData);                if (request.disputer != address(0) || request.proposer == address(0)) {                    fundingRate.proposalTime = 0;                }            }        }    }"