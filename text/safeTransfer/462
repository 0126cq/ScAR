"function convert(        address _input,        address _output,        uint256 _inputAmount    ) external override onlyAuthorized returns (uint256 _outputAmount) {        if (_output == address(token3CRV)) {             uint256[3] memory amounts;            for (uint8 i = 0; i < 3; i++) {                if (_input == address(tokens[i])) {                    ( uint256 _min, uint256 _max ) = getExpected(_inputAmount.mul(PRECISION_MUL[i]));                    amounts[i] = _inputAmount;                    uint256 _before = token3CRV.balanceOf(address(this));                    stableSwap3Pool.add_liquidity(amounts, _min);                    uint256 _after = token3CRV.balanceOf(address(this));                    _outputAmount = _after.sub(_before);                    require(_outputAmount <= _max, \">_max\");                    token3CRV.safeTransfer(msg.sender, _outputAmount);                    return _outputAmount;                }            }        } else if (_input == address(token3CRV)) {             ( uint256 _min, uint256 _max ) = getExpected(_inputAmount);            for (uint8 i = 0; i < 3; i++) {                if (_output == address(tokens[i])) {                    uint256 _before = tokens[i].balanceOf(address(this));                    stableSwap3Pool.remove_liquidity_one_coin(_inputAmount, i, _min.div(PRECISION_MUL[i]));                    uint256 _after = tokens[i].balanceOf(address(this));                    _outputAmount = _after.sub(_before);                    require(_outputAmount <= _max, \">_max\");                    tokens[i].<mask0>;                    return _outputAmount;                }            }        }        return 0;    }"