"function uniswapV2Call(        address sender,        uint256 amount0,        uint256 amount1,        bytes memory data    ) public {        require(msg.sender == uniswap_pair, \"bad msg.sender\");        require(sender == address(this), \"bad origin\");        UniVars memory uniVars = abi.decode(data, (UniVars));        YUANTokenInterface yuan = YUANTokenInterface(yuanAddress);        if (uniVars.amountFromReserves > 0) {            yuan.transferFrom(                reservesContracts[0],                uniswap_pair,                uniVars.amountFromReserves            );            if (uniVars.amountFromReserves < uniVars.yuansToUni) {                yuan.mint(                    uniswap_pair,                    uniVars.yuansToUni.sub(uniVars.amountFromReserves)                );            }        } else {            yuan.mint(uniswap_pair, uniVars.yuansToUni);        }        if (uniVars.mintToReserves > 0) {            yuan.mint(reservesContracts[0], uniVars.mintToReserves);        }        if (isToken0) {            if (public_goods != address(0) && public_goods_perc > 0) {                uint256 amount_to_public_goods = amount1                    .mul(public_goods_perc)                    .div(BASE);                SafeERC20.safeTransfer(                    IERC20(reserveToken),                    reservesContracts[0],                    amount1.sub(amount_to_public_goods)                );                SafeERC20.safeTransfer(                    IERC20(reserveToken),                    public_goods,                    amount_to_public_goods                );                emit TreasuryIncreased(                    amount1.sub(amount_to_public_goods),                    uniVars.yuansToUni,                    uniVars.amountFromReserves,                    uniVars.mintToReserves                );            } else {                SafeERC20.safeTransfer(                    IERC20(reserveToken),                    reservesContracts[0],                    amount1                );                emit TreasuryIncreased(                    amount1,                    uniVars.yuansToUni,                    uniVars.amountFromReserves,                    uniVars.mintToReserves                );            }        } else {            if (public_goods != address(0) && public_goods_perc > 0) {                uint256 amount_to_public_goods = amount0                    .mul(public_goods_perc)                    .div(BASE);                SafeERC20.safeTransfer(                    IERC20(reserveToken),                    reservesContracts[0],                    amount0.sub(amount_to_public_goods)                );                SafeERC20.safeTransfer(                    IERC20(reserveToken),                    public_goods,                    amount_to_public_goods                );                emit TreasuryIncreased(                    amount0.sub(amount_to_public_goods),                    uniVars.yuansToUni,                    uniVars.amountFromReserves,                    uniVars.mintToReserves                );            } else {                SafeERC20.<mask0>;                emit TreasuryIncreased(                    amount0,                    uniVars.yuansToUni,                    uniVars.amountFromReserves,                    uniVars.mintToReserves                );            }        }    }"