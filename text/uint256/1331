"function getChunkRebalanceNotional(        string[] calldata _exchangeNames    )        external        view        returns(uint256[] memory sizes, address sellAsset, address buyAsset)    {        uint256 newLeverageRatio;        uint256 currentLeverageRatio = getCurrentLeverageRatio();        bool isRipcord = false;        if (currentLeverageRatio > incentive.incentivizedLeverageRatio) {            newLeverageRatio = methodology.maxLeverageRatio;            isRipcord = true;        } else if (twapLeverageRatio > 0) {            newLeverageRatio = twapLeverageRatio;        } else {            newLeverageRatio = _calculateNewLeverageRatio(currentLeverageRatio);        }        ActionInfo memory actionInfo = _createActionInfo();        bool isLever = newLeverageRatio > currentLeverageRatio;        sizes = new <mask0>;        for (uint256 i = 0; i < _exchangeNames.length; i++) {            LeverageInfo memory leverageInfo = LeverageInfo({                action: actionInfo,                currentLeverageRatio: currentLeverageRatio,                slippageTolerance: isRipcord ? incentive.incentivizedSlippageTolerance : execution.slippageTolerance,                twapMaxTradeSize: isRipcord ?                    exchangeSettings[_exchangeNames[i]].incentivizedTwapMaxTradeSize :                    exchangeSettings[_exchangeNames[i]].twapMaxTradeSize,                exchangeName: _exchangeNames[i]            });            (uint256 collateralNotional, ) = _calculateChunkRebalanceNotional(leverageInfo, newLeverageRatio, isLever);            sizes[i] = isLever ? _calculateBorrowUnits(collateralNotional, leverageInfo.action) : collateralNotional;        }        sellAsset = isLever ? strategy.borrowAsset : strategy.collateralAsset;        buyAsset = isLever ? strategy.collateralAsset : strategy.borrowAsset;    }"