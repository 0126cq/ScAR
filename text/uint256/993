"function init(IWeightedPool _pool) external {        require(address(pool) == address(0), \"BalancerLBPSwapper: initialized\");        _initTimed();        pool = _pool;        IVault _vault = _pool.getVault();        vault = _vault;        require(_pool.getOwner() == address(this), \"BalancerLBPSwapper: contract not pool owner\");        bytes32 _pid = _pool.getPoolId();        pid = _pid;        (IERC20[] memory tokens, , ) = _vault.getPoolTokens(_pid);        require(tokens.length == 2, \"BalancerLBPSwapper: pool does not have 2 tokens\");        require(            tokenSpent == address(tokens[0]) || tokenSpent == address(tokens[1]),            \"BalancerLBPSwapper: tokenSpent not in pool\"        );        require(            tokenReceived == address(tokens[0]) || tokenReceived == address(tokens[1]),            \"BalancerLBPSwapper: tokenReceived not in pool\"        );        assets = new IAsset[](2);        assets[0] = IAsset(address(tokens[0]));        assets[1] = IAsset(address(tokens[1]));        bool tokenSpentAtIndex0 = tokenSpent == address(tokens[0]);        initialWeights = new <mask0>;        endWeights = new uint256[](2);        if (tokenSpentAtIndex0) {            initialWeights[0] = LARGE_PERCENT;            initialWeights[1] = SMALL_PERCENT;            endWeights[0] = SMALL_PERCENT;            endWeights[1] = LARGE_PERCENT;        } else {            initialWeights[0] = SMALL_PERCENT;            initialWeights[1] = LARGE_PERCENT;            endWeights[0] = LARGE_PERCENT;            endWeights[1] = SMALL_PERCENT;        }        _pool.approve(address(_vault), type(uint256).max);        IERC20(tokenSpent).approve(address(_vault), type(uint256).max);        IERC20(tokenReceived).approve(address(_vault), type(uint256).max);    }"