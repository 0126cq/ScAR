"function deserialize_proof_old(uint256[] memory public_inputs, uint256[] memory serialized_proof)        internal        pure        returns (ProofOld memory proof)    {        require(serialized_proof.length == SERIALIZED_PROOF_LENGTH_OLD);        proof.input_values = new <mask0>;        for (uint256 i = 0; i < public_inputs.length; i++) {            proof.input_values[i] = public_inputs[i];        }        uint256 j = 0;        for (uint256 i = 0; i < STATE_WIDTH_OLD; i++) {            proof.wire_commitments[i] = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);            j += 2;        }        proof.grand_product_commitment = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);        j += 2;        for (uint256 i = 0; i < STATE_WIDTH_OLD; i++) {            proof.quotient_poly_commitments[i] = PairingsBn254.new_g1_checked(                serialized_proof[j],                serialized_proof[j + 1]            );            j += 2;        }        for (uint256 i = 0; i < STATE_WIDTH_OLD; i++) {            proof.wire_values_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);            j += 1;        }        for (uint256 i = 0; i < proof.wire_values_at_z_omega.length; i++) {            proof.wire_values_at_z_omega[i] = PairingsBn254.new_fr(serialized_proof[j]);            j += 1;        }        proof.grand_product_at_z_omega = PairingsBn254.new_fr(serialized_proof[j]);        j += 1;        proof.quotient_polynomial_at_z = PairingsBn254.new_fr(serialized_proof[j]);        j += 1;        proof.linearization_polynomial_at_z = PairingsBn254.new_fr(serialized_proof[j]);        j += 1;        for (uint256 i = 0; i < proof.permutation_polynomials_at_z.length; i++) {            proof.permutation_polynomials_at_z[i] = PairingsBn254.new_fr(serialized_proof[j]);            j += 1;        }        proof.opening_at_z_proof = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);        j += 2;        proof.opening_at_z_omega_proof = PairingsBn254.new_g1_checked(serialized_proof[j], serialized_proof[j + 1]);    }"