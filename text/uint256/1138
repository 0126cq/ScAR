"function delegateMultiple(        uint256[] memory validatorIds,        uint256 amount,        uint256[] memory portions,        uint256[] memory minShares,        uint256 getId    ) external payable {        require(            portions.length == validatorIds.length,            \"Validator and Portion length doesnt match\"        );        uint256 delegationAmount = getUint(getId, amount);        uint256 totalPortions = 0;        uint256[] memory validatorAmount = new <mask0>;        for (uint256 position = 0; position < portions.length; position++) {            validatorAmount[position] = portions[position]                .mul(delegationAmount)                .div(PORTIONS_SUM);            totalPortions = totalPortions + portions[position];        }        require(totalPortions == PORTIONS_SUM, \"Portion Mismatch\");        maticToken.approve(address(stakeManagerProxy), delegationAmount);        for (uint256 i = 0; i < validatorIds.length; i++) {            IValidatorShareProxy validatorContractAddress = IValidatorShareProxy(                    stakeManagerProxy.getValidatorContract(validatorIds[i])                );            require(                address(validatorContractAddress) != address(0),                \"!Validator\"            );            validatorContractAddress.buyVoucher(                validatorAmount[i],                minShares[i]            );        }    }"