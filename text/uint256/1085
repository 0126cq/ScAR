"function _calcBptInGivenExactTokensOut(        uint256[] memory balances,        uint256[] memory normalizedWeights,        uint256[] memory amountsOut,        uint256 bptTotalSupply,        uint256 swapFeePercentage    ) internal pure returns (uint256) {        uint256[] memory balanceRatiosWithoutFee = new <mask0>;        uint256 invariantRatioWithoutFees = 0;        for (uint256 i = 0; i < balances.length; i++) {            balanceRatiosWithoutFee[i] = balances[i].sub(amountsOut[i]).divUp(balances[i]);            invariantRatioWithoutFees = invariantRatioWithoutFees.add(                balanceRatiosWithoutFee[i].mulUp(normalizedWeights[i])            );        }        uint256 invariantRatio = FixedPoint.ONE;        for (uint256 i = 0; i < balances.length; i++) {            uint256 amountOutWithFee;            if (invariantRatioWithoutFees > balanceRatiosWithoutFee[i]) {                uint256 nonTaxableAmount = balances[i].mulDown(invariantRatioWithoutFees.complement());                uint256 taxableAmount = amountsOut[i].sub(nonTaxableAmount);                amountOutWithFee = nonTaxableAmount.add(taxableAmount.divUp(FixedPoint.ONE.sub(swapFeePercentage)));            } else {                amountOutWithFee = amountsOut[i];            }            uint256 balanceRatio = balances[i].sub(amountOutWithFee).divDown(balances[i]);            invariantRatio = invariantRatio.mulDown(balanceRatio.powDown(normalizedWeights[i]));        }        return bptTotalSupply.mulUp(invariantRatio.complement());    }"