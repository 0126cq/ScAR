"function _mintLoop(        address _receiver,        uint256 _mintAmount,        uint256 _phase    ) internal {        if (residueSale) {            uint256[] memory tokenIDs = new <mask0>;            uint256 tokenCount = phases_default[0] - phases_sale[0];            if (phases_default[0] - phases_sale[0] > 0) {                tokenCount = tokenCount > _mintAmount                    ? _mintAmount                    : tokenCount;                for (uint256 i = 1; i <= tokenCount; i++) {                    _mintAmount--;                    tokenIDs[_mintAmount] = ++phases_sale[0];                }            }            if (_mintAmount > 0 && phases_default[1] - phases_sale[1] > 0) {                tokenCount = phases_default[1] - phases_sale[1];                tokenCount = tokenCount > _mintAmount                    ? _mintAmount                    : tokenCount;                for (uint256 i = 1; i <= tokenCount; i++) {                    _mintAmount--;                    tokenIDs[_mintAmount] =                        ++phases_sale[1] +                        phases_default[1];                }            }            if (_mintAmount > 0 && phases_default[2] - phases_sale[2] > 0) {                tokenCount = phases_default[2] - phases_sale[2];                tokenCount = tokenCount > _mintAmount                    ? _mintAmount                    : tokenCount;                for (uint256 i = 1; i <= tokenCount; i++) {                    _mintAmount--;                    tokenIDs[_mintAmount] =                        maxSupply -                        phases_default[2] +                        (++phases_sale[2]);                }            }            for (uint256 i = 0; i < tokenIDs.length; i++) {                supply.increment();                _safeMint(_receiver, tokenIDs[i]);                tokens[_receiver].push(Token(tokenIDs[i]));            }        } else {            uint256 totalSale = phases_sale[_phase];            uint256 maxSale = phases_default[_phase];            uint256 startID = _phase == 0 ? totalSale : _phase == 1                ? phases_default[0] + totalSale                : maxSupply - maxSale + totalSale;            for (uint256 i = 0; i < _mintAmount; i++) {                supply.increment();                startID++;                _safeMint(_receiver, startID);                tokens[_receiver].push(Token(startID));                phases_sale[_phase]++;            }        }    }"