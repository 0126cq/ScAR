"function viewProportionalDeposit(Storage.Curve storage curve, uint256 _deposit)        external        view        returns (uint256 curves_, uint256[] memory)    {        int128 __deposit = _deposit.divu(1e18);        uint256 _length = curve.assets.length;        (int128 _oGLiq, int128[] memory _oBals) = getGrossLiquidityAndBalancesForDeposit(curve);        uint256[] memory deposits_ = new <mask0>;        if (_oGLiq == 0) {            for (uint256 i = 0; i < _length; i++) {                deposits_[i] = Assimilators.viewRawAmount(                    curve.assets[i].addr,                    __deposit.mul(curve.weights[i]).add(ONE_WEI)                );            }        } else {            int128 _multiplier = __deposit.div(_oGLiq);            uint256 _baseWeight = curve.weights[0].mulu(1e18);            uint256 _quoteWeight = curve.weights[1].mulu(1e18);            for (uint256 i = 0; i < _length; i++) {                deposits_[i] = Assimilators.viewRawAmountLPRatio(                    curve.assets[i].addr,                    _baseWeight,                    _quoteWeight,                    _oBals[i].mul(_multiplier).add(ONE_WEI)                );            }        }        int128 _totalShells = curve.totalSupply.divu(1e18);        int128 _newShells = __deposit;        if (_totalShells > 0) {            _newShells = __deposit.div(_oGLiq);            _newShells = _newShells.mul(_totalShells);        }        curves_ = _newShells.mulu(1e18);        return (curves_, deposits_);    }"