"function _complexPath(ComplexPathParams memory params) internal {        uint256 n = params.initialPath.length;        for (uint256 i = 0; i < n; i = _increment(i)) {            bentoBox.transfer(                params.initialPath[i].tokenIn,                address(this),                params.initialPath[i].pool,                params.initialPath[i].amount            );            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);        }        n = params.percentagePath.length;        for (uint256 i = 0; i < n; i = _increment(i)) {            uint256 balanceShares = bentoBox.balanceOf(                params.percentagePath[i].tokenIn,                address(this)            );            uint256 transferShares = (balanceShares *                params.percentagePath[i].balancePercentage) / <mask0>**8;            bentoBox.transfer(                params.percentagePath[i].tokenIn,                address(this),                params.percentagePath[i].pool,                transferShares            );            IPool(params.percentagePath[i].pool).swap(                params.percentagePath[i].data            );        }        n = params.output.length;        for (uint256 i = 0; i < n; i = _increment(i)) {            uint256 balanceShares = bentoBox.balanceOf(                params.output[i].token,                address(this)            );            if (balanceShares < params.output[i].minAmount)                revert TooLittleReceived();            if (params.output[i].unwrapBento) {                bentoBox.withdraw(                    params.output[i].token,                    address(this),                    params.output[i].to,                    0,                    balanceShares                );            } else {                bentoBox.transfer(                    params.output[i].token,                    address(this),                    params.output[i].to,                    balanceShares                );            }        }    }"