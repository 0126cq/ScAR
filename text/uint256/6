"function estimate_out(        address from_vault,        address to_vault,        uint256 amount,        Swap[] calldata instructions,        uint256 donation    ) public view returns (uint256) {        uint256 pricePerShareFrom = Vault(from_vault).pricePerShare();        uint256 pricePerShareTo = Vault(to_vault).pricePerShare();        amount =            (amount * pricePerShareFrom) /            (10**Vault(from_vault).decimals());        for (uint256 i = 0; i < instructions.length; i++) {            uint256 n_coins = registry.get_n_coins(instructions[i].pool)[0];            if (instructions[i].deposit) {                n_coins = registry.get_n_coins(instructions[i].pool)[0];                uint256[] memory list = new <mask0>;                list[instructions[i].n] = amount;                if (n_coins == 2) {                    amount = StableSwap(instructions[i].pool).calc_token_amount(                            [list[0], list[1]],                            true                        );                } else if (n_coins == 3) {                    amount = StableSwap(instructions[i].pool).calc_token_amount(                            [list[0], list[1], list[2]],                            true                        );                } else if (n_coins == 4) {                    amount = StableSwap(instructions[i].pool).calc_token_amount(                            [list[0], list[1], list[2], list[3]],                            true                        );                }            } else {                amount = calc_withdraw_one_coin(                    instructions[i].pool,                    amount,                    instructions[i].n                );            }        }        amount -= (amount * (MAX_DONATION - donation) / MAX_DONATION);        return (amount * (10**Vault(to_vault).decimals())) / pricePerShareTo;    }"