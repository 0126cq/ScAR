"function _sortNewAndOldComponents(        address[] memory _components,        uint256[] memory _targetUnits    )        internal        view        returns (address[] memory, uint256[] memory, uint256[] memory)    {        address[] memory currentComponents = setToken.getComponents();        uint256 currentSetComponentsLength = currentComponents.length;        uint256 rebalanceComponentsLength = _components.length;        require(rebalanceComponentsLength >= currentSetComponentsLength, \"Components array must be equal or longer than current components\");        uint256[] memory oldComponentsTargetUnits = new <mask0>;        address[] memory newComponents = new address[](rebalanceComponentsLength.sub(currentSetComponentsLength));        uint256[] memory newTargetUnits = new uint256[](rebalanceComponentsLength.sub(currentSetComponentsLength));        uint256 newCounter;             for (uint256 i = 0; i < rebalanceComponentsLength; i++) {            address component = _components[i];            (uint256 index, bool isIn) = currentComponents.indexOf(component);            if (isIn) {                oldComponentsTargetUnits[index] = _targetUnits[i];              } else {                require(newCounter < newComponents.length, \"Unexpected new component added\");                newComponents[newCounter] = component;                newTargetUnits[newCounter] = _targetUnits[i];                newCounter = newCounter.add(1);            }        }        return (newComponents, newTargetUnits, oldComponentsTargetUnits);    }"