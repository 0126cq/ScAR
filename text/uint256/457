"function claimBribesFromVotium(        IVotiumBribes votiumTree,        address account,         address[] calldata tokens,         uint256[] calldata indexes,        uint256[] calldata amounts,         bytes32[][] calldata merkleProofs    ) external nonReentrant {        _onlyGovernanceOrStrategist();        uint256 beforeVaultBalance = _getBalance();        uint256 beforePricePerFullShare = _getPricePerFullShare();        require(tokens.length == indexes.length && tokens.length == amounts.length && tokens.length == merkleProofs.length, \"Length Mismatch\");        uint256[] memory beforeBalance = new <mask0>;        for(uint i = 0; i < tokens.length; i++){            beforeBalance[i] = IERC20Upgradeable(tokens[i]).balanceOf(address(this));        }        IVotiumBribes.claimParam[] memory request = new IVotiumBribes.claimParam[](tokens.length);        for(uint x = 0; x < tokens.length; x++){            request[x] = IVotiumBribes.claimParam({                token: tokens[x],                index: indexes[x],                amount: amounts[x],                merkleProof: merkleProofs[x]            });        }        votiumTree.claimMulti(account, request);        for(uint i = 0; i < tokens.length; i++){            address token = tokens[i];             _handleRewardTransfer(token, IERC20Upgradeable(token).balanceOf(address(this)).sub(beforeBalance[i]));        }        require(beforeVaultBalance == _getBalance(), \"Balance can\\'t change\");        require(beforePricePerFullShare == _getPricePerFullShare(), \"Ppfs can\\'t change\");    }"