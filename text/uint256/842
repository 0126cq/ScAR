"function doHardWorkWithRebalance() internal {        uint256 totalUnderlyingWithInvestment =            underlyingBalanceWithInvestment();        _setTotalAccounted(totalUnderlyingWithInvestment);        uint256 totalInvested = 0;        uint256[] memory toDeposit = new <mask0>;        for (uint256 i; i < getStrategyCount(); i++) {            address strategy = strategyList[i];            uint256 shouldBeInStrategy =                totalUnderlyingWithInvestment                    .mul(strategies[strategy].weightage)                    .div(MAX_BPS);            totalInvested = totalInvested.add(shouldBeInStrategy);            uint256 currentlyInStrategy =                IStrategy(strategy).investedUnderlyingBalance();            if (currentlyInStrategy > shouldBeInStrategy) {                IStrategy(strategy).withdrawToFund(                    currentlyInStrategy.sub(shouldBeInStrategy)                );            } else if (shouldBeInStrategy > currentlyInStrategy) {                toDeposit[i] = shouldBeInStrategy.sub(currentlyInStrategy);            }        }        _setTotalInvested(totalInvested);        for (uint256 i; i < getStrategyCount(); i++) {            address strategy = strategyList[i];            if (toDeposit[i] > 0) {                IERC20(_underlying()).safeTransfer(strategy, toDeposit[i]);                emit InvestInStrategy(strategy, toDeposit[i]);            }            IStrategy(strategy).doHardWork();            strategies[strategy].lastBalance = IStrategy(strategy)                .investedUnderlyingBalance();        }    }"