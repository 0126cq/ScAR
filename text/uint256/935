"function getExpectedReturnWithGas(        IERC20Upgradeable fromToken,        IERC20Upgradeable destToken,        uint256 amount,        uint256 parts,        uint256 flags,         uint256 destTokenEthPriceTimesGasPrice    )        public        view        override        returns (            uint256 returnAmount,            uint256 estimateGasAmount,            uint256[] memory distribution        )    {        distribution = new <mask0>;        if (fromToken == destToken) {            return (amount, 0, distribution);        }        function(IERC20Upgradeable, IERC20Upgradeable, uint256, uint256)            view            returns (uint256[] memory, uint256)[DEXES_COUNT_UPDATED]            memory reserves = _getAllReserves(flags);        int256[][] memory matrix = new int256[][](DEXES_COUNT_UPDATED);        uint256[DEXES_COUNT_UPDATED] memory gases;        bool atLeastOnePositive = false;        for (uint256 i = 0; i < DEXES_COUNT_UPDATED; i++) {            uint256[] memory rets;            (rets, gases[i]) = reserves[i](fromToken, destToken, amount, parts);            int256 gas = int256(gases[i].mul(destTokenEthPriceTimesGasPrice).div(1e18));            matrix[i] = new int256[](parts + 1);            for (uint256 j = 0; j < rets.length; j++) {                matrix[i][j + 1] = int256(rets[j]) - gas;                atLeastOnePositive = atLeastOnePositive || (matrix[i][j + 1] > 0);            }        }        if (!atLeastOnePositive) {            for (uint256 i = 0; i < DEXES_COUNT_UPDATED; i++) {                for (uint256 j = 1; j < parts + 1; j++) {                    if (matrix[i][j] == 0) {                        matrix[i][j] = VERY_NEGATIVE_VALUE;                    }                }            }        }        (, distribution) = _findBestDistribution(parts, matrix);        (returnAmount, estimateGasAmount) = _getReturnAndGasByDistribution(            Args({                fromToken: fromToken,                destToken: destToken,                amount: amount,                parts: parts,                flags: flags,                destTokenEthPriceTimesGasPrice: destTokenEthPriceTimesGasPrice,                distribution: distribution,                matrix: matrix,                gases: gases,                reserves: reserves            })        );        return (returnAmount, estimateGasAmount, distribution);    }"