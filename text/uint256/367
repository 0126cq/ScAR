"function getEthAndTokensIn(uint256 _ethValue, address[] memory _tokens, uint256 _slippage) public view returns(        uint256[] memory tokensInPipt,        uint256[] memory ethInUniswap,        uint256 poolOut    ) {        _ethValue = _ethValue.sub(_ethValue.mul(_slippage).div(1 ether));        CalculationStruct[] memory calculations = new CalculationStruct[](_tokens.length);        uint256 totalEthRequired = 0;        {            uint256 piptTotalSupply = pipt.totalSupply();            uint256 poolRatio = piptTotalSupply.mul(1 ether).div(pipt.getBalance(_tokens[0])).mul(1 ether).div(piptTotalSupply);            for (uint i = 0; i < _tokens.length; i++) {                calculations[i].tokenShare = poolRatio.mul(pipt.getBalance(_tokens[i])).div(1 ether);                (calculations[i].tokenReserve, calculations[i].ethReserve,) = uniswapPairFor(_tokens[i]).getReserves();                calculations[i].ethRequired = getAmountIn(                    calculations[i].tokenShare,                    calculations[i].ethReserve,                    calculations[i].tokenReserve                );                totalEthRequired = totalEthRequired.add(calculations[i].ethRequired);            }        }        tokensInPipt = new <mask0>;        ethInUniswap = new uint256[](_tokens.length);        for (uint i = 0; i < _tokens.length; i++) {            ethInUniswap[i] = _ethValue.mul(calculations[i].ethRequired.mul(1 ether).div(totalEthRequired)).div(1 ether);            tokensInPipt[i] = calculations[i].tokenShare.mul(_ethValue.mul(1 ether).div(totalEthRequired)).div(1 ether);        }        poolOut = pipt.totalSupply().mul(tokensInPipt[0]).div(pipt.getBalance(_tokens[0]));    }"